Search.setIndex({"alltitles": {"ABS": [[1390, "abs"]], "ACOS": [[1393, "acos"]], "ACOSD": [[1393, "acosd"]], "ARRAY_AGG": [[1386, "array-agg"]], "ARRAY_CONTAINS": [[1386, "array-contains"]], "ARRAY_GET": [[1386, "array-get"]], "ARRAY_LENGTH": [[1386, "array-length"]], "ARRAY_LOWER": [[1386, "array-lower"]], "ARRAY_MEAN": [[1386, "array-mean"]], "ARRAY_REVERSE": [[1386, "array-reverse"]], "ARRAY_SUM": [[1386, "array-sum"]], "ARRAY_TO_STRING": [[1386, "array-to-string"]], "ARRAY_UNIQUE": [[1386, "array-unique"]], "ARRAY_UPPER": [[1386, "array-upper"]], "ASIN": [[1393, "asin"]], "ASIND": [[1393, "asind"]], "ATAN": [[1393, "atan"]], "ATAN2": [[1393, "atan2"]], "ATAN2D": [[1393, "atan2d"]], "ATAND": [[1393, "atand"]], "AVG": [[1385, "avg"]], "Aggregate": [[1385, null]], "Aggregation": [[206, null], [361, null], [861, null], [973, null]], "Aliases": [[1385, null], [1385, null], [1385, null], [1390, null], [1390, null], [1391, null], [1391, null]], "Array": [[839, null], [1360, null], [1386, null]], "Asserts": [[1399, "asserts"]], "Attributes": [[349, null], [961, null], [1361, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[860, "avro"]], "BIT_AND": [[1387, "bit-and"]], "BIT_COUNT": [[1387, "bit-count"]], "BIT_LENGTH": [[1391, "bit-length"]], "BIT_OR": [[1387, "bit-or"]], "BIT_XOR": [[1387, "bit-xor"]], "Binary": [[840, null], [853, "binary"], [1362, null]], "Bitwise": [[1387, null]], "Boolean": [[841, null], [1363, null]], "CAST": [[1394, "cast"]], "CBRT": [[1390, "cbrt"]], "CEIL": [[1390, "ceil"]], "COALESCE": [[1388, "coalesce"]], "CONCAT": [[1391, "concat"]], "CONCAT_WS": [[1391, "concat-ws"]], "CORR": [[1385, "corr"]], "COS": [[1393, "cos"]], "COSD": [[1393, "cosd"]], "COT": [[1393, "cot"]], "COTD": [[1393, "cotd"]], "COUNT": [[1385, "count"]], "CREATE TABLE": [[1398, "create-table"]], "CSV": [[860, "csv"]], "Catalog": [[203, null]], "Categories": [[842, null], [1364, null]], "Clipboard": [[860, "clipboard"]], "Cloud Credentials": [[860, "cloud-credentials"]], "Columns / names": [[844, null]], "Comparison": [[853, "comparison"], [1372, "comparison"]], "Computation": [[350, null], [845, null], [1365, null]], "Conditional": [[1388, null]], "Config": [[205, null]], "Config load, save, state": [[205, "config-load-save-state"]], "Config options": [[205, "config-options"]], "Conjunction": [[853, "conjunction"]], "Conversion": [[858, "conversion"]], "DATE": [[1391, "date"]], "DATE_PART": [[1392, "date-part"]], "DEGREES": [[1393, "degrees"]], "DELETE": [[1398, "delete"]], "DISTINCT": [[1384, "distinct"]], "DIV": [[1390, "div"]], "DROP TABLES": [[1398, "drop-tables"]], "Data types": [[359, null]], "DataFrame": [[354, null]], "DataType": [[359, "datatype"]], "Database": [[860, "database"]], "Delta Lake": [[860, "delta-lake"]], "Descriptive": [[351, null], [962, null], [1366, null]], "Documentation": [[1396, null], [1396, null], [1396, null]], "ENDS_WITH": [[1391, "ends-with"]], "EXCEPT": [[1397, "except"]], "EXP": [[1390, "exp"]], "EXPLAIN": [[1398, "explain"]], "EXTRACT": [[1392, "extract"]], "Errors": [[360, "errors"]], "Examples": [[1, "examples"], [972, "examples"], [1399, "examples"]], "Excel / ODS": [[860, "excel-ods"]], "Exceptions": [[360, null]], "Export": [[352, null], [1367, null]], "Expression SQL": [[1396, "expression-sql"]], "Expression plugins": [[970, "expression-plugins"]], "Expressions": [[847, null]], "Extending the API": [[1, null]], "FIRST": [[1385, "first"]], "FLOOR": [[1390, "floor"]], "FROM": [[1384, "from"]], "Feather / IPC": [[860, "feather-ipc"]], "Frame SQL": [[1396, "frame-sql"]], "Functions": [[846, null], [858, null], [972, "functions"]], "GPUEngine": [[963, null]], "GREATEST": [[1388, "greatest"]], "GROUP BY": [[1384, "group-by"]], "Global SQL": [[1396, "global-sql"]], "GroupBy": [[353, null], [964, null]], "HAVING": [[1384, "having"]], "IF": [[1388, "if"]], "IFNULL": [[1388, "ifnull"]], "INITCAP": [[1391, "initcap"]], "INTERSECT": [[1397, "intersect"]], "IO plugins": [[970, "io-plugins"]], "Iceberg": [[860, "iceberg"]], "Importing": [[972, "importing"]], "InProcessQuery": [[965, null]], "Index": [[0, null]], "Input/output": [[860, null]], "Introduction": [[1396, "introduction"]], "JOIN": [[1384, "join"]], "JSON": [[860, "json"]], "LAST": [[1385, "last"]], "LEAST": [[1388, "least"]], "LEFT": [[1391, "left"]], "LENGTH": [[1391, "length"]], "LIMIT": [[1384, "limit"]], "LN": [[1390, "ln"]], "LOG": [[1390, "log"]], "LOG10": [[1390, "log10"]], "LOG1P": [[1390, "log1p"]], "LOG2": [[1390, "log2"]], "LOWER": [[1391, "lower"]], "LTRIM": [[1391, "ltrim"]], "LazyFrame": [[966, null]], "List": [[848, null], [1369, null]], "MAX": [[1385, "max"]], "MEDIAN": [[1385, "median"]], "MIN": [[1385, "min"]], "MOD": [[1390, "mod"]], "Manipulation/selection": [[356, null], [851, null], [968, null], [1371, null]], "Math": [[1390, null]], "Meta": [[849, null]], "Metadata": [[969, null]], "Methods": [[1396, "methods"]], "Miscellaneous": [[355, null], [850, null], [858, "miscellaneous"], [967, null], [1370, null]], "Multiple Config instances": [[205, "multiple-config-instances"]], "Multiple queries": [[858, "multiple-queries"]], "NORMALIZE": [[1391, "normalize"]], "NULLIF": [[1388, "nullif"]], "Name": [[852, null]], "Nested": [[359, "nested"]], "Numeric": [[359, "numeric"], [853, "numeric"], [1372, "numeric"]], "OCTET_LENGTH": [[1391, "octet-length"]], "OFFSET": [[1384, "offset"]], "ORDER BY": [[1384, "order-by"]], "Operators": [[853, null], [1372, null]], "Other": [[359, "other"]], "PI": [[1390, "pi"]], "POW": [[1390, "pow"]], "Panic": [[360, "panic"]], "Parametric testing": [[1399, "parametric-testing"]], "Parquet": [[860, "parquet"]], "Partition": [[860, "partition"]], "Plot": [[357, null], [1373, null]], "Plugins": [[970, null]], "Polars strategies": [[1399, "polars-strategies"]], "Profiles": [[1399, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[860, "pyarrow-datasets"]], "Python API": [[1396, null]], "Python API reference": [[859, null]], "QUANTILE_CONT": [[1385, "quantile-cont"]], "QUANTILE_DISC": [[1385, "quantile-disc"]], "Querying": [[1396, "querying"]], "RADIANS": [[1393, "radians"]], "REGEXP_LIKE": [[1391, "regexp-like"]], "REPLACE": [[1391, "replace"]], "REVERSE": [[1391, "reverse"]], "RIGHT": [[1391, "right"]], "ROUND": [[1390, "round"]], "RTRIM": [[1391, "rtrim"]], "Random": [[858, "random"]], "SELECT": [[1384, "select"]], "SHOW TABLES": [[1398, "show-tables"]], "SIGN": [[1390, "sign"]], "SIN": [[1393, "sin"]], "SIND": [[1393, "sind"]], "SPLIT_PART": [[1391, "split-part"]], "SQL Clauses": [[1384, null]], "SQL Functions": [[1389, null]], "SQL Interface": [[1395, null]], "SQLContext": [[1396, "sqlcontext"]], "SQRT": [[1390, "sqrt"]], "STARTS_WITH": [[1391, "starts-with"]], "STDDEV": [[1385, "stddev"]], "STRFTIME": [[1392, "strftime"]], "STRING_TO_ARRAY": [[1391, "string-to-array"]], "STRPOS": [[1391, "strpos"]], "STRPTIME": [[1391, "strptime"]], "SUBSTR": [[1391, "substr"]], "SUM": [[1385, "sum"]], "Scan Cast Options": [[860, "scan-cast-options"]], "Schema": [[971, null]], "Selectors": [[972, null]], "Serialization": [[355, "serialization"], [967, "serialization"]], "Series": [[1368, null]], "Set Operations": [[1397, null]], "Set operations": [[972, "set-operations"]], "Strategy helpers": [[1399, "strategy-helpers"]], "String": [[359, "string"], [854, null], [1374, null], [1391, null]], "StringCache": [[858, "stringcache"]], "Struct": [[855, null], [1375, null]], "Style": [[358, null]], "TAN": [[1393, "tan"]], "TAND": [[1393, "tand"]], "TIMESTAMP": [[1391, "timestamp"]], "TRUNCATE": [[1398, "truncate"]], "TRY_CAST": [[1394, "try-cast"]], "Table Operations": [[1398, null]], "Temporal": [[359, "temporal"], [856, null], [1376, null], [1392, null]], "Testing": [[1399, null]], "Trigonometry": [[1393, null]], "Types": [[1394, null]], "UNION": [[1397, "union"]], "UNION ALL": [[1397, "union-all"]], "UNION BY NAME": [[1397, "union-by-name"]], "UNNEST": [[1386, "unnest"], [1398, "unnest"]], "UPPER": [[1391, "upper"]], "Unity Catalog": [[204, null]], "Use as a context manager": [[205, "use-as-a-context-manager"]], "Use as a decorator": [[205, "use-as-a-decorator"]], "VARIANCE": [[1385, "variance"]], "WHERE": [[1384, "where"]], "Warnings": [[360, "warnings"]], "Window": [[857, null]], "polars.Catalog": [[190, null]], "polars.Catalog.get_table_info": [[191, null]], "polars.Catalog.list_catalogs": [[192, null]], "polars.Catalog.list_namespaces": [[193, null]], "polars.Catalog.list_tables": [[194, null]], "polars.Catalog.scan_table": [[195, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[207, null]], "polars.DataFrame.__arrow_c_stream__": [[208, null]], "polars.DataFrame.__dataframe__": [[209, null]], "polars.DataFrame.__getitem__": [[210, null]], "polars.DataFrame.__setitem__": [[211, null]], "polars.DataFrame.approx_n_unique": [[212, null]], "polars.DataFrame.bottom_k": [[213, null]], "polars.DataFrame.cast": [[214, null]], "polars.DataFrame.clear": [[215, null]], "polars.DataFrame.clone": [[216, null]], "polars.DataFrame.collect_schema": [[217, null]], "polars.DataFrame.columns": [[218, null]], "polars.DataFrame.corr": [[219, null]], "polars.DataFrame.count": [[220, null]], "polars.DataFrame.describe": [[221, null]], "polars.DataFrame.deserialize": [[222, null]], "polars.DataFrame.drop": [[223, null]], "polars.DataFrame.drop_in_place": [[224, null]], "polars.DataFrame.drop_nans": [[225, null]], "polars.DataFrame.drop_nulls": [[226, null]], "polars.DataFrame.dtypes": [[227, null]], "polars.DataFrame.equals": [[228, null]], "polars.DataFrame.estimated_size": [[229, null]], "polars.DataFrame.explode": [[230, null]], "polars.DataFrame.extend": [[231, null]], "polars.DataFrame.fill_nan": [[232, null]], "polars.DataFrame.fill_null": [[233, null]], "polars.DataFrame.filter": [[234, null]], "polars.DataFrame.flags": [[235, null]], "polars.DataFrame.fold": [[236, null]], "polars.DataFrame.gather_every": [[237, null]], "polars.DataFrame.get_column": [[238, null]], "polars.DataFrame.get_column_index": [[239, null]], "polars.DataFrame.get_columns": [[240, null]], "polars.DataFrame.glimpse": [[241, null]], "polars.DataFrame.group_by": [[242, null]], "polars.DataFrame.group_by_dynamic": [[243, null]], "polars.DataFrame.hash_rows": [[244, null]], "polars.DataFrame.head": [[245, null]], "polars.DataFrame.height": [[246, null]], "polars.DataFrame.hstack": [[247, null]], "polars.DataFrame.insert_column": [[248, null]], "polars.DataFrame.interpolate": [[249, null]], "polars.DataFrame.is_duplicated": [[250, null]], "polars.DataFrame.is_empty": [[251, null]], "polars.DataFrame.is_unique": [[252, null]], "polars.DataFrame.item": [[253, null]], "polars.DataFrame.iter_columns": [[254, null]], "polars.DataFrame.iter_rows": [[255, null]], "polars.DataFrame.iter_slices": [[256, null]], "polars.DataFrame.join": [[257, null]], "polars.DataFrame.join_asof": [[258, null]], "polars.DataFrame.join_where": [[259, null]], "polars.DataFrame.lazy": [[260, null]], "polars.DataFrame.limit": [[261, null]], "polars.DataFrame.map_rows": [[262, null]], "polars.DataFrame.match_to_schema": [[263, null]], "polars.DataFrame.max": [[264, null]], "polars.DataFrame.max_horizontal": [[265, null]], "polars.DataFrame.mean": [[266, null]], "polars.DataFrame.mean_horizontal": [[267, null]], "polars.DataFrame.median": [[268, null]], "polars.DataFrame.melt": [[269, null]], "polars.DataFrame.merge_sorted": [[270, null]], "polars.DataFrame.min": [[271, null]], "polars.DataFrame.min_horizontal": [[272, null]], "polars.DataFrame.n_chunks": [[273, null]], "polars.DataFrame.n_unique": [[274, null]], "polars.DataFrame.null_count": [[275, null]], "polars.DataFrame.partition_by": [[276, null]], "polars.DataFrame.pipe": [[277, null]], "polars.DataFrame.pivot": [[278, null]], "polars.DataFrame.product": [[279, null]], "polars.DataFrame.quantile": [[280, null]], "polars.DataFrame.rechunk": [[281, null]], "polars.DataFrame.remove": [[282, null]], "polars.DataFrame.rename": [[283, null]], "polars.DataFrame.replace_column": [[284, null]], "polars.DataFrame.reverse": [[285, null]], "polars.DataFrame.rolling": [[286, null]], "polars.DataFrame.row": [[287, null]], "polars.DataFrame.rows": [[288, null]], "polars.DataFrame.rows_by_key": [[289, null]], "polars.DataFrame.sample": [[290, null]], "polars.DataFrame.schema": [[291, null]], "polars.DataFrame.select": [[292, null]], "polars.DataFrame.select_seq": [[293, null]], "polars.DataFrame.serialize": [[294, null]], "polars.DataFrame.set_sorted": [[295, null]], "polars.DataFrame.shape": [[296, null]], "polars.DataFrame.shift": [[297, null]], "polars.DataFrame.shrink_to_fit": [[298, null]], "polars.DataFrame.slice": [[299, null]], "polars.DataFrame.sort": [[300, null]], "polars.DataFrame.sql": [[301, null]], "polars.DataFrame.std": [[302, null]], "polars.DataFrame.sum": [[303, null]], "polars.DataFrame.sum_horizontal": [[304, null]], "polars.DataFrame.tail": [[305, null]], "polars.DataFrame.to_arrow": [[306, null]], "polars.DataFrame.to_dict": [[307, null]], "polars.DataFrame.to_dicts": [[308, null]], "polars.DataFrame.to_dummies": [[309, null]], "polars.DataFrame.to_init_repr": [[310, null]], "polars.DataFrame.to_jax": [[311, null]], "polars.DataFrame.to_numpy": [[312, null]], "polars.DataFrame.to_pandas": [[313, null]], "polars.DataFrame.to_series": [[314, null]], "polars.DataFrame.to_struct": [[315, null]], "polars.DataFrame.to_torch": [[316, null]], "polars.DataFrame.top_k": [[317, null]], "polars.DataFrame.transpose": [[318, null]], "polars.DataFrame.unique": [[319, null]], "polars.DataFrame.unnest": [[320, null]], "polars.DataFrame.unpivot": [[321, null]], "polars.DataFrame.unstack": [[322, null]], "polars.DataFrame.update": [[323, null]], "polars.DataFrame.upsample": [[324, null]], "polars.DataFrame.var": [[325, null]], "polars.DataFrame.vstack": [[326, null]], "polars.DataFrame.width": [[327, null]], "polars.DataFrame.with_columns": [[328, null]], "polars.DataFrame.with_columns_seq": [[329, null]], "polars.DataFrame.with_row_count": [[330, null]], "polars.DataFrame.with_row_index": [[331, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.Expr.abs": [[362, null]], "polars.Expr.add": [[363, null]], "polars.Expr.agg_groups": [[364, null]], "polars.Expr.alias": [[365, null]], "polars.Expr.all": [[366, null]], "polars.Expr.and_": [[367, null]], "polars.Expr.any": [[368, null]], "polars.Expr.append": [[369, null]], "polars.Expr.approx_n_unique": [[370, null]], "polars.Expr.arccos": [[371, null]], "polars.Expr.arccosh": [[372, null]], "polars.Expr.arcsin": [[373, null]], "polars.Expr.arcsinh": [[374, null]], "polars.Expr.arctan": [[375, null]], "polars.Expr.arctanh": [[376, null]], "polars.Expr.arg_max": [[377, null]], "polars.Expr.arg_min": [[378, null]], "polars.Expr.arg_sort": [[379, null]], "polars.Expr.arg_true": [[380, null]], "polars.Expr.arg_unique": [[381, null]], "polars.Expr.arr.all": [[382, null]], "polars.Expr.arr.any": [[383, null]], "polars.Expr.arr.arg_max": [[384, null]], "polars.Expr.arr.arg_min": [[385, null]], "polars.Expr.arr.contains": [[386, null]], "polars.Expr.arr.count_matches": [[387, null]], "polars.Expr.arr.explode": [[388, null]], "polars.Expr.arr.first": [[389, null]], "polars.Expr.arr.get": [[390, null]], "polars.Expr.arr.join": [[391, null]], "polars.Expr.arr.last": [[392, null]], "polars.Expr.arr.max": [[393, null]], "polars.Expr.arr.median": [[394, null]], "polars.Expr.arr.min": [[395, null]], "polars.Expr.arr.n_unique": [[396, null]], "polars.Expr.arr.reverse": [[397, null]], "polars.Expr.arr.shift": [[398, null]], "polars.Expr.arr.sort": [[399, null]], "polars.Expr.arr.std": [[400, null]], "polars.Expr.arr.sum": [[401, null]], "polars.Expr.arr.to_list": [[402, null]], "polars.Expr.arr.to_struct": [[403, null]], "polars.Expr.arr.unique": [[404, null]], "polars.Expr.arr.var": [[405, null]], "polars.Expr.backward_fill": [[406, null]], "polars.Expr.bin.contains": [[407, null]], "polars.Expr.bin.decode": [[408, null]], "polars.Expr.bin.encode": [[409, null]], "polars.Expr.bin.ends_with": [[410, null]], "polars.Expr.bin.reinterpret": [[411, null]], "polars.Expr.bin.size": [[412, null]], "polars.Expr.bin.starts_with": [[413, null]], "polars.Expr.bitwise_and": [[414, null]], "polars.Expr.bitwise_count_ones": [[415, null]], "polars.Expr.bitwise_count_zeros": [[416, null]], "polars.Expr.bitwise_leading_ones": [[417, null]], "polars.Expr.bitwise_leading_zeros": [[418, null]], "polars.Expr.bitwise_or": [[419, null]], "polars.Expr.bitwise_trailing_ones": [[420, null]], "polars.Expr.bitwise_trailing_zeros": [[421, null]], "polars.Expr.bitwise_xor": [[422, null]], "polars.Expr.bottom_k": [[423, null]], "polars.Expr.bottom_k_by": [[424, null]], "polars.Expr.cast": [[425, null]], "polars.Expr.cat.ends_with": [[426, null]], "polars.Expr.cat.get_categories": [[427, null]], "polars.Expr.cat.len_bytes": [[428, null]], "polars.Expr.cat.len_chars": [[429, null]], "polars.Expr.cat.starts_with": [[430, null]], "polars.Expr.cbrt": [[431, null]], "polars.Expr.ceil": [[432, null]], "polars.Expr.clip": [[433, null]], "polars.Expr.cos": [[434, null]], "polars.Expr.cosh": [[435, null]], "polars.Expr.cot": [[436, null]], "polars.Expr.count": [[437, null]], "polars.Expr.cum_count": [[438, null]], "polars.Expr.cum_max": [[439, null]], "polars.Expr.cum_min": [[440, null]], "polars.Expr.cum_prod": [[441, null]], "polars.Expr.cum_sum": [[442, null]], "polars.Expr.cumulative_eval": [[443, null]], "polars.Expr.cut": [[444, null]], "polars.Expr.degrees": [[445, null]], "polars.Expr.deserialize": [[446, null]], "polars.Expr.diff": [[447, null]], "polars.Expr.dot": [[448, null]], "polars.Expr.drop_nans": [[449, null]], "polars.Expr.drop_nulls": [[450, null]], "polars.Expr.dt.add_business_days": [[451, null]], "polars.Expr.dt.base_utc_offset": [[452, null]], "polars.Expr.dt.cast_time_unit": [[453, null]], "polars.Expr.dt.century": [[454, null]], "polars.Expr.dt.combine": [[455, null]], "polars.Expr.dt.convert_time_zone": [[456, null]], "polars.Expr.dt.date": [[457, null]], "polars.Expr.dt.datetime": [[458, null]], "polars.Expr.dt.day": [[459, null]], "polars.Expr.dt.dst_offset": [[460, null]], "polars.Expr.dt.epoch": [[461, null]], "polars.Expr.dt.hour": [[462, null]], "polars.Expr.dt.is_business_day": [[463, null]], "polars.Expr.dt.is_leap_year": [[464, null]], "polars.Expr.dt.iso_year": [[465, null]], "polars.Expr.dt.microsecond": [[466, null]], "polars.Expr.dt.millennium": [[467, null]], "polars.Expr.dt.millisecond": [[468, null]], "polars.Expr.dt.minute": [[469, null]], "polars.Expr.dt.month": [[470, null]], "polars.Expr.dt.month_end": [[471, null]], "polars.Expr.dt.month_start": [[472, null]], "polars.Expr.dt.nanosecond": [[473, null]], "polars.Expr.dt.offset_by": [[474, null]], "polars.Expr.dt.ordinal_day": [[475, null]], "polars.Expr.dt.quarter": [[476, null]], "polars.Expr.dt.replace": [[477, null]], "polars.Expr.dt.replace_time_zone": [[478, null]], "polars.Expr.dt.round": [[479, null]], "polars.Expr.dt.second": [[480, null]], "polars.Expr.dt.strftime": [[481, null]], "polars.Expr.dt.time": [[482, null]], "polars.Expr.dt.timestamp": [[483, null]], "polars.Expr.dt.to_string": [[484, null]], "polars.Expr.dt.total_days": [[485, null]], "polars.Expr.dt.total_hours": [[486, null]], "polars.Expr.dt.total_microseconds": [[487, null]], "polars.Expr.dt.total_milliseconds": [[488, null]], "polars.Expr.dt.total_minutes": [[489, null]], "polars.Expr.dt.total_nanoseconds": [[490, null]], "polars.Expr.dt.total_seconds": [[491, null]], "polars.Expr.dt.truncate": [[492, null]], "polars.Expr.dt.week": [[493, null]], "polars.Expr.dt.weekday": [[494, null]], "polars.Expr.dt.with_time_unit": [[495, null]], "polars.Expr.dt.year": [[496, null]], "polars.Expr.entropy": [[497, null]], "polars.Expr.eq": [[498, null]], "polars.Expr.eq_missing": [[499, null]], "polars.Expr.ewm_mean": [[500, null]], "polars.Expr.ewm_mean_by": [[501, null]], "polars.Expr.ewm_std": [[502, null]], "polars.Expr.ewm_var": [[503, null]], "polars.Expr.exclude": [[504, null]], "polars.Expr.exp": [[505, null]], "polars.Expr.explode": [[506, null]], "polars.Expr.extend_constant": [[507, null]], "polars.Expr.fill_nan": [[508, null]], "polars.Expr.fill_null": [[509, null]], "polars.Expr.filter": [[510, null]], "polars.Expr.first": [[511, null]], "polars.Expr.flatten": [[512, null]], "polars.Expr.floor": [[513, null]], "polars.Expr.floordiv": [[514, null]], "polars.Expr.forward_fill": [[515, null]], "polars.Expr.from_json": [[516, null]], "polars.Expr.gather": [[517, null]], "polars.Expr.gather_every": [[518, null]], "polars.Expr.ge": [[519, null]], "polars.Expr.get": [[520, null]], "polars.Expr.gt": [[521, null]], "polars.Expr.has_nulls": [[522, null]], "polars.Expr.hash": [[523, null]], "polars.Expr.head": [[524, null]], "polars.Expr.hist": [[525, null]], "polars.Expr.implode": [[526, null]], "polars.Expr.index_of": [[527, null]], "polars.Expr.inspect": [[528, null]], "polars.Expr.interpolate": [[529, null]], "polars.Expr.interpolate_by": [[530, null]], "polars.Expr.is_between": [[531, null]], "polars.Expr.is_duplicated": [[532, null]], "polars.Expr.is_finite": [[533, null]], "polars.Expr.is_first_distinct": [[534, null]], "polars.Expr.is_in": [[535, null]], "polars.Expr.is_infinite": [[536, null]], "polars.Expr.is_last_distinct": [[537, null]], "polars.Expr.is_nan": [[538, null]], "polars.Expr.is_not_nan": [[539, null]], "polars.Expr.is_not_null": [[540, null]], "polars.Expr.is_null": [[541, null]], "polars.Expr.is_unique": [[542, null]], "polars.Expr.kurtosis": [[543, null]], "polars.Expr.last": [[544, null]], "polars.Expr.le": [[545, null]], "polars.Expr.len": [[546, null]], "polars.Expr.limit": [[547, null]], "polars.Expr.list.all": [[548, null]], "polars.Expr.list.any": [[549, null]], "polars.Expr.list.arg_max": [[550, null]], "polars.Expr.list.arg_min": [[551, null]], "polars.Expr.list.concat": [[552, null]], "polars.Expr.list.contains": [[553, null]], "polars.Expr.list.count_matches": [[554, null]], "polars.Expr.list.diff": [[555, null]], "polars.Expr.list.drop_nulls": [[556, null]], "polars.Expr.list.eval": [[557, null]], "polars.Expr.list.explode": [[558, null]], "polars.Expr.list.first": [[559, null]], "polars.Expr.list.gather": [[560, null]], "polars.Expr.list.gather_every": [[561, null]], "polars.Expr.list.get": [[562, null]], "polars.Expr.list.head": [[563, null]], "polars.Expr.list.join": [[564, null]], "polars.Expr.list.last": [[565, null]], "polars.Expr.list.len": [[566, null]], "polars.Expr.list.max": [[567, null]], "polars.Expr.list.mean": [[568, null]], "polars.Expr.list.median": [[569, null]], "polars.Expr.list.min": [[570, null]], "polars.Expr.list.n_unique": [[571, null]], "polars.Expr.list.reverse": [[572, null]], "polars.Expr.list.sample": [[573, null]], "polars.Expr.list.set_difference": [[574, null]], "polars.Expr.list.set_intersection": [[575, null]], "polars.Expr.list.set_symmetric_difference": [[576, null]], "polars.Expr.list.set_union": [[577, null]], "polars.Expr.list.shift": [[578, null]], "polars.Expr.list.slice": [[579, null]], "polars.Expr.list.sort": [[580, null]], "polars.Expr.list.std": [[581, null]], "polars.Expr.list.sum": [[582, null]], "polars.Expr.list.tail": [[583, null]], "polars.Expr.list.to_array": [[584, null]], "polars.Expr.list.to_struct": [[585, null]], "polars.Expr.list.unique": [[586, null]], "polars.Expr.list.var": [[587, null]], "polars.Expr.log": [[588, null]], "polars.Expr.log10": [[589, null]], "polars.Expr.log1p": [[590, null]], "polars.Expr.lower_bound": [[591, null]], "polars.Expr.lt": [[592, null]], "polars.Expr.map_batches": [[593, null]], "polars.Expr.map_elements": [[594, null]], "polars.Expr.max": [[595, null]], "polars.Expr.mean": [[596, null]], "polars.Expr.median": [[597, null]], "polars.Expr.meta.eq": [[598, null]], "polars.Expr.meta.has_multiple_outputs": [[599, null]], "polars.Expr.meta.is_column": [[600, null]], "polars.Expr.meta.is_column_selection": [[601, null]], "polars.Expr.meta.is_literal": [[602, null]], "polars.Expr.meta.is_regex_projection": [[603, null]], "polars.Expr.meta.ne": [[604, null]], "polars.Expr.meta.output_name": [[605, null]], "polars.Expr.meta.pop": [[606, null]], "polars.Expr.meta.root_names": [[607, null]], "polars.Expr.meta.serialize": [[608, null]], "polars.Expr.meta.show_graph": [[609, null]], "polars.Expr.meta.tree_format": [[610, null]], "polars.Expr.meta.undo_aliases": [[611, null]], "polars.Expr.meta.write_json": [[612, null]], "polars.Expr.min": [[613, null]], "polars.Expr.mod": [[614, null]], "polars.Expr.mode": [[615, null]], "polars.Expr.mul": [[616, null]], "polars.Expr.n_unique": [[617, null]], "polars.Expr.name.keep": [[618, null]], "polars.Expr.name.map": [[619, null]], "polars.Expr.name.map_fields": [[620, null]], "polars.Expr.name.prefix": [[621, null]], "polars.Expr.name.prefix_fields": [[622, null]], "polars.Expr.name.suffix": [[623, null]], "polars.Expr.name.suffix_fields": [[624, null]], "polars.Expr.name.to_lowercase": [[625, null]], "polars.Expr.name.to_uppercase": [[626, null]], "polars.Expr.nan_max": [[627, null]], "polars.Expr.nan_min": [[628, null]], "polars.Expr.ne": [[629, null]], "polars.Expr.ne_missing": [[630, null]], "polars.Expr.neg": [[631, null]], "polars.Expr.not_": [[632, null]], "polars.Expr.null_count": [[633, null]], "polars.Expr.or_": [[634, null]], "polars.Expr.over": [[635, null]], "polars.Expr.pct_change": [[636, null]], "polars.Expr.peak_max": [[637, null]], "polars.Expr.peak_min": [[638, null]], "polars.Expr.pipe": [[639, null]], "polars.Expr.pow": [[640, null]], "polars.Expr.product": [[641, null]], "polars.Expr.qcut": [[642, null]], "polars.Expr.quantile": [[643, null]], "polars.Expr.radians": [[644, null]], "polars.Expr.rank": [[645, null]], "polars.Expr.rechunk": [[646, null]], "polars.Expr.reinterpret": [[647, null]], "polars.Expr.repeat_by": [[648, null]], "polars.Expr.replace": [[649, null]], "polars.Expr.replace_strict": [[650, null]], "polars.Expr.reshape": [[651, null]], "polars.Expr.reverse": [[652, null]], "polars.Expr.rle": [[653, null]], "polars.Expr.rle_id": [[654, null]], "polars.Expr.rolling": [[655, null]], "polars.Expr.rolling_kurtosis": [[656, null]], "polars.Expr.rolling_map": [[657, null]], "polars.Expr.rolling_max": [[658, null]], "polars.Expr.rolling_max_by": [[659, null]], "polars.Expr.rolling_mean": [[660, null]], "polars.Expr.rolling_mean_by": [[661, null]], "polars.Expr.rolling_median": [[662, null]], "polars.Expr.rolling_median_by": [[663, null]], "polars.Expr.rolling_min": [[664, null]], "polars.Expr.rolling_min_by": [[665, null]], "polars.Expr.rolling_quantile": [[666, null]], "polars.Expr.rolling_quantile_by": [[667, null]], "polars.Expr.rolling_skew": [[668, null]], "polars.Expr.rolling_std": [[669, null]], "polars.Expr.rolling_std_by": [[670, null]], "polars.Expr.rolling_sum": [[671, null]], "polars.Expr.rolling_sum_by": [[672, null]], "polars.Expr.rolling_var": [[673, null]], "polars.Expr.rolling_var_by": [[674, null]], "polars.Expr.round": [[675, null]], "polars.Expr.round_sig_figs": [[676, null]], "polars.Expr.sample": [[677, null]], "polars.Expr.search_sorted": [[678, null]], "polars.Expr.set_sorted": [[679, null]], "polars.Expr.shift": [[680, null]], "polars.Expr.shrink_dtype": [[681, null]], "polars.Expr.shuffle": [[682, null]], "polars.Expr.sign": [[683, null]], "polars.Expr.sin": [[684, null]], "polars.Expr.sinh": [[685, null]], "polars.Expr.skew": [[686, null]], "polars.Expr.slice": [[687, null]], "polars.Expr.sort": [[688, null]], "polars.Expr.sort_by": [[689, null]], "polars.Expr.sqrt": [[690, null]], "polars.Expr.std": [[691, null]], "polars.Expr.str.concat": [[692, null]], "polars.Expr.str.contains": [[693, null]], "polars.Expr.str.contains_any": [[694, null]], "polars.Expr.str.count_matches": [[695, null]], "polars.Expr.str.decode": [[696, null]], "polars.Expr.str.encode": [[697, null]], "polars.Expr.str.ends_with": [[698, null]], "polars.Expr.str.escape_regex": [[699, null]], "polars.Expr.str.explode": [[700, null]], "polars.Expr.str.extract": [[701, null]], "polars.Expr.str.extract_all": [[702, null]], "polars.Expr.str.extract_groups": [[703, null]], "polars.Expr.str.extract_many": [[704, null]], "polars.Expr.str.find": [[705, null]], "polars.Expr.str.find_many": [[706, null]], "polars.Expr.str.head": [[707, null]], "polars.Expr.str.join": [[708, null]], "polars.Expr.str.json_decode": [[709, null]], "polars.Expr.str.json_path_match": [[710, null]], "polars.Expr.str.len_bytes": [[711, null]], "polars.Expr.str.len_chars": [[712, null]], "polars.Expr.str.normalize": [[713, null]], "polars.Expr.str.pad_end": [[714, null]], "polars.Expr.str.pad_start": [[715, null]], "polars.Expr.str.replace": [[716, null]], "polars.Expr.str.replace_all": [[717, null]], "polars.Expr.str.replace_many": [[718, null]], "polars.Expr.str.reverse": [[719, null]], "polars.Expr.str.slice": [[720, null]], "polars.Expr.str.split": [[721, null]], "polars.Expr.str.split_exact": [[722, null]], "polars.Expr.str.splitn": [[723, null]], "polars.Expr.str.starts_with": [[724, null]], "polars.Expr.str.strip_chars": [[725, null]], "polars.Expr.str.strip_chars_end": [[726, null]], "polars.Expr.str.strip_chars_start": [[727, null]], "polars.Expr.str.strip_prefix": [[728, null]], "polars.Expr.str.strip_suffix": [[729, null]], "polars.Expr.str.strptime": [[730, null]], "polars.Expr.str.tail": [[731, null]], "polars.Expr.str.to_date": [[732, null]], "polars.Expr.str.to_datetime": [[733, null]], "polars.Expr.str.to_decimal": [[734, null]], "polars.Expr.str.to_integer": [[735, null]], "polars.Expr.str.to_lowercase": [[736, null]], "polars.Expr.str.to_time": [[737, null]], "polars.Expr.str.to_titlecase": [[738, null]], "polars.Expr.str.to_uppercase": [[739, null]], "polars.Expr.str.zfill": [[740, null]], "polars.Expr.struct.field": [[741, null]], "polars.Expr.struct.json_encode": [[742, null]], "polars.Expr.struct.rename_fields": [[743, null]], "polars.Expr.struct.unnest": [[744, null]], "polars.Expr.struct.with_fields": [[745, null]], "polars.Expr.sub": [[746, null]], "polars.Expr.sum": [[747, null]], "polars.Expr.tail": [[748, null]], "polars.Expr.tan": [[749, null]], "polars.Expr.tanh": [[750, null]], "polars.Expr.to_physical": [[751, null]], "polars.Expr.top_k": [[752, null]], "polars.Expr.top_k_by": [[753, null]], "polars.Expr.truediv": [[754, null]], "polars.Expr.unique": [[755, null]], "polars.Expr.unique_counts": [[756, null]], "polars.Expr.upper_bound": [[757, null]], "polars.Expr.value_counts": [[758, null]], "polars.Expr.var": [[759, null]], "polars.Expr.where": [[760, null]], "polars.Expr.xor": [[761, null]], "polars.LazyFrame.__getitem__": [[862, null]], "polars.LazyFrame.approx_n_unique": [[863, null]], "polars.LazyFrame.bottom_k": [[864, null]], "polars.LazyFrame.cache": [[865, null]], "polars.LazyFrame.cast": [[866, null]], "polars.LazyFrame.clear": [[867, null]], "polars.LazyFrame.clone": [[868, null]], "polars.LazyFrame.collect": [[869, null]], "polars.LazyFrame.collect_async": [[870, null]], "polars.LazyFrame.collect_schema": [[871, null]], "polars.LazyFrame.columns": [[872, null]], "polars.LazyFrame.count": [[873, null]], "polars.LazyFrame.describe": [[874, null]], "polars.LazyFrame.deserialize": [[875, null]], "polars.LazyFrame.drop": [[876, null]], "polars.LazyFrame.drop_nans": [[877, null]], "polars.LazyFrame.drop_nulls": [[878, null]], "polars.LazyFrame.dtypes": [[879, null]], "polars.LazyFrame.explain": [[880, null]], "polars.LazyFrame.explode": [[881, null]], "polars.LazyFrame.fill_nan": [[882, null]], "polars.LazyFrame.fill_null": [[883, null]], "polars.LazyFrame.filter": [[884, null]], "polars.LazyFrame.first": [[885, null]], "polars.LazyFrame.gather_every": [[886, null]], "polars.LazyFrame.group_by": [[887, null]], "polars.LazyFrame.group_by_dynamic": [[888, null]], "polars.LazyFrame.head": [[889, null]], "polars.LazyFrame.inspect": [[890, null]], "polars.LazyFrame.interpolate": [[891, null]], "polars.LazyFrame.join": [[892, null]], "polars.LazyFrame.join_asof": [[893, null]], "polars.LazyFrame.join_where": [[894, null]], "polars.LazyFrame.last": [[895, null]], "polars.LazyFrame.lazy": [[896, null]], "polars.LazyFrame.limit": [[897, null]], "polars.LazyFrame.map_batches": [[898, null]], "polars.LazyFrame.match_to_schema": [[899, null]], "polars.LazyFrame.max": [[900, null]], "polars.LazyFrame.mean": [[901, null]], "polars.LazyFrame.median": [[902, null]], "polars.LazyFrame.melt": [[903, null]], "polars.LazyFrame.merge_sorted": [[904, null]], "polars.LazyFrame.min": [[905, null]], "polars.LazyFrame.null_count": [[906, null]], "polars.LazyFrame.pipe": [[907, null]], "polars.LazyFrame.profile": [[908, null]], "polars.LazyFrame.quantile": [[909, null]], "polars.LazyFrame.remote": [[910, null]], "polars.LazyFrame.remove": [[911, null]], "polars.LazyFrame.rename": [[912, null]], "polars.LazyFrame.reverse": [[913, null]], "polars.LazyFrame.rolling": [[914, null]], "polars.LazyFrame.schema": [[915, null]], "polars.LazyFrame.select": [[916, null]], "polars.LazyFrame.select_seq": [[917, null]], "polars.LazyFrame.serialize": [[918, null]], "polars.LazyFrame.set_sorted": [[919, null]], "polars.LazyFrame.shift": [[920, null]], "polars.LazyFrame.show_graph": [[921, null]], "polars.LazyFrame.sink_csv": [[48, null]], "polars.LazyFrame.sink_ipc": [[49, null]], "polars.LazyFrame.sink_ndjson": [[50, null]], "polars.LazyFrame.sink_parquet": [[51, null]], "polars.LazyFrame.slice": [[922, null]], "polars.LazyFrame.sort": [[923, null]], "polars.LazyFrame.sql": [[924, null]], "polars.LazyFrame.std": [[925, null]], "polars.LazyFrame.sum": [[926, null]], "polars.LazyFrame.tail": [[927, null]], "polars.LazyFrame.top_k": [[928, null]], "polars.LazyFrame.unique": [[929, null]], "polars.LazyFrame.unnest": [[930, null]], "polars.LazyFrame.unpivot": [[931, null]], "polars.LazyFrame.update": [[932, null]], "polars.LazyFrame.var": [[933, null]], "polars.LazyFrame.width": [[934, null]], "polars.LazyFrame.with_columns": [[935, null]], "polars.LazyFrame.with_columns_seq": [[936, null]], "polars.LazyFrame.with_context": [[937, null]], "polars.LazyFrame.with_row_count": [[938, null]], "polars.LazyFrame.with_row_index": [[939, null]], "polars.PartitionByKey": [[52, null]], "polars.PartitionMaxSize": [[53, null]], "polars.PartitionParted": [[54, null]], "polars.QueryOptFlags": [[940, null]], "polars.SQLContext.execute": [[1377, null]], "polars.SQLContext.execute_global": [[1378, null]], "polars.SQLContext.register": [[1379, null]], "polars.SQLContext.register_globals": [[1380, null]], "polars.SQLContext.register_many": [[1381, null]], "polars.SQLContext.tables": [[1382, null]], "polars.SQLContext.unregister": [[1383, null]], "polars.ScanCastOptions": [[55, null]], "polars.Series.__array__": [[974, null]], "polars.Series.__arrow_c_stream__": [[975, null]], "polars.Series.__getitem__": [[976, null]], "polars.Series.abs": [[977, null]], "polars.Series.alias": [[978, null]], "polars.Series.all": [[979, null]], "polars.Series.any": [[980, null]], "polars.Series.append": [[981, null]], "polars.Series.approx_n_unique": [[982, null]], "polars.Series.arccos": [[983, null]], "polars.Series.arccosh": [[984, null]], "polars.Series.arcsin": [[985, null]], "polars.Series.arcsinh": [[986, null]], "polars.Series.arctan": [[987, null]], "polars.Series.arctanh": [[988, null]], "polars.Series.arg_max": [[989, null]], "polars.Series.arg_min": [[990, null]], "polars.Series.arg_sort": [[991, null]], "polars.Series.arg_true": [[992, null]], "polars.Series.arg_unique": [[993, null]], "polars.Series.arr.all": [[994, null]], "polars.Series.arr.any": [[995, null]], "polars.Series.arr.arg_max": [[996, null]], "polars.Series.arr.arg_min": [[997, null]], "polars.Series.arr.contains": [[998, null]], "polars.Series.arr.count_matches": [[999, null]], "polars.Series.arr.explode": [[1000, null]], "polars.Series.arr.first": [[1001, null]], "polars.Series.arr.get": [[1002, null]], "polars.Series.arr.join": [[1003, null]], "polars.Series.arr.last": [[1004, null]], "polars.Series.arr.max": [[1005, null]], "polars.Series.arr.median": [[1006, null]], "polars.Series.arr.min": [[1007, null]], "polars.Series.arr.n_unique": [[1008, null]], "polars.Series.arr.reverse": [[1009, null]], "polars.Series.arr.shift": [[1010, null]], "polars.Series.arr.sort": [[1011, null]], "polars.Series.arr.std": [[1012, null]], "polars.Series.arr.sum": [[1013, null]], "polars.Series.arr.to_list": [[1014, null]], "polars.Series.arr.to_struct": [[1015, null]], "polars.Series.arr.unique": [[1016, null]], "polars.Series.arr.var": [[1017, null]], "polars.Series.backward_fill": [[1018, null]], "polars.Series.bin.contains": [[1019, null]], "polars.Series.bin.decode": [[1020, null]], "polars.Series.bin.encode": [[1021, null]], "polars.Series.bin.ends_with": [[1022, null]], "polars.Series.bin.reinterpret": [[1023, null]], "polars.Series.bin.size": [[1024, null]], "polars.Series.bin.starts_with": [[1025, null]], "polars.Series.bitwise_and": [[1026, null]], "polars.Series.bitwise_count_ones": [[1027, null]], "polars.Series.bitwise_count_zeros": [[1028, null]], "polars.Series.bitwise_leading_ones": [[1029, null]], "polars.Series.bitwise_leading_zeros": [[1030, null]], "polars.Series.bitwise_or": [[1031, null]], "polars.Series.bitwise_trailing_ones": [[1032, null]], "polars.Series.bitwise_trailing_zeros": [[1033, null]], "polars.Series.bitwise_xor": [[1034, null]], "polars.Series.bottom_k": [[1035, null]], "polars.Series.bottom_k_by": [[1036, null]], "polars.Series.cast": [[1037, null]], "polars.Series.cat.ends_with": [[1038, null]], "polars.Series.cat.get_categories": [[1039, null]], "polars.Series.cat.is_local": [[1040, null]], "polars.Series.cat.len_bytes": [[1041, null]], "polars.Series.cat.len_chars": [[1042, null]], "polars.Series.cat.starts_with": [[1043, null]], "polars.Series.cat.to_local": [[1044, null]], "polars.Series.cat.uses_lexical_ordering": [[1045, null]], "polars.Series.cbrt": [[1046, null]], "polars.Series.ceil": [[1047, null]], "polars.Series.chunk_lengths": [[1048, null]], "polars.Series.clear": [[1049, null]], "polars.Series.clip": [[1050, null]], "polars.Series.clone": [[1051, null]], "polars.Series.cos": [[1052, null]], "polars.Series.cosh": [[1053, null]], "polars.Series.cot": [[1054, null]], "polars.Series.count": [[1055, null]], "polars.Series.cum_count": [[1056, null]], "polars.Series.cum_max": [[1057, null]], "polars.Series.cum_min": [[1058, null]], "polars.Series.cum_prod": [[1059, null]], "polars.Series.cum_sum": [[1060, null]], "polars.Series.cumulative_eval": [[1061, null]], "polars.Series.cut": [[1062, null]], "polars.Series.describe": [[1063, null]], "polars.Series.diff": [[1064, null]], "polars.Series.dot": [[1065, null]], "polars.Series.drop_nans": [[1066, null]], "polars.Series.drop_nulls": [[1067, null]], "polars.Series.dt.add_business_days": [[1068, null]], "polars.Series.dt.base_utc_offset": [[1069, null]], "polars.Series.dt.cast_time_unit": [[1070, null]], "polars.Series.dt.century": [[1071, null]], "polars.Series.dt.combine": [[1072, null]], "polars.Series.dt.convert_time_zone": [[1073, null]], "polars.Series.dt.date": [[1074, null]], "polars.Series.dt.datetime": [[1075, null]], "polars.Series.dt.day": [[1076, null]], "polars.Series.dt.dst_offset": [[1077, null]], "polars.Series.dt.epoch": [[1078, null]], "polars.Series.dt.hour": [[1079, null]], "polars.Series.dt.is_business_day": [[1080, null]], "polars.Series.dt.is_leap_year": [[1081, null]], "polars.Series.dt.iso_year": [[1082, null]], "polars.Series.dt.max": [[1083, null]], "polars.Series.dt.mean": [[1084, null]], "polars.Series.dt.median": [[1085, null]], "polars.Series.dt.microsecond": [[1086, null]], "polars.Series.dt.millennium": [[1087, null]], "polars.Series.dt.millisecond": [[1088, null]], "polars.Series.dt.min": [[1089, null]], "polars.Series.dt.minute": [[1090, null]], "polars.Series.dt.month": [[1091, null]], "polars.Series.dt.month_end": [[1092, null]], "polars.Series.dt.month_start": [[1093, null]], "polars.Series.dt.nanosecond": [[1094, null]], "polars.Series.dt.offset_by": [[1095, null]], "polars.Series.dt.ordinal_day": [[1096, null]], "polars.Series.dt.quarter": [[1097, null]], "polars.Series.dt.replace": [[1098, null]], "polars.Series.dt.replace_time_zone": [[1099, null]], "polars.Series.dt.round": [[1100, null]], "polars.Series.dt.second": [[1101, null]], "polars.Series.dt.strftime": [[1102, null]], "polars.Series.dt.time": [[1103, null]], "polars.Series.dt.timestamp": [[1104, null]], "polars.Series.dt.to_string": [[1105, null]], "polars.Series.dt.total_days": [[1106, null]], "polars.Series.dt.total_hours": [[1107, null]], "polars.Series.dt.total_microseconds": [[1108, null]], "polars.Series.dt.total_milliseconds": [[1109, null]], "polars.Series.dt.total_minutes": [[1110, null]], "polars.Series.dt.total_nanoseconds": [[1111, null]], "polars.Series.dt.total_seconds": [[1112, null]], "polars.Series.dt.truncate": [[1113, null]], "polars.Series.dt.week": [[1114, null]], "polars.Series.dt.weekday": [[1115, null]], "polars.Series.dt.with_time_unit": [[1116, null]], "polars.Series.dt.year": [[1117, null]], "polars.Series.dtype": [[1118, null]], "polars.Series.entropy": [[1119, null]], "polars.Series.eq": [[1120, null]], "polars.Series.eq_missing": [[1121, null]], "polars.Series.equals": [[1122, null]], "polars.Series.estimated_size": [[1123, null]], "polars.Series.ewm_mean": [[1124, null]], "polars.Series.ewm_mean_by": [[1125, null]], "polars.Series.ewm_std": [[1126, null]], "polars.Series.ewm_var": [[1127, null]], "polars.Series.exp": [[1128, null]], "polars.Series.explode": [[1129, null]], "polars.Series.extend": [[1130, null]], "polars.Series.extend_constant": [[1131, null]], "polars.Series.fill_nan": [[1132, null]], "polars.Series.fill_null": [[1133, null]], "polars.Series.filter": [[1134, null]], "polars.Series.first": [[1135, null]], "polars.Series.flags": [[1136, null]], "polars.Series.floor": [[1137, null]], "polars.Series.forward_fill": [[1138, null]], "polars.Series.gather": [[1139, null]], "polars.Series.gather_every": [[1140, null]], "polars.Series.ge": [[1141, null]], "polars.Series.get_chunks": [[1142, null]], "polars.Series.gt": [[1143, null]], "polars.Series.has_nulls": [[1144, null]], "polars.Series.has_validity": [[1145, null]], "polars.Series.hash": [[1146, null]], "polars.Series.head": [[1147, null]], "polars.Series.hist": [[1148, null]], "polars.Series.implode": [[1149, null]], "polars.Series.index_of": [[1150, null]], "polars.Series.interpolate": [[1151, null]], "polars.Series.interpolate_by": [[1152, null]], "polars.Series.is_between": [[1153, null]], "polars.Series.is_duplicated": [[1154, null]], "polars.Series.is_empty": [[1155, null]], "polars.Series.is_finite": [[1156, null]], "polars.Series.is_first_distinct": [[1157, null]], "polars.Series.is_in": [[1158, null]], "polars.Series.is_infinite": [[1159, null]], "polars.Series.is_last_distinct": [[1160, null]], "polars.Series.is_nan": [[1161, null]], "polars.Series.is_not_nan": [[1162, null]], "polars.Series.is_not_null": [[1163, null]], "polars.Series.is_null": [[1164, null]], "polars.Series.is_sorted": [[1165, null]], "polars.Series.is_unique": [[1166, null]], "polars.Series.item": [[1167, null]], "polars.Series.kurtosis": [[1168, null]], "polars.Series.last": [[1169, null]], "polars.Series.le": [[1170, null]], "polars.Series.len": [[1171, null]], "polars.Series.limit": [[1172, null]], "polars.Series.list.all": [[1173, null]], "polars.Series.list.any": [[1174, null]], "polars.Series.list.arg_max": [[1175, null]], "polars.Series.list.arg_min": [[1176, null]], "polars.Series.list.concat": [[1177, null]], "polars.Series.list.contains": [[1178, null]], "polars.Series.list.count_matches": [[1179, null]], "polars.Series.list.diff": [[1180, null]], "polars.Series.list.drop_nulls": [[1181, null]], "polars.Series.list.eval": [[1182, null]], "polars.Series.list.explode": [[1183, null]], "polars.Series.list.first": [[1184, null]], "polars.Series.list.gather": [[1185, null]], "polars.Series.list.gather_every": [[1186, null]], "polars.Series.list.get": [[1187, null]], "polars.Series.list.head": [[1188, null]], "polars.Series.list.join": [[1189, null]], "polars.Series.list.last": [[1190, null]], "polars.Series.list.len": [[1191, null]], "polars.Series.list.max": [[1192, null]], "polars.Series.list.mean": [[1193, null]], "polars.Series.list.median": [[1194, null]], "polars.Series.list.min": [[1195, null]], "polars.Series.list.n_unique": [[1196, null]], "polars.Series.list.reverse": [[1197, null]], "polars.Series.list.sample": [[1198, null]], "polars.Series.list.set_difference": [[1199, null]], "polars.Series.list.set_intersection": [[1200, null]], "polars.Series.list.set_symmetric_difference": [[1201, null]], "polars.Series.list.set_union": [[1202, null]], "polars.Series.list.shift": [[1203, null]], "polars.Series.list.slice": [[1204, null]], "polars.Series.list.sort": [[1205, null]], "polars.Series.list.std": [[1206, null]], "polars.Series.list.sum": [[1207, null]], "polars.Series.list.tail": [[1208, null]], "polars.Series.list.to_array": [[1209, null]], "polars.Series.list.to_struct": [[1210, null]], "polars.Series.list.unique": [[1211, null]], "polars.Series.list.var": [[1212, null]], "polars.Series.log": [[1213, null]], "polars.Series.log10": [[1214, null]], "polars.Series.log1p": [[1215, null]], "polars.Series.lower_bound": [[1216, null]], "polars.Series.lt": [[1217, null]], "polars.Series.map_elements": [[1218, null]], "polars.Series.max": [[1219, null]], "polars.Series.mean": [[1220, null]], "polars.Series.median": [[1221, null]], "polars.Series.min": [[1222, null]], "polars.Series.mode": [[1223, null]], "polars.Series.n_chunks": [[1224, null]], "polars.Series.n_unique": [[1225, null]], "polars.Series.name": [[1226, null]], "polars.Series.nan_max": [[1227, null]], "polars.Series.nan_min": [[1228, null]], "polars.Series.ne": [[1229, null]], "polars.Series.ne_missing": [[1230, null]], "polars.Series.new_from_index": [[1231, null]], "polars.Series.not_": [[1232, null]], "polars.Series.null_count": [[1233, null]], "polars.Series.pct_change": [[1234, null]], "polars.Series.peak_max": [[1235, null]], "polars.Series.peak_min": [[1236, null]], "polars.Series.pow": [[1237, null]], "polars.Series.product": [[1238, null]], "polars.Series.qcut": [[1239, null]], "polars.Series.quantile": [[1240, null]], "polars.Series.rank": [[1241, null]], "polars.Series.rechunk": [[1242, null]], "polars.Series.reinterpret": [[1243, null]], "polars.Series.rename": [[1244, null]], "polars.Series.repeat_by": [[1245, null]], "polars.Series.replace": [[1246, null]], "polars.Series.replace_strict": [[1247, null]], "polars.Series.reshape": [[1248, null]], "polars.Series.reverse": [[1249, null]], "polars.Series.rle": [[1250, null]], "polars.Series.rle_id": [[1251, null]], "polars.Series.rolling_kurtosis": [[1252, null]], "polars.Series.rolling_map": [[1253, null]], "polars.Series.rolling_max": [[1254, null]], "polars.Series.rolling_mean": [[1255, null]], "polars.Series.rolling_median": [[1256, null]], "polars.Series.rolling_min": [[1257, null]], "polars.Series.rolling_quantile": [[1258, null]], "polars.Series.rolling_skew": [[1259, null]], "polars.Series.rolling_std": [[1260, null]], "polars.Series.rolling_sum": [[1261, null]], "polars.Series.rolling_var": [[1262, null]], "polars.Series.round": [[1263, null]], "polars.Series.round_sig_figs": [[1264, null]], "polars.Series.sample": [[1265, null]], "polars.Series.scatter": [[1266, null]], "polars.Series.search_sorted": [[1267, null]], "polars.Series.set": [[1268, null]], "polars.Series.set_sorted": [[1269, null]], "polars.Series.shape": [[1270, null]], "polars.Series.shift": [[1271, null]], "polars.Series.shrink_dtype": [[1272, null]], "polars.Series.shrink_to_fit": [[1273, null]], "polars.Series.shuffle": [[1274, null]], "polars.Series.sign": [[1275, null]], "polars.Series.sin": [[1276, null]], "polars.Series.sinh": [[1277, null]], "polars.Series.skew": [[1278, null]], "polars.Series.slice": [[1279, null]], "polars.Series.sort": [[1280, null]], "polars.Series.sqrt": [[1281, null]], "polars.Series.std": [[1282, null]], "polars.Series.str.concat": [[1283, null]], "polars.Series.str.contains": [[1284, null]], "polars.Series.str.contains_any": [[1285, null]], "polars.Series.str.count_matches": [[1286, null]], "polars.Series.str.decode": [[1287, null]], "polars.Series.str.encode": [[1288, null]], "polars.Series.str.ends_with": [[1289, null]], "polars.Series.str.escape_regex": [[1290, null]], "polars.Series.str.explode": [[1291, null]], "polars.Series.str.extract": [[1292, null]], "polars.Series.str.extract_all": [[1293, null]], "polars.Series.str.extract_groups": [[1294, null]], "polars.Series.str.extract_many": [[1295, null]], "polars.Series.str.find": [[1296, null]], "polars.Series.str.find_many": [[1297, null]], "polars.Series.str.head": [[1298, null]], "polars.Series.str.join": [[1299, null]], "polars.Series.str.json_decode": [[1300, null]], "polars.Series.str.json_path_match": [[1301, null]], "polars.Series.str.len_bytes": [[1302, null]], "polars.Series.str.len_chars": [[1303, null]], "polars.Series.str.normalize": [[1304, null]], "polars.Series.str.pad_end": [[1305, null]], "polars.Series.str.pad_start": [[1306, null]], "polars.Series.str.replace": [[1307, null]], "polars.Series.str.replace_all": [[1308, null]], "polars.Series.str.replace_many": [[1309, null]], "polars.Series.str.reverse": [[1310, null]], "polars.Series.str.slice": [[1311, null]], "polars.Series.str.split": [[1312, null]], "polars.Series.str.split_exact": [[1313, null]], "polars.Series.str.splitn": [[1314, null]], "polars.Series.str.starts_with": [[1315, null]], "polars.Series.str.strip_chars": [[1316, null]], "polars.Series.str.strip_chars_end": [[1317, null]], "polars.Series.str.strip_chars_start": [[1318, null]], "polars.Series.str.strip_prefix": [[1319, null]], "polars.Series.str.strip_suffix": [[1320, null]], "polars.Series.str.strptime": [[1321, null]], "polars.Series.str.tail": [[1322, null]], "polars.Series.str.to_date": [[1323, null]], "polars.Series.str.to_datetime": [[1324, null]], "polars.Series.str.to_decimal": [[1325, null]], "polars.Series.str.to_integer": [[1326, null]], "polars.Series.str.to_lowercase": [[1327, null]], "polars.Series.str.to_time": [[1328, null]], "polars.Series.str.to_titlecase": [[1329, null]], "polars.Series.str.to_uppercase": [[1330, null]], "polars.Series.str.zfill": [[1331, null]], "polars.Series.struct.field": [[1332, null]], "polars.Series.struct.fields": [[1333, null]], "polars.Series.struct.json_encode": [[1334, null]], "polars.Series.struct.rename_fields": [[1335, null]], "polars.Series.struct.schema": [[1336, null]], "polars.Series.struct.unnest": [[1337, null]], "polars.Series.sum": [[1338, null]], "polars.Series.tail": [[1339, null]], "polars.Series.tan": [[1340, null]], "polars.Series.tanh": [[1341, null]], "polars.Series.to_arrow": [[1342, null]], "polars.Series.to_dummies": [[1343, null]], "polars.Series.to_frame": [[1344, null]], "polars.Series.to_init_repr": [[1345, null]], "polars.Series.to_jax": [[1346, null]], "polars.Series.to_list": [[1347, null]], "polars.Series.to_numpy": [[1348, null]], "polars.Series.to_pandas": [[1349, null]], "polars.Series.to_physical": [[1350, null]], "polars.Series.to_torch": [[1351, null]], "polars.Series.top_k": [[1352, null]], "polars.Series.top_k_by": [[1353, null]], "polars.Series.unique": [[1354, null]], "polars.Series.unique_counts": [[1355, null]], "polars.Series.upper_bound": [[1356, null]], "polars.Series.value_counts": [[1357, null]], "polars.Series.var": [[1358, null]], "polars.Series.zip_with": [[1359, null]], "polars.StringCache": [[56, null]], "polars.align_frames": [[57, null]], "polars.all": [[762, null]], "polars.all_horizontal": [[763, null]], "polars.any": [[764, null]], "polars.any_horizontal": [[765, null]], "polars.api.register_dataframe_namespace": [[58, null]], "polars.api.register_expr_namespace": [[59, null]], "polars.api.register_lazyframe_namespace": [[60, null]], "polars.api.register_series_namespace": [[61, null]], "polars.approx_n_unique": [[766, null]], "polars.arange": [[767, null]], "polars.arctan2": [[768, null]], "polars.arctan2d": [[769, null]], "polars.arg_sort_by": [[770, null]], "polars.arg_where": [[771, null]], "polars.build_info": [[62, null]], "polars.business_day_count": [[772, null]], "polars.catalog.unity.CatalogInfo": [[196, null]], "polars.catalog.unity.ColumnInfo": [[197, null]], "polars.catalog.unity.DataSourceFormat": [[198, null]], "polars.catalog.unity.NamespaceInfo": [[199, null]], "polars.catalog.unity.TableInfo": [[200, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[201, null]], "polars.catalog.unity.TableType": [[202, null]], "polars.coalesce": [[773, null]], "polars.col": [[843, null]], "polars.collect_all": [[63, null]], "polars.collect_all_async": [[64, null]], "polars.concat": [[65, null]], "polars.concat_arr": [[774, null]], "polars.concat_list": [[775, null]], "polars.concat_str": [[776, null]], "polars.corr": [[777, null]], "polars.count": [[778, null]], "polars.cov": [[779, null]], "polars.cum_count": [[780, null]], "polars.cum_fold": [[781, null]], "polars.cum_reduce": [[782, null]], "polars.cum_sum": [[783, null]], "polars.cum_sum_horizontal": [[784, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[332, null]], "polars.dataframe.group_by.GroupBy.agg": [[333, null]], "polars.dataframe.group_by.GroupBy.all": [[334, null]], "polars.dataframe.group_by.GroupBy.count": [[335, null]], "polars.dataframe.group_by.GroupBy.first": [[336, null]], "polars.dataframe.group_by.GroupBy.head": [[337, null]], "polars.dataframe.group_by.GroupBy.last": [[338, null]], "polars.dataframe.group_by.GroupBy.len": [[339, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[340, null]], "polars.dataframe.group_by.GroupBy.max": [[341, null]], "polars.dataframe.group_by.GroupBy.mean": [[342, null]], "polars.dataframe.group_by.GroupBy.median": [[343, null]], "polars.dataframe.group_by.GroupBy.min": [[344, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[345, null]], "polars.dataframe.group_by.GroupBy.quantile": [[346, null]], "polars.dataframe.group_by.GroupBy.sum": [[347, null]], "polars.dataframe.group_by.GroupBy.tail": [[348, null]], "polars.datatypes.Array": [[66, null]], "polars.datatypes.Binary": [[67, null]], "polars.datatypes.Boolean": [[68, null]], "polars.datatypes.Categorical": [[69, null]], "polars.datatypes.DataType": [[70, null]], "polars.datatypes.Date": [[71, null]], "polars.datatypes.Datetime": [[72, null]], "polars.datatypes.Decimal": [[73, null]], "polars.datatypes.Duration": [[74, null]], "polars.datatypes.Enum": [[75, null]], "polars.datatypes.Field": [[76, null]], "polars.datatypes.Float32": [[77, null]], "polars.datatypes.Float64": [[78, null]], "polars.datatypes.Int128": [[79, null]], "polars.datatypes.Int16": [[80, null]], "polars.datatypes.Int32": [[81, null]], "polars.datatypes.Int64": [[82, null]], "polars.datatypes.Int8": [[83, null]], "polars.datatypes.List": [[84, null]], "polars.datatypes.Null": [[85, null]], "polars.datatypes.Object": [[86, null]], "polars.datatypes.String": [[87, null]], "polars.datatypes.Struct": [[88, null]], "polars.datatypes.Time": [[89, null]], "polars.datatypes.UInt16": [[90, null]], "polars.datatypes.UInt32": [[91, null]], "polars.datatypes.UInt64": [[92, null]], "polars.datatypes.UInt8": [[93, null]], "polars.datatypes.Unknown": [[94, null]], "polars.datatypes.Utf8": [[95, null]], "polars.date": [[785, null]], "polars.date_range": [[786, null]], "polars.date_ranges": [[787, null]], "polars.datetime": [[788, null]], "polars.datetime_range": [[789, null]], "polars.datetime_ranges": [[790, null]], "polars.defer": [[96, null]], "polars.disable_string_cache": [[97, null]], "polars.duration": [[791, null]], "polars.element": [[792, null]], "polars.enable_string_cache": [[98, null]], "polars.escape_regex": [[99, null]], "polars.exceptions.CategoricalRemappingWarning": [[100, null]], "polars.exceptions.ChronoFormatWarning": [[101, null]], "polars.exceptions.ColumnNotFoundError": [[102, null]], "polars.exceptions.ComputeError": [[103, null]], "polars.exceptions.CustomUFuncWarning": [[104, null]], "polars.exceptions.DataOrientationWarning": [[105, null]], "polars.exceptions.DuplicateError": [[106, null]], "polars.exceptions.InvalidOperationError": [[107, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[108, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[109, null]], "polars.exceptions.NoDataError": [[110, null]], "polars.exceptions.NoRowsReturnedError": [[111, null]], "polars.exceptions.OutOfBoundsError": [[112, null]], "polars.exceptions.PanicException": [[113, null]], "polars.exceptions.ParameterCollisionError": [[114, null]], "polars.exceptions.PerformanceWarning": [[115, null]], "polars.exceptions.PolarsError": [[116, null]], "polars.exceptions.PolarsInefficientMapWarning": [[117, null]], "polars.exceptions.PolarsWarning": [[118, null]], "polars.exceptions.RowsError": [[119, null]], "polars.exceptions.SQLInterfaceError": [[120, null]], "polars.exceptions.SQLSyntaxError": [[121, null]], "polars.exceptions.SchemaError": [[122, null]], "polars.exceptions.SchemaFieldNotFoundError": [[123, null]], "polars.exceptions.ShapeError": [[124, null]], "polars.exceptions.StringCacheMismatchError": [[125, null]], "polars.exceptions.StructFieldNotFoundError": [[126, null]], "polars.exceptions.TooManyRowsReturnedError": [[127, null]], "polars.exceptions.UnstableWarning": [[128, null]], "polars.exceptions.UnsuitableSQLError": [[129, null]], "polars.exclude": [[793, null]], "polars.explain_all": [[130, null]], "polars.first": [[794, null]], "polars.fold": [[795, null]], "polars.format": [[796, null]], "polars.from_arrow": [[131, null]], "polars.from_dataframe": [[132, null]], "polars.from_dict": [[133, null]], "polars.from_dicts": [[134, null]], "polars.from_epoch": [[797, null]], "polars.from_numpy": [[135, null]], "polars.from_pandas": [[136, null]], "polars.from_records": [[137, null]], "polars.from_repr": [[138, null]], "polars.get_index_type": [[139, null]], "polars.groups": [[798, null]], "polars.head": [[799, null]], "polars.implode": [[800, null]], "polars.int_range": [[801, null]], "polars.int_ranges": [[802, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[140, null]], "polars.io.parquet.ParquetFieldOverwrites": [[141, null]], "polars.io.partition.BasePartitionContext": [[142, null]], "polars.io.partition.KeyedPartition": [[143, null]], "polars.io.partition.KeyedPartitionContext": [[144, null]], "polars.io.plugins.register_io_source": [[145, null]], "polars.json_normalize": [[146, null]], "polars.last": [[803, null]], "polars.lazyframe.engine_config.GPUEngine": [[941, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[942, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[943, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[944, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[945, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[946, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[947, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[948, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[949, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[950, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[951, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[952, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[953, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[954, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[955, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[956, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[957, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[958, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[959, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[960, null]], "polars.len": [[804, null]], "polars.linear_space": [[805, null]], "polars.linear_spaces": [[806, null]], "polars.lit": [[807, null]], "polars.map_batches": [[808, null]], "polars.map_groups": [[809, null]], "polars.max": [[810, null]], "polars.max_horizontal": [[811, null]], "polars.mean": [[812, null]], "polars.mean_horizontal": [[813, null]], "polars.median": [[814, null]], "polars.min": [[815, null]], "polars.min_horizontal": [[816, null]], "polars.n_unique": [[817, null]], "polars.nth": [[818, null]], "polars.ones": [[819, null]], "polars.plugins.register_plugin_function": [[147, null]], "polars.quantile": [[820, null]], "polars.read_avro": [[148, null]], "polars.read_clipboard": [[149, null]], "polars.read_csv": [[150, null]], "polars.read_csv_batched": [[151, null]], "polars.read_database": [[152, null]], "polars.read_database_uri": [[153, null]], "polars.read_delta": [[154, null]], "polars.read_excel": [[155, null]], "polars.read_ipc": [[156, null]], "polars.read_ipc_schema": [[157, null]], "polars.read_ipc_stream": [[158, null]], "polars.read_json": [[159, null]], "polars.read_ndjson": [[160, null]], "polars.read_ods": [[161, null]], "polars.read_parquet": [[162, null]], "polars.read_parquet_metadata": [[163, null]], "polars.read_parquet_schema": [[164, null]], "polars.reduce": [[821, null]], "polars.repeat": [[822, null]], "polars.rolling_corr": [[823, null]], "polars.rolling_cov": [[824, null]], "polars.scan_csv": [[165, null]], "polars.scan_delta": [[166, null]], "polars.scan_iceberg": [[167, null]], "polars.scan_ipc": [[168, null]], "polars.scan_ndjson": [[169, null]], "polars.scan_parquet": [[170, null]], "polars.scan_pyarrow_dataset": [[171, null]], "polars.select": [[825, null]], "polars.set_random_seed": [[172, null]], "polars.show_versions": [[173, null]], "polars.sql": [[826, null]], "polars.sql_expr": [[827, null]], "polars.std": [[828, null]], "polars.struct": [[829, null]], "polars.sum": [[830, null]], "polars.sum_horizontal": [[831, null]], "polars.tail": [[832, null]], "polars.testing.assert_frame_equal": [[174, null]], "polars.testing.assert_frame_not_equal": [[175, null]], "polars.testing.assert_series_equal": [[176, null]], "polars.testing.assert_series_not_equal": [[177, null]], "polars.testing.parametric.column": [[178, null]], "polars.testing.parametric.columns": [[179, null]], "polars.testing.parametric.create_list_strategy": [[180, null]], "polars.testing.parametric.dataframes": [[181, null]], "polars.testing.parametric.dtypes": [[182, null]], "polars.testing.parametric.lists": [[183, null]], "polars.testing.parametric.load_profile": [[184, null]], "polars.testing.parametric.series": [[185, null]], "polars.testing.parametric.set_profile": [[186, null]], "polars.thread_pool_size": [[187, null]], "polars.threadpool_size": [[188, null]], "polars.time": [[833, null]], "polars.time_range": [[834, null]], "polars.time_ranges": [[835, null]], "polars.using_string_cache": [[189, null]], "polars.var": [[836, null]], "polars.when": [[837, null]], "polars.zeros": [[838, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.ScanCastOptions", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.parquet.ParquetFieldOverwrites", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_metadata", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.__setitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.match_to_schema", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.__getitem__", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.match_to_schema", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.QueryOptFlags", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.bottom_k_by", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.repeat_by", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.top_k_by", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.ScanCastOptions.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.parquet.ParquetFieldOverwrites.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_metadata.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.__setitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.match_to_schema.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.__getitem__.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.match_to_schema.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.QueryOptFlags.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.bottom_k_by.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.repeat_by.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.top_k_by.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[207, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[974, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[208, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[975, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[209, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1396, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1396, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[210, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.lazyframe method)": [[862, "polars.LazyFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[976, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[190, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[196, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[197, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[199, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[200, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[66, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[67, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[68, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[69, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[70, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[71, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[72, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[73, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[74, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[75, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[76, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[77, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[78, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[79, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[80, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[81, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[82, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[83, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[84, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[85, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[86, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[87, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[88, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[89, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[90, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[91, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[92, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[93, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[94, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.parquet.parquetfieldoverwrites method)": [[141, "polars.io.parquet.ParquetFieldOverwrites.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[142, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[143, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[144, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[941, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[52, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[53, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[54, "polars.PartitionParted.__init__", false]], "__init__() (polars.queryoptflags method)": [[940, "polars.QueryOptFlags.__init__", false]], "__init__() (polars.scancastoptions method)": [[55, "polars.ScanCastOptions.__init__", false]], "__init__() (polars.sqlcontext method)": [[1396, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[178, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[332, "polars.dataframe.group_by.GroupBy.__iter__", false]], "__setitem__() (polars.dataframe method)": [[211, "polars.DataFrame.__setitem__", false]], "abs() (polars.expr method)": [[362, "polars.Expr.abs", false]], "abs() (polars.series method)": [[977, "polars.Series.abs", false]], "add() (polars.expr method)": [[363, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[451, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1068, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[333, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[942, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[364, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[365, "polars.Expr.alias", false]], "alias() (polars.series method)": [[978, "polars.Series.alias", false]], "align_frames() (in module polars)": [[57, "polars.align_frames", false]], "all() (in module polars)": [[762, "polars.all", false]], "all() (in module polars.selectors)": [[972, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[366, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[382, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[548, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[943, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[979, "polars.Series.all", false]], "all() (polars.series.arr method)": [[994, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1173, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[763, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[972, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[972, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[367, "polars.Expr.and_", false]], "any() (in module polars)": [[764, "polars.any", false]], "any() (polars.expr method)": [[368, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[383, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[549, "polars.Expr.list.any", false]], "any() (polars.series method)": [[980, "polars.Series.any", false]], "any() (polars.series.arr method)": [[995, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1174, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[765, "polars.any_horizontal", false]], "append() (polars.expr method)": [[369, "polars.Expr.append", false]], "append() (polars.series method)": [[981, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[766, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[212, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[370, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[863, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[982, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[767, "polars.arange", false]], "arccos() (polars.expr method)": [[371, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[983, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[372, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[984, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[373, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[985, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[374, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[986, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[375, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[987, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[768, "polars.arctan2", false]], "arctan2d() (in module polars)": [[769, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[376, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[988, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[377, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[384, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[550, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[989, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[996, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1175, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[378, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[385, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[551, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[990, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[997, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1176, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[379, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[991, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[770, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[380, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[992, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[381, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[993, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[771, "polars.arg_where", false]], "array (class in polars.datatypes)": [[66, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[174, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[175, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[176, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[177, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[406, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1018, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[452, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1069, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[142, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[67, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[972, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[414, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1026, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[415, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1027, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[416, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1028, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[417, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1029, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[418, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1030, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[419, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1031, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[420, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1032, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[421, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1033, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[422, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1034, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[68, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[972, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[213, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[423, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[864, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1035, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[424, "polars.Expr.bottom_k_by", false]], "bottom_k_by() (polars.series method)": [[1036, "polars.Series.bottom_k_by", false]], "build_info() (in module polars)": [[62, "polars.build_info", false]], "business_day_count() (in module polars)": [[772, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[972, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[972, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[972, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[865, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[958, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[214, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[425, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[866, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1037, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[453, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1070, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[190, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[196, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[69, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[972, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[100, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[431, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1046, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[432, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1047, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[454, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1071, "polars.Series.dt.century", false]], "chronoformatwarning": [[101, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1048, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[215, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[867, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1049, "polars.Series.clear", false]], "clip() (polars.expr method)": [[433, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1050, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[216, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[868, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1051, "polars.Series.clone", false]], "coalesce() (in module polars)": [[773, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[869, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[63, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[64, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[870, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[217, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[871, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[178, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[197, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[102, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[218, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[872, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[179, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[455, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1072, "polars.Series.dt.combine", false]], "computeerror": [[103, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[65, "polars.concat", false]], "concat() (polars.expr.list method)": [[552, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[692, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1177, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1283, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[774, "polars.concat_arr", false]], "concat_list() (in module polars)": [[775, "polars.concat_list", false]], "concat_str() (in module polars)": [[776, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[972, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[386, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[407, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[553, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[693, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[998, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1019, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1178, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1284, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[694, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1285, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[456, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1073, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[777, "polars.corr", false]], "corr() (polars.dataframe method)": [[219, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[434, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1052, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[435, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1053, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[436, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1054, "polars.Series.cot", false]], "count() (in module polars)": [[778, "polars.count", false]], "count() (polars.dataframe method)": [[220, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[437, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[873, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[944, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1055, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[387, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[554, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[695, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[999, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1179, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1286, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[779, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[180, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[780, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[438, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1056, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[781, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[439, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1057, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[440, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1058, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[441, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1059, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[782, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[783, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[442, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1060, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[784, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[443, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1061, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[104, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[444, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1062, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[105, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[198, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[70, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[71, "polars.datatypes.Date", false]], "date() (in module polars)": [[785, "polars.date", false]], "date() (in module polars.selectors)": [[972, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[457, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1074, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[786, "polars.date_range", false]], "date_ranges() (in module polars)": [[787, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[72, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[788, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[972, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[458, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1075, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[789, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[790, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[459, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1076, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[73, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[972, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[408, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[696, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1020, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1287, "polars.Series.str.decode", false]], "defer() (in module polars)": [[96, "polars.defer", false]], "degrees() (polars.expr method)": [[445, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[221, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[874, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1063, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[222, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[446, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[875, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[447, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[555, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1064, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1180, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[972, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[97, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[448, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1065, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[223, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[876, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[224, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[225, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[449, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[877, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1066, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[226, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[450, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[556, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[878, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1067, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1181, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[460, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1077, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1118, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[227, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[879, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[106, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[74, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[791, "polars.duration", false]], "duration() (in module polars.selectors)": [[972, "polars.selectors.duration", false]], "element() (in module polars)": [[792, "polars.element", false]], "enable_string_cache() (in module polars)": [[98, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[409, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[697, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1021, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1288, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[972, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[410, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[426, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[698, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1022, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1038, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1289, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[497, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1119, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[75, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[461, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1078, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[498, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[598, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1120, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[499, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1121, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[228, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1122, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[99, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[699, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1290, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[229, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1123, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[557, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1182, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[500, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1124, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[501, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1125, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[502, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1126, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[503, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1127, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[793, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[972, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[504, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1377, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1378, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[505, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1128, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[972, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[880, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[130, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[230, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[506, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[388, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[558, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[700, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[881, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1129, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[1000, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1183, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1291, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[231, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1130, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[507, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1131, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[701, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1292, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[702, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1293, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[703, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1294, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[704, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1295, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[959, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[960, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[76, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[741, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1332, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1333, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[232, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[508, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[882, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1132, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[233, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[509, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[883, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1133, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[234, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[510, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[884, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1134, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[705, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1296, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[706, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1297, "polars.Series.str.find_many", false]], "first() (in module polars)": [[794, "polars.first", false]], "first() (in module polars.selectors)": [[972, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[511, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[389, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[559, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[885, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[945, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1135, "polars.Series.first", false]], "first() (polars.series.arr method)": [[1001, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1184, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[235, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1136, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[512, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[972, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[77, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[78, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[513, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1137, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[514, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[795, "polars.fold", false]], "fold() (polars.dataframe method)": [[236, "polars.DataFrame.fold", false]], "format() (in module polars)": [[796, "polars.format", false]], "forward_fill() (polars.expr method)": [[515, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1138, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[131, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[132, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[133, "polars.from_dict", false]], "from_dicts() (in module polars)": [[134, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[797, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[516, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[135, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[136, "polars.from_pandas", false]], "from_records() (in module polars)": [[137, "polars.from_records", false]], "from_repr() (in module polars)": [[138, "polars.from_repr", false]], "gather() (polars.expr method)": [[517, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[560, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1139, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1185, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[237, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[518, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[561, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[886, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1140, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1186, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[519, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1141, "polars.Series.ge", false]], "get() (polars.expr method)": [[520, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[390, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[562, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[1002, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1187, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[427, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1039, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1142, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[238, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[239, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[240, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[139, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[201, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[191, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[241, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[941, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[242, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[887, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[243, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[888, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[798, "polars.groups", false]], "gt() (polars.expr method)": [[521, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1143, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[599, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[522, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1144, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1145, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[523, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1146, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[244, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[799, "polars.head", false]], "head() (polars.dataframe method)": [[245, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[524, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[563, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[707, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[889, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[946, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1147, "polars.Series.head", false]], "head() (polars.series.list method)": [[1188, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1298, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[246, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[525, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1148, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[462, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1079, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[247, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[800, "polars.implode", false]], "implode() (polars.expr method)": [[526, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1149, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[527, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1150, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[248, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[528, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[890, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[79, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[80, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[81, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[82, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[83, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[801, "polars.int_range", false]], "int_ranges() (in module polars)": [[802, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[972, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[249, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[529, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[891, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1151, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[530, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1152, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[107, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[531, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1153, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[463, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1080, "polars.Series.dt.is_business_day", false]], "is_column() (polars.expr.meta method)": [[600, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[601, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[250, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[532, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1154, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[251, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1155, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[533, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1156, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[534, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1157, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[535, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1158, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[536, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1159, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[537, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1160, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[464, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1081, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[602, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1040, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[538, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1161, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[539, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1162, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[540, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1163, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[541, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1164, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[603, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[972, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1165, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[252, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[542, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1166, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[465, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1082, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[253, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1167, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[254, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[255, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[256, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[257, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[391, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[564, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[708, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[892, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[1003, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1189, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1299, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[258, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[893, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[259, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[894, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[709, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1300, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[742, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1334, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[146, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[710, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1301, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[618, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[143, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[144, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[543, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1168, "polars.Series.kurtosis", false]], "last() (in module polars)": [[803, "polars.last", false]], "last() (in module polars.selectors)": [[972, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[544, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[392, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[565, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[895, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[947, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1169, "polars.Series.last", false]], "last() (polars.series.arr method)": [[1004, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1190, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[260, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[896, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[545, "polars.Expr.le", false]], "le() (polars.series method)": [[1170, "polars.Series.le", false]], "len() (in module polars)": [[804, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[546, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[566, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[948, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1171, "polars.Series.len", false]], "len() (polars.series.list method)": [[1191, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[428, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[711, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1041, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1302, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[429, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[712, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1042, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1303, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[261, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[547, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[897, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1172, "polars.Series.limit", false]], "linear_space() (in module polars)": [[805, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[806, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[84, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[192, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[193, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[194, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[807, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[184, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[588, "polars.Expr.log", false]], "log() (polars.series method)": [[1213, "polars.Series.log", false]], "log10() (polars.expr method)": [[589, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1214, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[590, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1215, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[591, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1216, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[592, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1217, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[619, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[808, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[593, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[898, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[594, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1218, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[620, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[809, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[949, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[262, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[108, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "match_to_schema() (polars.dataframe method)": [[263, "polars.DataFrame.match_to_schema", false]], "match_to_schema() (polars.lazyframe method)": [[899, "polars.LazyFrame.match_to_schema", false]], "matches() (in module polars.selectors)": [[972, "polars.selectors.matches", false]], "max() (in module polars)": [[810, "polars.max", false]], "max() (polars.dataframe method)": [[264, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[595, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[393, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[567, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[900, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[950, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1219, "polars.Series.max", false]], "max() (polars.series.arr method)": [[1005, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1083, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1192, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[811, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[265, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[812, "polars.mean", false]], "mean() (polars.dataframe method)": [[266, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[596, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[568, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[901, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[951, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1220, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1084, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1193, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[813, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[267, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[814, "polars.median", false]], "median() (polars.dataframe method)": [[268, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[597, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[394, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[569, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[902, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[952, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1221, "polars.Series.median", false]], "median() (polars.series.arr method)": [[1006, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1085, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1194, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[269, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[903, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[270, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[904, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[466, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1086, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[467, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1087, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[468, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1088, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[815, "polars.min", false]], "min() (polars.dataframe method)": [[271, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[344, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[613, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[395, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[570, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[905, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[953, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1222, "polars.Series.min", false]], "min() (polars.series.arr method)": [[1007, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1089, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1195, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[816, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[272, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[469, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1090, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[614, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[615, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1223, "polars.Series.mode", false]], "module": [[972, "module-polars.selectors", false]], "moduleupgraderequirederror": [[109, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[470, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1091, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[471, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1092, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[472, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1093, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[616, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[273, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1224, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[817, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[274, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[345, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[617, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[396, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[571, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[954, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1225, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1008, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1196, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1226, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[199, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[627, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1227, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[628, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1228, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[473, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1094, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[629, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[604, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1229, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[630, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1230, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[631, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1231, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[140, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[110, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[713, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1304, "polars.Series.str.normalize", false]], "norowsreturnederror": [[111, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[632, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1232, "polars.Series.not_", false]], "nth() (in module polars)": [[818, "polars.nth", false]], "null (class in polars.datatypes)": [[85, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[275, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[633, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[906, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1233, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[972, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[86, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[474, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1095, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[819, "polars.ones", false]], "or_() (polars.expr method)": [[634, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[475, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1096, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[112, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[605, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[635, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[714, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1305, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[715, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1306, "polars.Series.str.pad_start", false]], "panicexception": [[113, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[114, "polars.exceptions.ParameterCollisionError", false]], "parquetfieldoverwrites (class in polars.io.parquet)": [[141, "polars.io.parquet.ParquetFieldOverwrites", false]], "partition_by() (polars.dataframe method)": [[276, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[52, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[53, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[54, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[636, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1234, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[637, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1235, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[638, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1236, "polars.Series.peak_min", false]], "performancewarning": [[115, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[277, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[639, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[907, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[278, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[357, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1373, "polars.Series.plot", false]], "polars.selectors": [[972, "module-polars.selectors", false]], "polarserror": [[116, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[117, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[118, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[606, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[640, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1237, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[621, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[622, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[279, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[641, "polars.Expr.product", false]], "product() (polars.series method)": [[1238, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[908, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[642, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1239, "polars.Series.qcut", false]], "quantile() (in module polars)": [[820, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[280, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[346, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[643, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[909, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[955, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1240, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[476, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1097, "polars.Series.dt.quarter", false]], "queryoptflags (class in polars)": [[940, "polars.QueryOptFlags", false]], "radians() (polars.expr method)": [[644, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[645, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1241, "polars.Series.rank", false]], "read_avro() (in module polars)": [[148, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[149, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[150, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[151, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[152, "polars.read_database", false]], "read_database_uri() (in module polars)": [[153, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[154, "polars.read_delta", false]], "read_excel() (in module polars)": [[155, "polars.read_excel", false]], "read_ipc() (in module polars)": [[156, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[157, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[158, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[159, "polars.read_json", false]], "read_ndjson() (in module polars)": [[160, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[161, "polars.read_ods", false]], "read_parquet() (in module polars)": [[162, "polars.read_parquet", false]], "read_parquet_metadata() (in module polars)": [[163, "polars.read_parquet_metadata", false]], "read_parquet_schema() (in module polars)": [[164, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[281, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[646, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1242, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[821, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1379, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[58, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[59, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1380, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[145, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[60, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1381, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[147, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[61, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[647, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[411, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1243, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1023, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[910, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[282, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[911, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[283, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[912, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1244, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[743, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1335, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[822, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[648, "polars.Expr.repeat_by", false]], "repeat_by() (polars.series method)": [[1245, "polars.Series.repeat_by", false]], "replace() (polars.expr method)": [[649, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[477, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[716, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1246, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1098, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1307, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[717, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1308, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[284, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[718, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1309, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[650, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1247, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[478, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1099, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[651, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1248, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[285, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[652, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[397, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[572, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[719, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[913, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1249, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1009, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1197, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1310, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[653, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1250, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[654, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1251, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[286, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[655, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[914, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[823, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[824, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[656, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1252, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[657, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1253, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[658, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1254, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[659, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[660, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1255, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[661, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[662, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1256, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[663, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[664, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1257, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[665, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[666, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1258, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[667, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[668, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1259, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[669, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1260, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[670, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[671, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1261, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[672, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[673, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1262, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[674, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[607, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[675, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[479, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1263, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1100, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[676, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1264, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[287, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[288, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[289, "polars.DataFrame.rows_by_key", false]], "rowserror": [[119, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[290, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[677, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[573, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1265, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1198, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[165, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[166, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[167, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[168, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[169, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[170, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[171, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[195, "polars.Catalog.scan_table", false]], "scancastoptions (class in polars)": [[55, "polars.ScanCastOptions", false]], "scatter() (polars.series method)": [[1266, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[291, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[915, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1336, "polars.Series.struct.schema", false]], "schemaerror": [[122, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[123, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[678, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1267, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[480, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1101, "polars.Series.dt.second", false]], "select() (in module polars)": [[825, "polars.select", false]], "select() (polars.dataframe method)": [[292, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[916, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[293, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[917, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[294, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[608, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[918, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[185, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1268, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[574, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1199, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[575, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1200, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[186, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[172, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[295, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[679, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[919, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1269, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[576, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1201, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[577, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1202, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[296, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1270, "polars.Series.shape", false]], "shapeerror": [[124, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[297, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[680, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[398, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[578, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[920, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1271, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1010, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1203, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[609, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[921, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[173, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[681, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1272, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[298, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1273, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[682, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1274, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[683, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1275, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[972, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[684, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1276, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[685, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1277, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[412, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1024, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[686, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1278, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[299, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[687, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[579, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[720, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[922, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1279, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1204, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1311, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[300, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[688, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[399, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[580, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[923, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1280, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1011, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1205, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[689, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[721, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1312, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[722, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1313, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[723, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1314, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[826, "polars.sql", false]], "sql() (polars.dataframe method)": [[301, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[924, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[827, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1396, "polars.SQLContext", false]], "sqlinterfaceerror": [[120, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[121, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[690, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1281, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[972, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[413, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[430, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[724, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1025, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1043, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1315, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[828, "polars.std", false]], "std() (polars.dataframe method)": [[302, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[691, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[400, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[581, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[925, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1282, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1012, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1206, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[481, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1102, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[87, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[972, "polars.selectors.string", false]], "stringcache (class in polars)": [[56, "polars.StringCache", false]], "stringcachemismatcherror": [[125, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[725, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1316, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[726, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1317, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[727, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1318, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[728, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1319, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[729, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1320, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[730, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1321, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[88, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[829, "polars.struct", false]], "structfieldnotfounderror": [[126, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[358, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[746, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[623, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[624, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[830, "polars.sum", false]], "sum() (polars.dataframe method)": [[303, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[347, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[747, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[401, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[582, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[926, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[956, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1338, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1013, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1207, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[831, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[304, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[200, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1382, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[202, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[832, "polars.tail", false]], "tail() (polars.dataframe method)": [[305, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[348, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[748, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[583, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[731, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[927, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[957, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1339, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1208, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1322, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[749, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1340, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[750, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1341, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[972, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[187, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[188, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[89, "polars.datatypes.Time", false]], "time() (in module polars)": [[833, "polars.time", false]], "time() (in module polars.selectors)": [[972, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[482, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1103, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[834, "polars.time_range", false]], "time_ranges() (in module polars)": [[835, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[483, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1104, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[584, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1209, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[306, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1342, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[732, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1323, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[733, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1324, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[734, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1325, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[307, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[308, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[309, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1343, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1344, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[310, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1345, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[735, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1326, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[311, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1346, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[402, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1347, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1014, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1044, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[625, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[736, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1327, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[312, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1348, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[313, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1349, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[751, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1350, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[314, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[484, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1105, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[315, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[403, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[585, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1015, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1210, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[737, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1328, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[738, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1329, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[316, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1351, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[626, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[739, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1330, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[127, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[317, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[752, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[928, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1352, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[753, "polars.Expr.top_k_by", false]], "top_k_by() (polars.series method)": [[1353, "polars.Series.top_k_by", false]], "total_days() (polars.expr.dt method)": [[485, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1106, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[486, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1107, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[487, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1108, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[488, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1109, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[489, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1110, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[490, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1111, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[491, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1112, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[318, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[610, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[754, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[492, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1113, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[90, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[91, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[92, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[93, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[611, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[319, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[755, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[404, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[586, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[929, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1354, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1016, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1211, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[756, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1355, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[94, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[320, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[744, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[930, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1337, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[321, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[931, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1383, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[972, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[128, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[322, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[129, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[323, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[932, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[757, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1356, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[324, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1045, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[189, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[95, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[758, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1357, "polars.Series.value_counts", false]], "var() (in module polars)": [[836, "polars.var", false]], "var() (polars.dataframe method)": [[325, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[759, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[405, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[587, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[933, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1358, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1017, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1212, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[326, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[493, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1114, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[494, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1115, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[837, "polars.when", false]], "where() (polars.expr method)": [[760, "polars.Expr.where", false]], "width (polars.dataframe property)": [[327, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[934, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[328, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[935, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[329, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[936, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[937, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[745, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[330, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[938, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[331, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[939, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[495, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1116, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[612, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[761, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[496, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1117, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[838, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[740, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1331, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1359, "polars.Series.zip_with", false]]}, "objects": {"polars": [[190, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [52, 0, 1, "", "PartitionByKey"], [53, 0, 1, "", "PartitionMaxSize"], [54, 0, 1, "", "PartitionParted"], [940, 0, 1, "", "QueryOptFlags"], [1396, 0, 1, "", "SQLContext"], [55, 0, 1, "", "ScanCastOptions"], [56, 0, 1, "", "StringCache"], [57, 4, 1, "", "align_frames"], [762, 4, 1, "", "all"], [763, 4, 1, "", "all_horizontal"], [764, 4, 1, "", "any"], [765, 4, 1, "", "any_horizontal"], [766, 4, 1, "", "approx_n_unique"], [767, 4, 1, "", "arange"], [768, 4, 1, "", "arctan2"], [769, 4, 1, "", "arctan2d"], [770, 4, 1, "", "arg_sort_by"], [771, 4, 1, "", "arg_where"], [62, 4, 1, "", "build_info"], [772, 4, 1, "", "business_day_count"], [773, 4, 1, "", "coalesce"], [63, 4, 1, "", "collect_all"], [64, 4, 1, "", "collect_all_async"], [65, 4, 1, "", "concat"], [774, 4, 1, "", "concat_arr"], [775, 4, 1, "", "concat_list"], [776, 4, 1, "", "concat_str"], [777, 4, 1, "", "corr"], [778, 4, 1, "", "count"], [779, 4, 1, "", "cov"], [780, 4, 1, "", "cum_count"], [781, 4, 1, "", "cum_fold"], [782, 4, 1, "", "cum_reduce"], [783, 4, 1, "", "cum_sum"], [784, 4, 1, "", "cum_sum_horizontal"], [785, 4, 1, "", "date"], [786, 4, 1, "", "date_range"], [787, 4, 1, "", "date_ranges"], [788, 4, 1, "", "datetime"], [789, 4, 1, "", "datetime_range"], [790, 4, 1, "", "datetime_ranges"], [96, 4, 1, "", "defer"], [97, 4, 1, "", "disable_string_cache"], [791, 4, 1, "", "duration"], [792, 4, 1, "", "element"], [98, 4, 1, "", "enable_string_cache"], [99, 4, 1, "", "escape_regex"], [793, 4, 1, "", "exclude"], [130, 4, 1, "", "explain_all"], [794, 4, 1, "", "first"], [795, 4, 1, "", "fold"], [796, 4, 1, "", "format"], [131, 4, 1, "", "from_arrow"], [132, 4, 1, "", "from_dataframe"], [133, 4, 1, "", "from_dict"], [134, 4, 1, "", "from_dicts"], [797, 4, 1, "", "from_epoch"], [135, 4, 1, "", "from_numpy"], [136, 4, 1, "", "from_pandas"], [137, 4, 1, "", "from_records"], [138, 4, 1, "", "from_repr"], [139, 4, 1, "", "get_index_type"], [798, 4, 1, "", "groups"], [799, 4, 1, "", "head"], [800, 4, 1, "", "implode"], [801, 4, 1, "", "int_range"], [802, 4, 1, "", "int_ranges"], [146, 4, 1, "", "json_normalize"], [803, 4, 1, "", "last"], [804, 4, 1, "", "len"], [805, 4, 1, "", "linear_space"], [806, 4, 1, "", "linear_spaces"], [807, 4, 1, "", "lit"], [808, 4, 1, "", "map_batches"], [809, 4, 1, "", "map_groups"], [810, 4, 1, "", "max"], [811, 4, 1, "", "max_horizontal"], [812, 4, 1, "", "mean"], [813, 4, 1, "", "mean_horizontal"], [814, 4, 1, "", "median"], [815, 4, 1, "", "min"], [816, 4, 1, "", "min_horizontal"], [817, 4, 1, "", "n_unique"], [818, 4, 1, "", "nth"], [819, 4, 1, "", "ones"], [820, 4, 1, "", "quantile"], [148, 4, 1, "", "read_avro"], [149, 4, 1, "", "read_clipboard"], [150, 4, 1, "", "read_csv"], [151, 4, 1, "", "read_csv_batched"], [152, 4, 1, "", "read_database"], [153, 4, 1, "", "read_database_uri"], [154, 4, 1, "", "read_delta"], [155, 4, 1, "", "read_excel"], [156, 4, 1, "", "read_ipc"], [157, 4, 1, "", "read_ipc_schema"], [158, 4, 1, "", "read_ipc_stream"], [159, 4, 1, "", "read_json"], [160, 4, 1, "", "read_ndjson"], [161, 4, 1, "", "read_ods"], [162, 4, 1, "", "read_parquet"], [163, 4, 1, "", "read_parquet_metadata"], [164, 4, 1, "", "read_parquet_schema"], [821, 4, 1, "", "reduce"], [822, 4, 1, "", "repeat"], [823, 4, 1, "", "rolling_corr"], [824, 4, 1, "", "rolling_cov"], [165, 4, 1, "", "scan_csv"], [166, 4, 1, "", "scan_delta"], [167, 4, 1, "", "scan_iceberg"], [168, 4, 1, "", "scan_ipc"], [169, 4, 1, "", "scan_ndjson"], [170, 4, 1, "", "scan_parquet"], [171, 4, 1, "", "scan_pyarrow_dataset"], [825, 4, 1, "", "select"], [972, 7, 0, "-", "selectors"], [172, 4, 1, "", "set_random_seed"], [173, 4, 1, "", "show_versions"], [826, 4, 1, "", "sql"], [827, 4, 1, "", "sql_expr"], [828, 4, 1, "", "std"], [829, 4, 1, "", "struct"], [830, 4, 1, "", "sum"], [831, 4, 1, "", "sum_horizontal"], [832, 4, 1, "", "tail"], [187, 4, 1, "", "thread_pool_size"], [188, 4, 1, "", "threadpool_size"], [833, 4, 1, "", "time"], [834, 4, 1, "", "time_range"], [835, 4, 1, "", "time_ranges"], [189, 4, 1, "", "using_string_cache"], [836, 4, 1, "", "var"], [837, 4, 1, "", "when"], [838, 4, 1, "", "zeros"]], "polars.Catalog": [[190, 1, 1, "", "__init__"], [191, 1, 1, "", "get_table_info"], [192, 1, 1, "", "list_catalogs"], [193, 1, 1, "", "list_namespaces"], [194, 1, 1, "", "list_tables"], [195, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[207, 1, 1, "", "__array__"], [208, 1, 1, "", "__arrow_c_stream__"], [209, 1, 1, "", "__dataframe__"], [210, 1, 1, "", "__getitem__"], [211, 1, 1, "", "__setitem__"], [212, 1, 1, "", "approx_n_unique"], [213, 1, 1, "", "bottom_k"], [214, 1, 1, "", "cast"], [215, 1, 1, "", "clear"], [216, 1, 1, "", "clone"], [217, 1, 1, "", "collect_schema"], [218, 2, 1, "", "columns"], [219, 1, 1, "", "corr"], [220, 1, 1, "", "count"], [221, 1, 1, "", "describe"], [222, 1, 1, "", "deserialize"], [223, 1, 1, "", "drop"], [224, 1, 1, "", "drop_in_place"], [225, 1, 1, "", "drop_nans"], [226, 1, 1, "", "drop_nulls"], [227, 2, 1, "", "dtypes"], [228, 1, 1, "", "equals"], [229, 1, 1, "", "estimated_size"], [230, 1, 1, "", "explode"], [231, 1, 1, "", "extend"], [232, 1, 1, "", "fill_nan"], [233, 1, 1, "", "fill_null"], [234, 1, 1, "", "filter"], [235, 2, 1, "", "flags"], [236, 1, 1, "", "fold"], [237, 1, 1, "", "gather_every"], [238, 1, 1, "", "get_column"], [239, 1, 1, "", "get_column_index"], [240, 1, 1, "", "get_columns"], [241, 1, 1, "", "glimpse"], [242, 1, 1, "", "group_by"], [243, 1, 1, "", "group_by_dynamic"], [244, 1, 1, "", "hash_rows"], [245, 1, 1, "", "head"], [246, 2, 1, "", "height"], [247, 1, 1, "", "hstack"], [248, 1, 1, "", "insert_column"], [249, 1, 1, "", "interpolate"], [250, 1, 1, "", "is_duplicated"], [251, 1, 1, "", "is_empty"], [252, 1, 1, "", "is_unique"], [253, 1, 1, "", "item"], [254, 1, 1, "", "iter_columns"], [255, 1, 1, "", "iter_rows"], [256, 1, 1, "", "iter_slices"], [257, 1, 1, "", "join"], [258, 1, 1, "", "join_asof"], [259, 1, 1, "", "join_where"], [260, 1, 1, "", "lazy"], [261, 1, 1, "", "limit"], [262, 1, 1, "", "map_rows"], [263, 1, 1, "", "match_to_schema"], [264, 1, 1, "", "max"], [265, 1, 1, "", "max_horizontal"], [266, 1, 1, "", "mean"], [267, 1, 1, "", "mean_horizontal"], [268, 1, 1, "", "median"], [269, 1, 1, "", "melt"], [270, 1, 1, "", "merge_sorted"], [271, 1, 1, "", "min"], [272, 1, 1, "", "min_horizontal"], [273, 1, 1, "", "n_chunks"], [274, 1, 1, "", "n_unique"], [275, 1, 1, "", "null_count"], [276, 1, 1, "", "partition_by"], [277, 1, 1, "", "pipe"], [278, 1, 1, "", "pivot"], [357, 2, 1, "", "plot"], [279, 1, 1, "", "product"], [280, 1, 1, "", "quantile"], [281, 1, 1, "", "rechunk"], [282, 1, 1, "", "remove"], [283, 1, 1, "", "rename"], [284, 1, 1, "", "replace_column"], [285, 1, 1, "", "reverse"], [286, 1, 1, "", "rolling"], [287, 1, 1, "", "row"], [288, 1, 1, "", "rows"], [289, 1, 1, "", "rows_by_key"], [290, 1, 1, "", "sample"], [291, 2, 1, "", "schema"], [292, 1, 1, "", "select"], [293, 1, 1, "", "select_seq"], [294, 1, 1, "", "serialize"], [295, 1, 1, "", "set_sorted"], [296, 2, 1, "", "shape"], [297, 1, 1, "", "shift"], [298, 1, 1, "", "shrink_to_fit"], [299, 1, 1, "", "slice"], [300, 1, 1, "", "sort"], [301, 1, 1, "", "sql"], [302, 1, 1, "", "std"], [358, 2, 1, "", "style"], [303, 1, 1, "", "sum"], [304, 1, 1, "", "sum_horizontal"], [305, 1, 1, "", "tail"], [306, 1, 1, "", "to_arrow"], [307, 1, 1, "", "to_dict"], [308, 1, 1, "", "to_dicts"], [309, 1, 1, "", "to_dummies"], [310, 1, 1, "", "to_init_repr"], [311, 1, 1, "", "to_jax"], [312, 1, 1, "", "to_numpy"], [313, 1, 1, "", "to_pandas"], [314, 1, 1, "", "to_series"], [315, 1, 1, "", "to_struct"], [316, 1, 1, "", "to_torch"], [317, 1, 1, "", "top_k"], [318, 1, 1, "", "transpose"], [319, 1, 1, "", "unique"], [320, 1, 1, "", "unnest"], [321, 1, 1, "", "unpivot"], [322, 1, 1, "", "unstack"], [323, 1, 1, "", "update"], [324, 1, 1, "", "upsample"], [325, 1, 1, "", "var"], [326, 1, 1, "", "vstack"], [327, 2, 1, "", "width"], [328, 1, 1, "", "with_columns"], [329, 1, 1, "", "with_columns_seq"], [330, 1, 1, "", "with_row_count"], [331, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.Expr": [[362, 1, 1, "", "abs"], [363, 1, 1, "", "add"], [364, 1, 1, "", "agg_groups"], [365, 1, 1, "", "alias"], [366, 1, 1, "", "all"], [367, 1, 1, "", "and_"], [368, 1, 1, "", "any"], [369, 1, 1, "", "append"], [370, 1, 1, "", "approx_n_unique"], [371, 1, 1, "", "arccos"], [372, 1, 1, "", "arccosh"], [373, 1, 1, "", "arcsin"], [374, 1, 1, "", "arcsinh"], [375, 1, 1, "", "arctan"], [376, 1, 1, "", "arctanh"], [377, 1, 1, "", "arg_max"], [378, 1, 1, "", "arg_min"], [379, 1, 1, "", "arg_sort"], [380, 1, 1, "", "arg_true"], [381, 1, 1, "", "arg_unique"], [406, 1, 1, "", "backward_fill"], [414, 1, 1, "", "bitwise_and"], [415, 1, 1, "", "bitwise_count_ones"], [416, 1, 1, "", "bitwise_count_zeros"], [417, 1, 1, "", "bitwise_leading_ones"], [418, 1, 1, "", "bitwise_leading_zeros"], [419, 1, 1, "", "bitwise_or"], [420, 1, 1, "", "bitwise_trailing_ones"], [421, 1, 1, "", "bitwise_trailing_zeros"], [422, 1, 1, "", "bitwise_xor"], [423, 1, 1, "", "bottom_k"], [424, 1, 1, "", "bottom_k_by"], [425, 1, 1, "", "cast"], [431, 1, 1, "", "cbrt"], [432, 1, 1, "", "ceil"], [433, 1, 1, "", "clip"], [434, 1, 1, "", "cos"], [435, 1, 1, "", "cosh"], [436, 1, 1, "", "cot"], [437, 1, 1, "", "count"], [438, 1, 1, "", "cum_count"], [439, 1, 1, "", "cum_max"], [440, 1, 1, "", "cum_min"], [441, 1, 1, "", "cum_prod"], [442, 1, 1, "", "cum_sum"], [443, 1, 1, "", "cumulative_eval"], [444, 1, 1, "", "cut"], [445, 1, 1, "", "degrees"], [446, 1, 1, "", "deserialize"], [447, 1, 1, "", "diff"], [448, 1, 1, "", "dot"], [449, 1, 1, "", "drop_nans"], [450, 1, 1, "", "drop_nulls"], [497, 1, 1, "", "entropy"], [498, 1, 1, "", "eq"], [499, 1, 1, "", "eq_missing"], [500, 1, 1, "", "ewm_mean"], [501, 1, 1, "", "ewm_mean_by"], [502, 1, 1, "", "ewm_std"], [503, 1, 1, "", "ewm_var"], [504, 1, 1, "", "exclude"], [505, 1, 1, "", "exp"], [506, 1, 1, "", "explode"], [507, 1, 1, "", "extend_constant"], [508, 1, 1, "", "fill_nan"], [509, 1, 1, "", "fill_null"], [510, 1, 1, "", "filter"], [511, 1, 1, "", "first"], [512, 1, 1, "", "flatten"], [513, 1, 1, "", "floor"], [514, 1, 1, "", "floordiv"], [515, 1, 1, "", "forward_fill"], [516, 1, 1, "", "from_json"], [517, 1, 1, "", "gather"], [518, 1, 1, "", "gather_every"], [519, 1, 1, "", "ge"], [520, 1, 1, "", "get"], [521, 1, 1, "", "gt"], [522, 1, 1, "", "has_nulls"], [523, 1, 1, "", "hash"], [524, 1, 1, "", "head"], [525, 1, 1, "", "hist"], [526, 1, 1, "", "implode"], [527, 1, 1, "", "index_of"], [528, 1, 1, "", "inspect"], [529, 1, 1, "", "interpolate"], [530, 1, 1, "", "interpolate_by"], [531, 1, 1, "", "is_between"], [532, 1, 1, "", "is_duplicated"], [533, 1, 1, "", "is_finite"], [534, 1, 1, "", "is_first_distinct"], [535, 1, 1, "", "is_in"], [536, 1, 1, "", "is_infinite"], [537, 1, 1, "", "is_last_distinct"], [538, 1, 1, "", "is_nan"], [539, 1, 1, "", "is_not_nan"], [540, 1, 1, "", "is_not_null"], [541, 1, 1, "", "is_null"], [542, 1, 1, "", "is_unique"], [543, 1, 1, "", "kurtosis"], [544, 1, 1, "", "last"], [545, 1, 1, "", "le"], [546, 1, 1, "", "len"], [547, 1, 1, "", "limit"], [588, 1, 1, "", "log"], [589, 1, 1, "", "log10"], [590, 1, 1, "", "log1p"], [591, 1, 1, "", "lower_bound"], [592, 1, 1, "", "lt"], [593, 1, 1, "", "map_batches"], [594, 1, 1, "", "map_elements"], [595, 1, 1, "", "max"], [596, 1, 1, "", "mean"], [597, 1, 1, "", "median"], [613, 1, 1, "", "min"], [614, 1, 1, "", "mod"], [615, 1, 1, "", "mode"], [616, 1, 1, "", "mul"], [617, 1, 1, "", "n_unique"], [627, 1, 1, "", "nan_max"], [628, 1, 1, "", "nan_min"], [629, 1, 1, "", "ne"], [630, 1, 1, "", "ne_missing"], [631, 1, 1, "", "neg"], [632, 1, 1, "", "not_"], [633, 1, 1, "", "null_count"], [634, 1, 1, "", "or_"], [635, 1, 1, "", "over"], [636, 1, 1, "", "pct_change"], [637, 1, 1, "", "peak_max"], [638, 1, 1, "", "peak_min"], [639, 1, 1, "", "pipe"], [640, 1, 1, "", "pow"], [641, 1, 1, "", "product"], [642, 1, 1, "", "qcut"], [643, 1, 1, "", "quantile"], [644, 1, 1, "", "radians"], [645, 1, 1, "", "rank"], [646, 1, 1, "", "rechunk"], [647, 1, 1, "", "reinterpret"], [648, 1, 1, "", "repeat_by"], [649, 1, 1, "", "replace"], [650, 1, 1, "", "replace_strict"], [651, 1, 1, "", "reshape"], [652, 1, 1, "", "reverse"], [653, 1, 1, "", "rle"], [654, 1, 1, "", "rle_id"], [655, 1, 1, "", "rolling"], [656, 1, 1, "", "rolling_kurtosis"], [657, 1, 1, "", "rolling_map"], [658, 1, 1, "", "rolling_max"], [659, 1, 1, "", "rolling_max_by"], [660, 1, 1, "", "rolling_mean"], [661, 1, 1, "", "rolling_mean_by"], [662, 1, 1, "", "rolling_median"], [663, 1, 1, "", "rolling_median_by"], [664, 1, 1, "", "rolling_min"], [665, 1, 1, "", "rolling_min_by"], [666, 1, 1, "", "rolling_quantile"], [667, 1, 1, "", "rolling_quantile_by"], [668, 1, 1, "", "rolling_skew"], [669, 1, 1, "", "rolling_std"], [670, 1, 1, "", "rolling_std_by"], [671, 1, 1, "", "rolling_sum"], [672, 1, 1, "", "rolling_sum_by"], [673, 1, 1, "", "rolling_var"], [674, 1, 1, "", "rolling_var_by"], [675, 1, 1, "", "round"], [676, 1, 1, "", "round_sig_figs"], [677, 1, 1, "", "sample"], [678, 1, 1, "", "search_sorted"], [679, 1, 1, "", "set_sorted"], [680, 1, 1, "", "shift"], [681, 1, 1, "", "shrink_dtype"], [682, 1, 1, "", "shuffle"], [683, 1, 1, "", "sign"], [684, 1, 1, "", "sin"], [685, 1, 1, "", "sinh"], [686, 1, 1, "", "skew"], [687, 1, 1, "", "slice"], [688, 1, 1, "", "sort"], [689, 1, 1, "", "sort_by"], [690, 1, 1, "", "sqrt"], [691, 1, 1, "", "std"], [746, 1, 1, "", "sub"], [747, 1, 1, "", "sum"], [748, 1, 1, "", "tail"], [749, 1, 1, "", "tan"], [750, 1, 1, "", "tanh"], [751, 1, 1, "", "to_physical"], [752, 1, 1, "", "top_k"], [753, 1, 1, "", "top_k_by"], [754, 1, 1, "", "truediv"], [755, 1, 1, "", "unique"], [756, 1, 1, "", "unique_counts"], [757, 1, 1, "", "upper_bound"], [758, 1, 1, "", "value_counts"], [759, 1, 1, "", "var"], [760, 1, 1, "", "where"], [761, 1, 1, "", "xor"]], "polars.Expr.arr": [[382, 1, 1, "", "all"], [383, 1, 1, "", "any"], [384, 1, 1, "", "arg_max"], [385, 1, 1, "", "arg_min"], [386, 1, 1, "", "contains"], [387, 1, 1, "", "count_matches"], [388, 1, 1, "", "explode"], [389, 1, 1, "", "first"], [390, 1, 1, "", "get"], [391, 1, 1, "", "join"], [392, 1, 1, "", "last"], [393, 1, 1, "", "max"], [394, 1, 1, "", "median"], [395, 1, 1, "", "min"], [396, 1, 1, "", "n_unique"], [397, 1, 1, "", "reverse"], [398, 1, 1, "", "shift"], [399, 1, 1, "", "sort"], [400, 1, 1, "", "std"], [401, 1, 1, "", "sum"], [402, 1, 1, "", "to_list"], [403, 1, 1, "", "to_struct"], [404, 1, 1, "", "unique"], [405, 1, 1, "", "var"]], "polars.Expr.bin": [[407, 1, 1, "", "contains"], [408, 1, 1, "", "decode"], [409, 1, 1, "", "encode"], [410, 1, 1, "", "ends_with"], [411, 1, 1, "", "reinterpret"], [412, 1, 1, "", "size"], [413, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[426, 1, 1, "", "ends_with"], [427, 1, 1, "", "get_categories"], [428, 1, 1, "", "len_bytes"], [429, 1, 1, "", "len_chars"], [430, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[451, 1, 1, "", "add_business_days"], [452, 1, 1, "", "base_utc_offset"], [453, 1, 1, "", "cast_time_unit"], [454, 1, 1, "", "century"], [455, 1, 1, "", "combine"], [456, 1, 1, "", "convert_time_zone"], [457, 1, 1, "", "date"], [458, 1, 1, "", "datetime"], [459, 1, 1, "", "day"], [460, 1, 1, "", "dst_offset"], [461, 1, 1, "", "epoch"], [462, 1, 1, "", "hour"], [463, 1, 1, "", "is_business_day"], [464, 1, 1, "", "is_leap_year"], [465, 1, 1, "", "iso_year"], [466, 1, 1, "", "microsecond"], [467, 1, 1, "", "millennium"], [468, 1, 1, "", "millisecond"], [469, 1, 1, "", "minute"], [470, 1, 1, "", "month"], [471, 1, 1, "", "month_end"], [472, 1, 1, "", "month_start"], [473, 1, 1, "", "nanosecond"], [474, 1, 1, "", "offset_by"], [475, 1, 1, "", "ordinal_day"], [476, 1, 1, "", "quarter"], [477, 1, 1, "", "replace"], [478, 1, 1, "", "replace_time_zone"], [479, 1, 1, "", "round"], [480, 1, 1, "", "second"], [481, 1, 1, "", "strftime"], [482, 1, 1, "", "time"], [483, 1, 1, "", "timestamp"], [484, 1, 1, "", "to_string"], [485, 1, 1, "", "total_days"], [486, 1, 1, "", "total_hours"], [487, 1, 1, "", "total_microseconds"], [488, 1, 1, "", "total_milliseconds"], [489, 1, 1, "", "total_minutes"], [490, 1, 1, "", "total_nanoseconds"], [491, 1, 1, "", "total_seconds"], [492, 1, 1, "", "truncate"], [493, 1, 1, "", "week"], [494, 1, 1, "", "weekday"], [495, 1, 1, "", "with_time_unit"], [496, 1, 1, "", "year"]], "polars.Expr.list": [[548, 1, 1, "", "all"], [549, 1, 1, "", "any"], [550, 1, 1, "", "arg_max"], [551, 1, 1, "", "arg_min"], [552, 1, 1, "", "concat"], [553, 1, 1, "", "contains"], [554, 1, 1, "", "count_matches"], [555, 1, 1, "", "diff"], [556, 1, 1, "", "drop_nulls"], [557, 1, 1, "", "eval"], [558, 1, 1, "", "explode"], [559, 1, 1, "", "first"], [560, 1, 1, "", "gather"], [561, 1, 1, "", "gather_every"], [562, 1, 1, "", "get"], [563, 1, 1, "", "head"], [564, 1, 1, "", "join"], [565, 1, 1, "", "last"], [566, 1, 1, "", "len"], [567, 1, 1, "", "max"], [568, 1, 1, "", "mean"], [569, 1, 1, "", "median"], [570, 1, 1, "", "min"], [571, 1, 1, "", "n_unique"], [572, 1, 1, "", "reverse"], [573, 1, 1, "", "sample"], [574, 1, 1, "", "set_difference"], [575, 1, 1, "", "set_intersection"], [576, 1, 1, "", "set_symmetric_difference"], [577, 1, 1, "", "set_union"], [578, 1, 1, "", "shift"], [579, 1, 1, "", "slice"], [580, 1, 1, "", "sort"], [581, 1, 1, "", "std"], [582, 1, 1, "", "sum"], [583, 1, 1, "", "tail"], [584, 1, 1, "", "to_array"], [585, 1, 1, "", "to_struct"], [586, 1, 1, "", "unique"], [587, 1, 1, "", "var"]], "polars.Expr.meta": [[598, 1, 1, "", "eq"], [599, 1, 1, "", "has_multiple_outputs"], [600, 1, 1, "", "is_column"], [601, 1, 1, "", "is_column_selection"], [602, 1, 1, "", "is_literal"], [603, 1, 1, "", "is_regex_projection"], [604, 1, 1, "", "ne"], [605, 1, 1, "", "output_name"], [606, 1, 1, "", "pop"], [607, 1, 1, "", "root_names"], [608, 1, 1, "", "serialize"], [609, 1, 1, "", "show_graph"], [610, 1, 1, "", "tree_format"], [611, 1, 1, "", "undo_aliases"], [612, 1, 1, "", "write_json"]], "polars.Expr.name": [[618, 1, 1, "", "keep"], [619, 1, 1, "", "map"], [620, 1, 1, "", "map_fields"], [621, 1, 1, "", "prefix"], [622, 1, 1, "", "prefix_fields"], [623, 1, 1, "", "suffix"], [624, 1, 1, "", "suffix_fields"], [625, 1, 1, "", "to_lowercase"], [626, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[692, 1, 1, "", "concat"], [693, 1, 1, "", "contains"], [694, 1, 1, "", "contains_any"], [695, 1, 1, "", "count_matches"], [696, 1, 1, "", "decode"], [697, 1, 1, "", "encode"], [698, 1, 1, "", "ends_with"], [699, 1, 1, "", "escape_regex"], [700, 1, 1, "", "explode"], [701, 1, 1, "", "extract"], [702, 1, 1, "", "extract_all"], [703, 1, 1, "", "extract_groups"], [704, 1, 1, "", "extract_many"], [705, 1, 1, "", "find"], [706, 1, 1, "", "find_many"], [707, 1, 1, "", "head"], [708, 1, 1, "", "join"], [709, 1, 1, "", "json_decode"], [710, 1, 1, "", "json_path_match"], [711, 1, 1, "", "len_bytes"], [712, 1, 1, "", "len_chars"], [713, 1, 1, "", "normalize"], [714, 1, 1, "", "pad_end"], [715, 1, 1, "", "pad_start"], [716, 1, 1, "", "replace"], [717, 1, 1, "", "replace_all"], [718, 1, 1, "", "replace_many"], [719, 1, 1, "", "reverse"], [720, 1, 1, "", "slice"], [721, 1, 1, "", "split"], [722, 1, 1, "", "split_exact"], [723, 1, 1, "", "splitn"], [724, 1, 1, "", "starts_with"], [725, 1, 1, "", "strip_chars"], [726, 1, 1, "", "strip_chars_end"], [727, 1, 1, "", "strip_chars_start"], [728, 1, 1, "", "strip_prefix"], [729, 1, 1, "", "strip_suffix"], [730, 1, 1, "", "strptime"], [731, 1, 1, "", "tail"], [732, 1, 1, "", "to_date"], [733, 1, 1, "", "to_datetime"], [734, 1, 1, "", "to_decimal"], [735, 1, 1, "", "to_integer"], [736, 1, 1, "", "to_lowercase"], [737, 1, 1, "", "to_time"], [738, 1, 1, "", "to_titlecase"], [739, 1, 1, "", "to_uppercase"], [740, 1, 1, "", "zfill"]], "polars.Expr.struct": [[741, 1, 1, "", "field"], [742, 1, 1, "", "json_encode"], [743, 1, 1, "", "rename_fields"], [744, 1, 1, "", "unnest"], [745, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[862, 1, 1, "", "__getitem__"], [863, 1, 1, "", "approx_n_unique"], [864, 1, 1, "", "bottom_k"], [865, 1, 1, "", "cache"], [866, 1, 1, "", "cast"], [867, 1, 1, "", "clear"], [868, 1, 1, "", "clone"], [869, 1, 1, "", "collect"], [870, 1, 1, "", "collect_async"], [871, 1, 1, "", "collect_schema"], [872, 2, 1, "", "columns"], [873, 1, 1, "", "count"], [874, 1, 1, "", "describe"], [875, 1, 1, "", "deserialize"], [876, 1, 1, "", "drop"], [877, 1, 1, "", "drop_nans"], [878, 1, 1, "", "drop_nulls"], [879, 2, 1, "", "dtypes"], [880, 1, 1, "", "explain"], [881, 1, 1, "", "explode"], [882, 1, 1, "", "fill_nan"], [883, 1, 1, "", "fill_null"], [884, 1, 1, "", "filter"], [885, 1, 1, "", "first"], [886, 1, 1, "", "gather_every"], [887, 1, 1, "", "group_by"], [888, 1, 1, "", "group_by_dynamic"], [889, 1, 1, "", "head"], [890, 1, 1, "", "inspect"], [891, 1, 1, "", "interpolate"], [892, 1, 1, "", "join"], [893, 1, 1, "", "join_asof"], [894, 1, 1, "", "join_where"], [895, 1, 1, "", "last"], [896, 1, 1, "", "lazy"], [897, 1, 1, "", "limit"], [898, 1, 1, "", "map_batches"], [899, 1, 1, "", "match_to_schema"], [900, 1, 1, "", "max"], [901, 1, 1, "", "mean"], [902, 1, 1, "", "median"], [903, 1, 1, "", "melt"], [904, 1, 1, "", "merge_sorted"], [905, 1, 1, "", "min"], [906, 1, 1, "", "null_count"], [907, 1, 1, "", "pipe"], [908, 1, 1, "", "profile"], [909, 1, 1, "", "quantile"], [910, 1, 1, "", "remote"], [911, 1, 1, "", "remove"], [912, 1, 1, "", "rename"], [913, 1, 1, "", "reverse"], [914, 1, 1, "", "rolling"], [915, 2, 1, "", "schema"], [916, 1, 1, "", "select"], [917, 1, 1, "", "select_seq"], [918, 1, 1, "", "serialize"], [919, 1, 1, "", "set_sorted"], [920, 1, 1, "", "shift"], [921, 1, 1, "", "show_graph"], [48, 1, 1, "", "sink_csv"], [49, 1, 1, "", "sink_ipc"], [50, 1, 1, "", "sink_ndjson"], [51, 1, 1, "", "sink_parquet"], [922, 1, 1, "", "slice"], [923, 1, 1, "", "sort"], [924, 1, 1, "", "sql"], [925, 1, 1, "", "std"], [926, 1, 1, "", "sum"], [927, 1, 1, "", "tail"], [928, 1, 1, "", "top_k"], [929, 1, 1, "", "unique"], [930, 1, 1, "", "unnest"], [931, 1, 1, "", "unpivot"], [932, 1, 1, "", "update"], [933, 1, 1, "", "var"], [934, 2, 1, "", "width"], [935, 1, 1, "", "with_columns"], [936, 1, 1, "", "with_columns_seq"], [937, 1, 1, "", "with_context"], [938, 1, 1, "", "with_row_count"], [939, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[52, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[53, 1, 1, "", "__init__"]], "polars.PartitionParted": [[54, 1, 1, "", "__init__"]], "polars.QueryOptFlags": [[940, 1, 1, "", "__init__"]], "polars.SQLContext": [[1396, 1, 1, "", "__enter__"], [1396, 1, 1, "", "__exit__"], [1396, 1, 1, "", "__init__"], [1377, 1, 1, "", "execute"], [1378, 1, 1, "", "execute_global"], [1379, 1, 1, "", "register"], [1380, 1, 1, "", "register_globals"], [1381, 1, 1, "", "register_many"], [1382, 1, 1, "", "tables"], [1383, 1, 1, "", "unregister"]], "polars.ScanCastOptions": [[55, 1, 1, "", "__init__"]], "polars.Series": [[974, 1, 1, "", "__array__"], [975, 1, 1, "", "__arrow_c_stream__"], [976, 1, 1, "", "__getitem__"], [977, 1, 1, "", "abs"], [978, 1, 1, "", "alias"], [979, 1, 1, "", "all"], [980, 1, 1, "", "any"], [981, 1, 1, "", "append"], [982, 1, 1, "", "approx_n_unique"], [983, 1, 1, "", "arccos"], [984, 1, 1, "", "arccosh"], [985, 1, 1, "", "arcsin"], [986, 1, 1, "", "arcsinh"], [987, 1, 1, "", "arctan"], [988, 1, 1, "", "arctanh"], [989, 1, 1, "", "arg_max"], [990, 1, 1, "", "arg_min"], [991, 1, 1, "", "arg_sort"], [992, 1, 1, "", "arg_true"], [993, 1, 1, "", "arg_unique"], [1018, 1, 1, "", "backward_fill"], [1026, 1, 1, "", "bitwise_and"], [1027, 1, 1, "", "bitwise_count_ones"], [1028, 1, 1, "", "bitwise_count_zeros"], [1029, 1, 1, "", "bitwise_leading_ones"], [1030, 1, 1, "", "bitwise_leading_zeros"], [1031, 1, 1, "", "bitwise_or"], [1032, 1, 1, "", "bitwise_trailing_ones"], [1033, 1, 1, "", "bitwise_trailing_zeros"], [1034, 1, 1, "", "bitwise_xor"], [1035, 1, 1, "", "bottom_k"], [1036, 1, 1, "", "bottom_k_by"], [1037, 1, 1, "", "cast"], [1046, 1, 1, "", "cbrt"], [1047, 1, 1, "", "ceil"], [1048, 1, 1, "", "chunk_lengths"], [1049, 1, 1, "", "clear"], [1050, 1, 1, "", "clip"], [1051, 1, 1, "", "clone"], [1052, 1, 1, "", "cos"], [1053, 1, 1, "", "cosh"], [1054, 1, 1, "", "cot"], [1055, 1, 1, "", "count"], [1056, 1, 1, "", "cum_count"], [1057, 1, 1, "", "cum_max"], [1058, 1, 1, "", "cum_min"], [1059, 1, 1, "", "cum_prod"], [1060, 1, 1, "", "cum_sum"], [1061, 1, 1, "", "cumulative_eval"], [1062, 1, 1, "", "cut"], [1063, 1, 1, "", "describe"], [1064, 1, 1, "", "diff"], [1065, 1, 1, "", "dot"], [1066, 1, 1, "", "drop_nans"], [1067, 1, 1, "", "drop_nulls"], [1118, 2, 1, "", "dtype"], [1119, 1, 1, "", "entropy"], [1120, 1, 1, "", "eq"], [1121, 1, 1, "", "eq_missing"], [1122, 1, 1, "", "equals"], [1123, 1, 1, "", "estimated_size"], [1124, 1, 1, "", "ewm_mean"], [1125, 1, 1, "", "ewm_mean_by"], [1126, 1, 1, "", "ewm_std"], [1127, 1, 1, "", "ewm_var"], [1128, 1, 1, "", "exp"], [1129, 1, 1, "", "explode"], [1130, 1, 1, "", "extend"], [1131, 1, 1, "", "extend_constant"], [1132, 1, 1, "", "fill_nan"], [1133, 1, 1, "", "fill_null"], [1134, 1, 1, "", "filter"], [1135, 1, 1, "", "first"], [1136, 2, 1, "", "flags"], [1137, 1, 1, "", "floor"], [1138, 1, 1, "", "forward_fill"], [1139, 1, 1, "", "gather"], [1140, 1, 1, "", "gather_every"], [1141, 1, 1, "", "ge"], [1142, 1, 1, "", "get_chunks"], [1143, 1, 1, "", "gt"], [1144, 1, 1, "", "has_nulls"], [1145, 1, 1, "", "has_validity"], [1146, 1, 1, "", "hash"], [1147, 1, 1, "", "head"], [1148, 1, 1, "", "hist"], [1149, 1, 1, "", "implode"], [1150, 1, 1, "", "index_of"], [1151, 1, 1, "", "interpolate"], [1152, 1, 1, "", "interpolate_by"], [1153, 1, 1, "", "is_between"], [1154, 1, 1, "", "is_duplicated"], [1155, 1, 1, "", "is_empty"], [1156, 1, 1, "", "is_finite"], [1157, 1, 1, "", "is_first_distinct"], [1158, 1, 1, "", "is_in"], [1159, 1, 1, "", "is_infinite"], [1160, 1, 1, "", "is_last_distinct"], [1161, 1, 1, "", "is_nan"], [1162, 1, 1, "", "is_not_nan"], [1163, 1, 1, "", "is_not_null"], [1164, 1, 1, "", "is_null"], [1165, 1, 1, "", "is_sorted"], [1166, 1, 1, "", "is_unique"], [1167, 1, 1, "", "item"], [1168, 1, 1, "", "kurtosis"], [1169, 1, 1, "", "last"], [1170, 1, 1, "", "le"], [1171, 1, 1, "", "len"], [1172, 1, 1, "", "limit"], [1213, 1, 1, "", "log"], [1214, 1, 1, "", "log10"], [1215, 1, 1, "", "log1p"], [1216, 1, 1, "", "lower_bound"], [1217, 1, 1, "", "lt"], [1218, 1, 1, "", "map_elements"], [1219, 1, 1, "", "max"], [1220, 1, 1, "", "mean"], [1221, 1, 1, "", "median"], [1222, 1, 1, "", "min"], [1223, 1, 1, "", "mode"], [1224, 1, 1, "", "n_chunks"], [1225, 1, 1, "", "n_unique"], [1226, 2, 1, "", "name"], [1227, 1, 1, "", "nan_max"], [1228, 1, 1, "", "nan_min"], [1229, 1, 1, "", "ne"], [1230, 1, 1, "", "ne_missing"], [1231, 1, 1, "", "new_from_index"], [1232, 1, 1, "", "not_"], [1233, 1, 1, "", "null_count"], [1234, 1, 1, "", "pct_change"], [1235, 1, 1, "", "peak_max"], [1236, 1, 1, "", "peak_min"], [1373, 2, 1, "", "plot"], [1237, 1, 1, "", "pow"], [1238, 1, 1, "", "product"], [1239, 1, 1, "", "qcut"], [1240, 1, 1, "", "quantile"], [1241, 1, 1, "", "rank"], [1242, 1, 1, "", "rechunk"], [1243, 1, 1, "", "reinterpret"], [1244, 1, 1, "", "rename"], [1245, 1, 1, "", "repeat_by"], [1246, 1, 1, "", "replace"], [1247, 1, 1, "", "replace_strict"], [1248, 1, 1, "", "reshape"], [1249, 1, 1, "", "reverse"], [1250, 1, 1, "", "rle"], [1251, 1, 1, "", "rle_id"], [1252, 1, 1, "", "rolling_kurtosis"], [1253, 1, 1, "", "rolling_map"], [1254, 1, 1, "", "rolling_max"], [1255, 1, 1, "", "rolling_mean"], [1256, 1, 1, "", "rolling_median"], [1257, 1, 1, "", "rolling_min"], [1258, 1, 1, "", "rolling_quantile"], [1259, 1, 1, "", "rolling_skew"], [1260, 1, 1, "", "rolling_std"], [1261, 1, 1, "", "rolling_sum"], [1262, 1, 1, "", "rolling_var"], [1263, 1, 1, "", "round"], [1264, 1, 1, "", "round_sig_figs"], [1265, 1, 1, "", "sample"], [1266, 1, 1, "", "scatter"], [1267, 1, 1, "", "search_sorted"], [1268, 1, 1, "", "set"], [1269, 1, 1, "", "set_sorted"], [1270, 2, 1, "", "shape"], [1271, 1, 1, "", "shift"], [1272, 1, 1, "", "shrink_dtype"], [1273, 1, 1, "", "shrink_to_fit"], [1274, 1, 1, "", "shuffle"], [1275, 1, 1, "", "sign"], [1276, 1, 1, "", "sin"], [1277, 1, 1, "", "sinh"], [1278, 1, 1, "", "skew"], [1279, 1, 1, "", "slice"], [1280, 1, 1, "", "sort"], [1281, 1, 1, "", "sqrt"], [1282, 1, 1, "", "std"], [1338, 1, 1, "", "sum"], [1339, 1, 1, "", "tail"], [1340, 1, 1, "", "tan"], [1341, 1, 1, "", "tanh"], [1342, 1, 1, "", "to_arrow"], [1343, 1, 1, "", "to_dummies"], [1344, 1, 1, "", "to_frame"], [1345, 1, 1, "", "to_init_repr"], [1346, 1, 1, "", "to_jax"], [1347, 1, 1, "", "to_list"], [1348, 1, 1, "", "to_numpy"], [1349, 1, 1, "", "to_pandas"], [1350, 1, 1, "", "to_physical"], [1351, 1, 1, "", "to_torch"], [1352, 1, 1, "", "top_k"], [1353, 1, 1, "", "top_k_by"], [1354, 1, 1, "", "unique"], [1355, 1, 1, "", "unique_counts"], [1356, 1, 1, "", "upper_bound"], [1357, 1, 1, "", "value_counts"], [1358, 1, 1, "", "var"], [1359, 1, 1, "", "zip_with"]], "polars.Series.arr": [[994, 1, 1, "", "all"], [995, 1, 1, "", "any"], [996, 1, 1, "", "arg_max"], [997, 1, 1, "", "arg_min"], [998, 1, 1, "", "contains"], [999, 1, 1, "", "count_matches"], [1000, 1, 1, "", "explode"], [1001, 1, 1, "", "first"], [1002, 1, 1, "", "get"], [1003, 1, 1, "", "join"], [1004, 1, 1, "", "last"], [1005, 1, 1, "", "max"], [1006, 1, 1, "", "median"], [1007, 1, 1, "", "min"], [1008, 1, 1, "", "n_unique"], [1009, 1, 1, "", "reverse"], [1010, 1, 1, "", "shift"], [1011, 1, 1, "", "sort"], [1012, 1, 1, "", "std"], [1013, 1, 1, "", "sum"], [1014, 1, 1, "", "to_list"], [1015, 1, 1, "", "to_struct"], [1016, 1, 1, "", "unique"], [1017, 1, 1, "", "var"]], "polars.Series.bin": [[1019, 1, 1, "", "contains"], [1020, 1, 1, "", "decode"], [1021, 1, 1, "", "encode"], [1022, 1, 1, "", "ends_with"], [1023, 1, 1, "", "reinterpret"], [1024, 1, 1, "", "size"], [1025, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1038, 1, 1, "", "ends_with"], [1039, 1, 1, "", "get_categories"], [1040, 1, 1, "", "is_local"], [1041, 1, 1, "", "len_bytes"], [1042, 1, 1, "", "len_chars"], [1043, 1, 1, "", "starts_with"], [1044, 1, 1, "", "to_local"], [1045, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1068, 1, 1, "", "add_business_days"], [1069, 1, 1, "", "base_utc_offset"], [1070, 1, 1, "", "cast_time_unit"], [1071, 1, 1, "", "century"], [1072, 1, 1, "", "combine"], [1073, 1, 1, "", "convert_time_zone"], [1074, 1, 1, "", "date"], [1075, 1, 1, "", "datetime"], [1076, 1, 1, "", "day"], [1077, 1, 1, "", "dst_offset"], [1078, 1, 1, "", "epoch"], [1079, 1, 1, "", "hour"], [1080, 1, 1, "", "is_business_day"], [1081, 1, 1, "", "is_leap_year"], [1082, 1, 1, "", "iso_year"], [1083, 1, 1, "", "max"], [1084, 1, 1, "", "mean"], [1085, 1, 1, "", "median"], [1086, 1, 1, "", "microsecond"], [1087, 1, 1, "", "millennium"], [1088, 1, 1, "", "millisecond"], [1089, 1, 1, "", "min"], [1090, 1, 1, "", "minute"], [1091, 1, 1, "", "month"], [1092, 1, 1, "", "month_end"], [1093, 1, 1, "", "month_start"], [1094, 1, 1, "", "nanosecond"], [1095, 1, 1, "", "offset_by"], [1096, 1, 1, "", "ordinal_day"], [1097, 1, 1, "", "quarter"], [1098, 1, 1, "", "replace"], [1099, 1, 1, "", "replace_time_zone"], [1100, 1, 1, "", "round"], [1101, 1, 1, "", "second"], [1102, 1, 1, "", "strftime"], [1103, 1, 1, "", "time"], [1104, 1, 1, "", "timestamp"], [1105, 1, 1, "", "to_string"], [1106, 1, 1, "", "total_days"], [1107, 1, 1, "", "total_hours"], [1108, 1, 1, "", "total_microseconds"], [1109, 1, 1, "", "total_milliseconds"], [1110, 1, 1, "", "total_minutes"], [1111, 1, 1, "", "total_nanoseconds"], [1112, 1, 1, "", "total_seconds"], [1113, 1, 1, "", "truncate"], [1114, 1, 1, "", "week"], [1115, 1, 1, "", "weekday"], [1116, 1, 1, "", "with_time_unit"], [1117, 1, 1, "", "year"]], "polars.Series.list": [[1173, 1, 1, "", "all"], [1174, 1, 1, "", "any"], [1175, 1, 1, "", "arg_max"], [1176, 1, 1, "", "arg_min"], [1177, 1, 1, "", "concat"], [1178, 1, 1, "", "contains"], [1179, 1, 1, "", "count_matches"], [1180, 1, 1, "", "diff"], [1181, 1, 1, "", "drop_nulls"], [1182, 1, 1, "", "eval"], [1183, 1, 1, "", "explode"], [1184, 1, 1, "", "first"], [1185, 1, 1, "", "gather"], [1186, 1, 1, "", "gather_every"], [1187, 1, 1, "", "get"], [1188, 1, 1, "", "head"], [1189, 1, 1, "", "join"], [1190, 1, 1, "", "last"], [1191, 1, 1, "", "len"], [1192, 1, 1, "", "max"], [1193, 1, 1, "", "mean"], [1194, 1, 1, "", "median"], [1195, 1, 1, "", "min"], [1196, 1, 1, "", "n_unique"], [1197, 1, 1, "", "reverse"], [1198, 1, 1, "", "sample"], [1199, 1, 1, "", "set_difference"], [1200, 1, 1, "", "set_intersection"], [1201, 1, 1, "", "set_symmetric_difference"], [1202, 1, 1, "", "set_union"], [1203, 1, 1, "", "shift"], [1204, 1, 1, "", "slice"], [1205, 1, 1, "", "sort"], [1206, 1, 1, "", "std"], [1207, 1, 1, "", "sum"], [1208, 1, 1, "", "tail"], [1209, 1, 1, "", "to_array"], [1210, 1, 1, "", "to_struct"], [1211, 1, 1, "", "unique"], [1212, 1, 1, "", "var"]], "polars.Series.str": [[1283, 1, 1, "", "concat"], [1284, 1, 1, "", "contains"], [1285, 1, 1, "", "contains_any"], [1286, 1, 1, "", "count_matches"], [1287, 1, 1, "", "decode"], [1288, 1, 1, "", "encode"], [1289, 1, 1, "", "ends_with"], [1290, 1, 1, "", "escape_regex"], [1291, 1, 1, "", "explode"], [1292, 1, 1, "", "extract"], [1293, 1, 1, "", "extract_all"], [1294, 1, 1, "", "extract_groups"], [1295, 1, 1, "", "extract_many"], [1296, 1, 1, "", "find"], [1297, 1, 1, "", "find_many"], [1298, 1, 1, "", "head"], [1299, 1, 1, "", "join"], [1300, 1, 1, "", "json_decode"], [1301, 1, 1, "", "json_path_match"], [1302, 1, 1, "", "len_bytes"], [1303, 1, 1, "", "len_chars"], [1304, 1, 1, "", "normalize"], [1305, 1, 1, "", "pad_end"], [1306, 1, 1, "", "pad_start"], [1307, 1, 1, "", "replace"], [1308, 1, 1, "", "replace_all"], [1309, 1, 1, "", "replace_many"], [1310, 1, 1, "", "reverse"], [1311, 1, 1, "", "slice"], [1312, 1, 1, "", "split"], [1313, 1, 1, "", "split_exact"], [1314, 1, 1, "", "splitn"], [1315, 1, 1, "", "starts_with"], [1316, 1, 1, "", "strip_chars"], [1317, 1, 1, "", "strip_chars_end"], [1318, 1, 1, "", "strip_chars_start"], [1319, 1, 1, "", "strip_prefix"], [1320, 1, 1, "", "strip_suffix"], [1321, 1, 1, "", "strptime"], [1322, 1, 1, "", "tail"], [1323, 1, 1, "", "to_date"], [1324, 1, 1, "", "to_datetime"], [1325, 1, 1, "", "to_decimal"], [1326, 1, 1, "", "to_integer"], [1327, 1, 1, "", "to_lowercase"], [1328, 1, 1, "", "to_time"], [1329, 1, 1, "", "to_titlecase"], [1330, 1, 1, "", "to_uppercase"], [1331, 1, 1, "", "zfill"]], "polars.Series.struct": [[1332, 1, 1, "", "field"], [1333, 3, 1, "", "fields"], [1334, 1, 1, "", "json_encode"], [1335, 1, 1, "", "rename_fields"], [1336, 3, 1, "", "schema"], [1337, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.api": [[58, 4, 1, "", "register_dataframe_namespace"], [59, 4, 1, "", "register_expr_namespace"], [60, 4, 1, "", "register_lazyframe_namespace"], [61, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[196, 0, 1, "", "CatalogInfo"], [197, 0, 1, "", "ColumnInfo"], [198, 5, 1, "", "DataSourceFormat"], [199, 0, 1, "", "NamespaceInfo"], [200, 0, 1, "", "TableInfo"], [202, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[196, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[197, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[199, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[200, 1, 1, "", "__init__"], [201, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[332, 1, 1, "", "__iter__"], [333, 1, 1, "", "agg"], [334, 1, 1, "", "all"], [335, 1, 1, "", "count"], [336, 1, 1, "", "first"], [337, 1, 1, "", "head"], [338, 1, 1, "", "last"], [339, 1, 1, "", "len"], [340, 1, 1, "", "map_groups"], [341, 1, 1, "", "max"], [342, 1, 1, "", "mean"], [343, 1, 1, "", "median"], [344, 1, 1, "", "min"], [345, 1, 1, "", "n_unique"], [346, 1, 1, "", "quantile"], [347, 1, 1, "", "sum"], [348, 1, 1, "", "tail"]], "polars.datatypes": [[66, 0, 1, "", "Array"], [67, 0, 1, "", "Binary"], [68, 0, 1, "", "Boolean"], [69, 0, 1, "", "Categorical"], [70, 0, 1, "", "DataType"], [71, 0, 1, "", "Date"], [72, 0, 1, "", "Datetime"], [73, 0, 1, "", "Decimal"], [74, 0, 1, "", "Duration"], [75, 0, 1, "", "Enum"], [76, 0, 1, "", "Field"], [77, 0, 1, "", "Float32"], [78, 0, 1, "", "Float64"], [79, 0, 1, "", "Int128"], [80, 0, 1, "", "Int16"], [81, 0, 1, "", "Int32"], [82, 0, 1, "", "Int64"], [83, 0, 1, "", "Int8"], [84, 0, 1, "", "List"], [85, 0, 1, "", "Null"], [86, 0, 1, "", "Object"], [87, 0, 1, "", "String"], [88, 0, 1, "", "Struct"], [89, 0, 1, "", "Time"], [90, 0, 1, "", "UInt16"], [91, 0, 1, "", "UInt32"], [92, 0, 1, "", "UInt64"], [93, 0, 1, "", "UInt8"], [94, 0, 1, "", "Unknown"], [95, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[69, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[83, 1, 1, "", "__init__"]], "polars.datatypes.List": [[84, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[86, 1, 1, "", "__init__"]], "polars.datatypes.String": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[89, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[93, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[94, 1, 1, "", "__init__"]], "polars.exceptions": [[100, 6, 1, "", "CategoricalRemappingWarning"], [101, 6, 1, "", "ChronoFormatWarning"], [102, 6, 1, "", "ColumnNotFoundError"], [103, 6, 1, "", "ComputeError"], [104, 6, 1, "", "CustomUFuncWarning"], [105, 6, 1, "", "DataOrientationWarning"], [106, 6, 1, "", "DuplicateError"], [107, 6, 1, "", "InvalidOperationError"], [108, 6, 1, "", "MapWithoutReturnDtypeWarning"], [109, 6, 1, "", "ModuleUpgradeRequiredError"], [110, 6, 1, "", "NoDataError"], [111, 6, 1, "", "NoRowsReturnedError"], [112, 6, 1, "", "OutOfBoundsError"], [113, 6, 1, "", "PanicException"], [114, 6, 1, "", "ParameterCollisionError"], [115, 6, 1, "", "PerformanceWarning"], [116, 6, 1, "", "PolarsError"], [117, 6, 1, "", "PolarsInefficientMapWarning"], [118, 6, 1, "", "PolarsWarning"], [119, 6, 1, "", "RowsError"], [120, 6, 1, "", "SQLInterfaceError"], [121, 6, 1, "", "SQLSyntaxError"], [122, 6, 1, "", "SchemaError"], [123, 6, 1, "", "SchemaFieldNotFoundError"], [124, 6, 1, "", "ShapeError"], [125, 6, 1, "", "StringCacheMismatchError"], [126, 6, 1, "", "StructFieldNotFoundError"], [127, 6, 1, "", "TooManyRowsReturnedError"], [128, 6, 1, "", "UnstableWarning"], [129, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[140, 1, 1, "", "next_batches"]], "polars.io.parquet": [[141, 0, 1, "", "ParquetFieldOverwrites"]], "polars.io.parquet.ParquetFieldOverwrites": [[141, 1, 1, "", "__init__"]], "polars.io.partition": [[142, 0, 1, "", "BasePartitionContext"], [143, 0, 1, "", "KeyedPartition"], [144, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[142, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[143, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[144, 1, 1, "", "__init__"]], "polars.io.plugins": [[145, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[941, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[941, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[942, 1, 1, "", "agg"], [943, 1, 1, "", "all"], [944, 1, 1, "", "count"], [945, 1, 1, "", "first"], [946, 1, 1, "", "head"], [947, 1, 1, "", "last"], [948, 1, 1, "", "len"], [949, 1, 1, "", "map_groups"], [950, 1, 1, "", "max"], [951, 1, 1, "", "mean"], [952, 1, 1, "", "median"], [953, 1, 1, "", "min"], [954, 1, 1, "", "n_unique"], [955, 1, 1, "", "quantile"], [956, 1, 1, "", "sum"], [957, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[958, 1, 1, "", "cancel"], [959, 1, 1, "", "fetch"], [960, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[147, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[972, 4, 1, "", "all"], [972, 4, 1, "", "alpha"], [972, 4, 1, "", "alphanumeric"], [972, 4, 1, "", "binary"], [972, 4, 1, "", "boolean"], [972, 4, 1, "", "by_dtype"], [972, 4, 1, "", "by_index"], [972, 4, 1, "", "by_name"], [972, 4, 1, "", "categorical"], [972, 4, 1, "", "contains"], [972, 4, 1, "", "date"], [972, 4, 1, "", "datetime"], [972, 4, 1, "", "decimal"], [972, 4, 1, "", "digit"], [972, 4, 1, "", "duration"], [972, 4, 1, "", "ends_with"], [972, 4, 1, "", "exclude"], [972, 4, 1, "", "expand_selector"], [972, 4, 1, "", "first"], [972, 4, 1, "", "float"], [972, 4, 1, "", "integer"], [972, 4, 1, "", "is_selector"], [972, 4, 1, "", "last"], [972, 4, 1, "", "matches"], [972, 4, 1, "", "numeric"], [972, 4, 1, "", "signed_integer"], [972, 4, 1, "", "starts_with"], [972, 4, 1, "", "string"], [972, 4, 1, "", "temporal"], [972, 4, 1, "", "time"], [972, 4, 1, "", "unsigned_integer"]], "polars.testing": [[174, 4, 1, "", "assert_frame_equal"], [175, 4, 1, "", "assert_frame_not_equal"], [176, 4, 1, "", "assert_series_equal"], [177, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[178, 0, 1, "", "column"], [179, 4, 1, "", "columns"], [180, 4, 1, "", "create_list_strategy"], [181, 4, 1, "", "dataframes"], [182, 4, 1, "", "dtypes"], [183, 4, 1, "", "lists"], [184, 4, 1, "", "load_profile"], [185, 4, 1, "", "series"], [186, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[178, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 48, 55, 61, 66, 76, 88, 96, 99, 101, 107, 131, 138, 145, 150, 151, 152, 153, 155, 156, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 185, 211, 213, 214, 225, 226, 229, 234, 237, 242, 243, 248, 254, 257, 258, 269, 276, 278, 282, 284, 286, 289, 292, 293, 300, 309, 312, 317, 319, 320, 321, 322, 323, 328, 329, 354, 391, 424, 456, 461, 481, 484, 504, 510, 514, 527, 543, 564, 593, 594, 606, 615, 620, 627, 628, 635, 636, 647, 654, 656, 689, 693, 701, 702, 703, 705, 707, 716, 717, 720, 721, 723, 730, 731, 732, 733, 737, 741, 743, 745, 753, 762, 763, 764, 765, 770, 777, 780, 783, 784, 793, 794, 796, 797, 803, 808, 809, 810, 811, 813, 815, 816, 818, 825, 827, 829, 830, 831, 837, 843, 847, 864, 866, 877, 887, 888, 892, 893, 903, 911, 916, 917, 923, 928, 929, 930, 931, 932, 935, 936, 949, 966, 971, 972, 976, 977, 978, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1076, 1077, 1078, 1080, 1081, 1083, 1084, 1085, 1087, 1088, 1089, 1092, 1093, 1096, 1098, 1100, 1101, 1102, 1105, 1113, 1115, 1116, 1117, 1118, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1144, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1291, 1292, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1368, 1373, 1377, 1381, 1384, 1391, 1392], "0": [1, 7, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 51, 52, 57, 58, 59, 61, 63, 65, 66, 73, 84, 96, 132, 138, 146, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 227, 228, 232, 233, 234, 236, 237, 240, 241, 242, 243, 244, 248, 249, 253, 255, 256, 257, 260, 262, 263, 265, 266, 267, 268, 269, 272, 273, 274, 275, 278, 279, 280, 282, 284, 286, 288, 289, 290, 291, 292, 299, 300, 301, 302, 304, 309, 310, 311, 312, 313, 314, 316, 317, 318, 322, 324, 325, 328, 330, 331, 333, 335, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 354, 357, 358, 362, 364, 365, 367, 371, 372, 373, 374, 375, 376, 379, 380, 381, 384, 385, 387, 390, 400, 403, 405, 412, 414, 419, 422, 424, 425, 431, 432, 433, 434, 435, 436, 443, 444, 445, 449, 450, 451, 457, 458, 462, 466, 468, 469, 473, 477, 480, 482, 484, 487, 488, 490, 491, 495, 498, 499, 500, 501, 502, 503, 505, 507, 508, 509, 510, 513, 514, 516, 518, 519, 521, 523, 525, 529, 530, 533, 536, 538, 539, 540, 541, 543, 545, 550, 551, 554, 557, 560, 561, 562, 568, 569, 581, 585, 587, 588, 589, 590, 592, 593, 595, 596, 597, 601, 606, 609, 612, 613, 614, 616, 618, 627, 628, 629, 630, 631, 633, 634, 636, 639, 640, 642, 643, 644, 645, 649, 650, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 684, 685, 686, 690, 691, 692, 695, 700, 701, 702, 705, 706, 734, 745, 746, 747, 749, 750, 751, 753, 754, 758, 759, 760, 762, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 779, 781, 788, 792, 795, 801, 802, 804, 805, 806, 809, 812, 813, 814, 818, 820, 821, 823, 824, 825, 826, 833, 834, 835, 836, 837, 838, 843, 847, 863, 864, 866, 867, 868, 869, 871, 873, 874, 876, 877, 879, 880, 882, 883, 884, 886, 887, 888, 891, 892, 896, 898, 899, 902, 903, 906, 908, 909, 911, 914, 915, 916, 921, 923, 924, 925, 928, 933, 935, 937, 938, 939, 942, 944, 945, 947, 949, 950, 951, 952, 953, 954, 955, 956, 966, 971, 972, 976, 983, 984, 985, 986, 987, 988, 989, 991, 993, 996, 1002, 1012, 1015, 1017, 1024, 1037, 1044, 1046, 1047, 1049, 1052, 1053, 1054, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1075, 1079, 1084, 1085, 1086, 1088, 1090, 1094, 1098, 1101, 1105, 1108, 1109, 1111, 1112, 1116, 1119, 1122, 1124, 1125, 1126, 1127, 1132, 1137, 1140, 1145, 1146, 1148, 1151, 1152, 1156, 1159, 1161, 1162, 1163, 1164, 1167, 1168, 1175, 1176, 1179, 1182, 1185, 1186, 1187, 1193, 1194, 1206, 1210, 1212, 1213, 1214, 1215, 1216, 1220, 1221, 1227, 1228, 1234, 1237, 1239, 1240, 1241, 1246, 1247, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1275, 1276, 1277, 1278, 1281, 1282, 1283, 1286, 1291, 1292, 1293, 1296, 1297, 1301, 1307, 1325, 1340, 1341, 1343, 1346, 1348, 1349, 1350, 1351, 1356, 1357, 1358, 1368, 1373, 1377, 1383, 1385, 1386, 1387, 1390, 1391, 1393, 1394, 1396, 1398, 1399], "00": [28, 41, 72, 214, 221, 243, 324, 354, 452, 453, 456, 460, 471, 472, 474, 478, 479, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 659, 661, 663, 665, 667, 670, 672, 674, 730, 733, 737, 788, 789, 790, 791, 805, 833, 834, 835, 847, 866, 874, 888, 966, 972, 1069, 1070, 1073, 1074, 1075, 1077, 1078, 1079, 1085, 1086, 1090, 1092, 1093, 1094, 1095, 1099, 1100, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1307, 1321, 1324, 1328, 1391], "000": [9, 11, 28, 41, 53, 354, 1307, 1399], "0000": [316, 354, 1351, 1368, 1399], "000000": [408, 409, 484, 696, 1020, 1021, 1287], "00000001": [12, 761, 847], "00000010": [761, 847], "00000011": [761, 847], "00000100": [761, 847], "00001000": [761, 847], "00001010": [761, 847], "00001011": [761, 847], "0000e": 12, "0000ff": [408, 409, 696, 1020, 1021, 1287], "0001": 484, "000100": 484, "000101": 484, "0005": 972, "00050": 972, "000800": 1105, "001": [59, 740, 791, 1108, 1109, 1111, 1331], "002": [791, 1108, 1109, 1111], "005": [1119, 1368], "00prefix": 972, "00z": [730, 733, 1321, 1324], "01": [29, 57, 71, 72, 181, 214, 221, 241, 243, 258, 286, 324, 354, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 730, 732, 733, 737, 772, 785, 786, 787, 788, 789, 790, 791, 805, 847, 866, 874, 888, 893, 914, 966, 972, 1068, 1070, 1072, 1073, 1074, 1075, 1078, 1079, 1085, 1086, 1090, 1092, 1093, 1094, 1095, 1098, 1099, 1100, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1321, 1323, 1324, 1328, 1391, 1394], "010": [9, 735, 1326], "01000": 29, "01000010": [761, 847], "01000110": [761, 847], "012": [676, 713, 847, 1264, 1304, 1368], "0123": [740, 1331], "01234": [676, 847, 1264, 1368], "012345": 1105, "015625": [1237, 1368], "01\u00b2": [713, 1304], "02": [57, 214, 221, 241, 243, 286, 324, 354, 451, 453, 455, 461, 471, 472, 474, 478, 483, 484, 486, 489, 491, 495, 655, 659, 661, 663, 665, 667, 670, 672, 674, 675, 730, 732, 733, 737, 772, 785, 786, 787, 788, 789, 790, 791, 805, 847, 866, 874, 888, 914, 966, 972, 1015, 1070, 1072, 1074, 1075, 1078, 1079, 1085, 1086, 1090, 1092, 1093, 1094, 1098, 1099, 1100, 1103, 1104, 1107, 1110, 1112, 1113, 1210, 1321, 1323, 1324, 1328, 1391, 1392], "03": [57, 138, 150, 214, 243, 258, 286, 324, 354, 453, 455, 456, 461, 463, 471, 472, 474, 477, 478, 479, 481, 483, 484, 485, 486, 489, 491, 492, 495, 501, 514, 655, 659, 661, 663, 665, 667, 670, 672, 674, 732, 737, 785, 786, 787, 788, 789, 790, 791, 847, 866, 888, 893, 914, 966, 972, 1070, 1072, 1073, 1078, 1079, 1085, 1086, 1092, 1093, 1094, 1099, 1100, 1102, 1104, 1106, 1107, 1110, 1112, 1323, 1328], "037037": [1237, 1368], "04": [171, 214, 221, 243, 324, 354, 455, 456, 471, 472, 477, 478, 479, 481, 485, 486, 489, 491, 495, 659, 661, 663, 665, 667, 670, 672, 674, 730, 772, 785, 788, 789, 791, 847, 866, 874, 888, 966, 972, 1073, 1086, 1090, 1092, 1093, 1094, 1099, 1102, 1106, 1107, 1110, 1112, 1116, 1321, 1391], "047198": 1393, "05": [17, 171, 174, 175, 176, 177, 181, 214, 221, 324, 354, 451, 454, 455, 456, 457, 458, 462, 463, 466, 467, 468, 469, 471, 472, 473, 478, 480, 481, 482, 484, 485, 772, 785, 786, 788, 789, 866, 874, 966, 972, 1072, 1073, 1074, 1075, 1099, 1100, 1102, 1103, 1105, 1106, 1113, 1391, 1392, 1394], "050545": 138, "0522623626787952": [1168, 1368], "0545": [1074, 1075, 1103], "05t10": 1105, "06": [181, 214, 324, 354, 451, 455, 470, 476, 478, 479, 480, 492, 493, 785, 788, 805, 866, 966, 972, 1068, 1099, 1100, 1105, 1113], "060": [457, 458, 462, 466, 468, 469, 473, 480, 482], "0601749420166": [229, 354], "06293300616044681": [1119, 1368], "07": [17, 150, 181, 221, 354, 451, 454, 455, 467, 478, 479, 484, 492, 730, 785, 786, 788, 789, 797, 874, 966, 972, 1068, 1072, 1099, 1105, 1321, 1391, 1394], "071068": [221, 354, 874, 966], "08": [150, 174, 175, 176, 177, 221, 258, 286, 301, 354, 451, 455, 471, 472, 479, 484, 655, 730, 789, 791, 805, 847, 874, 893, 914, 966, 972, 1068, 1100, 1113, 1321, 1391, 1392], "085537": [1128, 1368], "09": [57, 150, 221, 286, 354, 451, 455, 471, 472, 484, 635, 655, 734, 785, 786, 788, 835, 847, 874, 914, 966, 972, 1068, 1325], "090909": [636, 847], "094395": 1393, "098612": [590, 847, 1213, 1215, 1368, 1390], "0999": [454, 467], "0_": [41, 354], "0m": [460, 1077], "0x11bc0ad80": 971, "0\u00b5": 484, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 52, 57, 58, 59, 60, 61, 63, 65, 66, 84, 88, 96, 102, 105, 106, 107, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 151, 154, 155, 156, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 181, 185, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 412, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 602, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 716, 717, 718, 722, 723, 724, 725, 726, 727, 734, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 843, 847, 862, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 966, 972, 976, 977, 978, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1024, 1035, 1036, 1037, 1041, 1042, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1171, 1172, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1292, 1294, 1295, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1307, 1308, 1309, 1313, 1314, 1325, 1331, 1332, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1368, 1373, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 57, 65, 138, 150, 151, 153, 165, 173, 211, 216, 221, 225, 231, 240, 241, 243, 245, 247, 248, 249, 254, 258, 261, 273, 277, 279, 284, 286, 292, 301, 305, 328, 333, 336, 338, 341, 342, 343, 344, 345, 346, 347, 354, 365, 369, 377, 378, 379, 381, 433, 439, 442, 447, 451, 452, 454, 455, 457, 458, 460, 462, 466, 467, 468, 469, 471, 472, 473, 477, 478, 479, 480, 482, 484, 492, 495, 501, 522, 523, 524, 529, 535, 547, 555, 561, 563, 569, 579, 581, 583, 587, 589, 605, 607, 618, 633, 635, 636, 639, 649, 650, 655, 687, 735, 745, 748, 761, 772, 773, 781, 786, 788, 789, 792, 795, 797, 799, 807, 808, 832, 835, 847, 869, 870, 874, 877, 888, 889, 891, 893, 897, 907, 908, 914, 916, 926, 927, 935, 942, 945, 947, 950, 951, 952, 953, 954, 955, 956, 966, 972, 1050, 1064, 1068, 1069, 1071, 1072, 1077, 1087, 1099, 1105, 1113, 1116, 1119, 1125, 1147, 1158, 1172, 1180, 1188, 1194, 1204, 1206, 1208, 1212, 1214, 1218, 1234, 1247, 1266, 1268, 1326, 1339, 1346, 1348, 1351, 1368, 1377, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1394, 1399], "100": [11, 18, 28, 41, 53, 134, 137, 146, 150, 151, 152, 155, 159, 160, 161, 165, 169, 211, 259, 278, 297, 354, 484, 649, 650, 680, 694, 704, 706, 709, 718, 734, 790, 847, 894, 920, 966, 972, 1121, 1214, 1230, 1246, 1247, 1254, 1255, 1257, 1271, 1285, 1297, 1300, 1309, 1325, 1368, 1388, 1399], "1000": [152, 229, 310, 331, 354, 370, 847, 939, 966, 1108, 1214, 1345, 1368, 1399], "10000": [150, 256, 354], "100000": [11, 28], "1000000": [12, 1111], "1001": [331, 354, 939, 966], "1002": [331, 354, 939, 966], "10047419486152048166": [244, 354], "1005": [370, 847], "100_000": [53, 825, 898, 966], "100\u00b5": 484, "101": [9, 28, 259, 354, 455, 484, 735, 894, 966, 972, 1326, 1399], "101000": 455, "10101": [28, 1394], "1010101": 9, "101514": [221, 354, 874, 966], "102": [259, 354, 894, 966], "1024": [38, 47, 48, 51, 150, 151, 152, 160, 169, 354, 412, 966, 1024], "1040361802642717": [1168, 1368], "107149": 1393, "10734580197236529959": [1146, 1368], "1073741824": [681, 847], "10783150408545073287": [244, 354], "107_930_000": 1377, "10_000": [41, 354], "10i": [243, 354, 888, 966], "10m": [479, 492, 1100, 1113], "10t00": 484, "11": [11, 17, 47, 51, 173, 181, 212, 221, 258, 286, 354, 365, 471, 472, 474, 479, 492, 516, 529, 561, 612, 636, 645, 655, 657, 671, 687, 761, 805, 830, 835, 843, 847, 863, 869, 870, 874, 889, 893, 897, 908, 914, 927, 966, 972, 1095, 1100, 1113, 1218, 1253, 1368, 1386], "110": [225, 354, 718, 735, 877, 966, 1326], "1101441246220388612": [523, 847], "111": [11, 1388], "11111": 1101, "111110": 1101, "11111001": [761, 847], "11111010": [761, 847], "11111111": 11, "112": [681, 847, 1399], "11330": 180, "1152921504606846976": [1243, 1368], "116": 180, "11638928888656214026": [523, 847], "118034": [925, 966], "11aa": 1391, "11aabb": 1391, "11h": [452, 1069], "12": [27, 41, 57, 138, 150, 173, 181, 221, 243, 254, 258, 259, 286, 301, 324, 354, 365, 441, 451, 452, 454, 455, 459, 467, 470, 471, 472, 474, 475, 476, 477, 479, 484, 492, 493, 494, 501, 529, 561, 593, 609, 636, 644, 655, 671, 681, 695, 716, 734, 782, 785, 788, 789, 790, 805, 808, 833, 834, 835, 847, 874, 888, 889, 893, 894, 897, 914, 921, 927, 966, 972, 1069, 1071, 1072, 1084, 1085, 1087, 1091, 1098, 1100, 1105, 1113, 1125, 1218, 1263, 1286, 1308, 1325, 1368, 1390, 1391, 1392, 1394, 1396, 1399], "120": [259, 354, 791, 894, 966, 1393], "1200": [676, 847], "120134": [734, 1325], "121": 1399, "123": [9, 602, 695, 702, 717, 740, 837, 972, 1286, 1293, 1331, 1344, 1368], "123000": 972, "1232e": [1052, 1054, 1368], "1234": [28, 676, 847], "12345": [797, 1047, 1105, 1137, 1263, 1368], "1234500": 972, "123456": [9, 972], "1234567": 28, "123456780": 138, "12346": 797, "123465": 972, "123a123": 717, "123abc": [716, 1307, 1308], "125": [1, 41, 61, 354, 363, 640, 826, 847, 924, 966, 1234, 1237, 1368], "1252": 150, "127": [1356, 1368, 1387], "128": [59, 73, 79, 1234, 1368], "129": [681, 847], "13": [141, 215, 216, 221, 232, 233, 240, 259, 260, 273, 286, 328, 336, 338, 341, 342, 343, 344, 345, 346, 347, 354, 365, 451, 457, 458, 462, 466, 468, 469, 473, 480, 482, 605, 607, 655, 734, 775, 781, 784, 788, 795, 831, 833, 836, 847, 867, 868, 874, 882, 883, 894, 896, 914, 935, 945, 947, 950, 951, 952, 953, 954, 955, 956, 966, 1068, 1100, 1113, 1114, 1218, 1325, 1368, 1387], "130": [259, 354, 894, 966], "13382926553367784577": [523, 847], "134821952": 1377, "134_821_952": 1377, "135": [769, 1393], "13614470193936745724": [523, 847], "13756996518000038261": [1146, 1368], "13d": 484, "13h": [452, 1069], "14": [40, 173, 221, 243, 259, 262, 286, 324, 336, 338, 341, 342, 343, 344, 345, 346, 347, 354, 452, 457, 458, 462, 466, 468, 469, 473, 480, 482, 484, 529, 602, 645, 788, 833, 834, 847, 874, 888, 894, 914, 945, 947, 950, 951, 952, 953, 954, 955, 956, 966, 972, 1069, 1100, 1105], "140": [259, 354, 894, 966], "141592653589793": 11, "141593": [644, 847, 983, 1368, 1390, 1393], "142857": [1234, 1368], "143": [734, 1325, 1399], "1433": [39, 354], "1436e16": 181, "1438741209321515184": [244, 354], "1440": [489, 1110], "1443e235": 1399, "149": 1399, "14d": 972, "14h": 484, "15": [11, 41, 141, 173, 221, 243, 259, 262, 286, 354, 443, 447, 472, 477, 479, 484, 492, 501, 639, 655, 671, 713, 782, 788, 833, 834, 847, 874, 888, 894, 914, 966, 972, 1061, 1064, 1100, 1105, 1113, 1125, 1304, 1368, 1387, 1391], "150": [259, 354, 894, 966, 1255, 1368], "1500": [173, 184], "15000": [256, 354], "153061": [543, 847], "155": 146, "15836": 181, "15_000": [256, 354], "16": [1, 41, 59, 80, 90, 173, 187, 221, 243, 259, 286, 328, 354, 439, 442, 477, 484, 529, 609, 616, 635, 640, 655, 735, 745, 781, 791, 792, 795, 805, 847, 874, 888, 894, 914, 921, 935, 966, 972, 1100, 1113, 1234, 1276, 1326, 1340, 1368, 1387, 1390, 1391, 1396], "160": [259, 354, 894, 966], "165": [1100, 1113], "1656e15": [1054, 1368], "166667": [758, 847, 1234, 1357, 1368], "1666683077": 797, "1666683099": 797, "167": 57, "16996": 1399, "16h": 972, "17": [138, 173, 181, 229, 258, 333, 354, 501, 527, 635, 657, 675, 777, 797, 834, 847, 893, 942, 966, 1052, 1054, 1100, 1125, 1150, 1253, 1368, 1399], "170": [146, 259, 354, 894, 966], "17293822569102704640": [1243, 1368], "174": 1399, "175201": [685, 847, 1277, 1368], "1755e": [178, 181], "1764": 61, "17888890": [229, 354], "179": 1399, "17_500": [256, 354], "18": [39, 138, 155, 221, 270, 286, 354, 442, 479, 492, 495, 529, 618, 635, 655, 745, 847, 874, 904, 908, 914, 966, 972, 1105, 1116, 1385, 1396], "180": [146, 445, 644, 847, 1393], "1800": [477, 1098], "1844": 181, "18446744073709551614": [1243, 1368], "185_000_000": 1377, "186": 1399, "1875": [673, 847, 933, 966], "1897": [454, 467, 1071, 1087], "18d": 972, "19": [181, 258, 286, 354, 454, 479, 655, 661, 663, 665, 667, 734, 847, 893, 914, 966, 1071, 1100, 1113, 1325], "1920": 1391, "196": 1392, "1964": [908, 966], "1969": [1391, 1392], "1970": [71, 72, 171, 492, 1113, 1377], "1972": 1377, "1976": [465, 496], "1977": [465, 496], "1978": [457, 458, 462, 465, 466, 468, 469, 473, 480, 482, 496, 1392], "1979": [465, 496], "1980": 484, "1985": [786, 789], "1990": [150, 1377], "1993": 1377, "1994": 1377, "1995": 150, "1998": [474, 1095], "1999": [301, 354, 474, 484, 972, 1095, 1105, 1394], "199992": [898, 966], "199994": [898, 966], "199996": [898, 966], "199998": [898, 966], "1_000_000": [229, 354, 1123, 1368], "1_234_500": 972, "1d": [243, 258, 286, 324, 354, 453, 474, 479, 484, 486, 489, 492, 495, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 791, 807, 834, 835, 847, 888, 893, 914, 966, 972, 1070, 1078, 1085, 1095, 1100, 1104, 1107, 1110, 1113, 1125, 1368], "1e": [12, 174, 175, 176, 177], "1e6": 12, "1h": [243, 258, 286, 324, 354, 460, 474, 479, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1077, 1079, 1095, 1100, 1113, 1125, 1368], "1i": [243, 286, 324, 354, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 847, 888, 914, 966, 1125, 1368], "1m": [243, 258, 286, 324, 354, 474, 479, 491, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1108, 1109, 1111, 1112, 1113, 1125, 1368], "1mo": [243, 258, 286, 324, 354, 456, 471, 472, 474, 478, 479, 485, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1073, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1100, 1106, 1113, 1114, 1125, 1368], "1n": [243, 258, 286, 324, 354, 474, 479, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1113, 1125, 1368], "1q": [243, 258, 286, 324, 354, 474, 479, 492, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1113], "1st_col": 972, "1u": [243, 258, 286, 324, 354, 474, 479, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1113, 1125, 1368], "1w": [243, 258, 286, 324, 354, 474, 479, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1113, 1125, 1368], "1w2d": [786, 787], "1y": [243, 258, 286, 324, 354, 474, 479, 492, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1113], "1y2mo": [474, 1095], "1zy3": [695, 1286], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 65, 66, 84, 88, 102, 105, 107, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 153, 159, 160, 162, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 195, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 358, 362, 363, 364, 365, 367, 369, 370, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 411, 412, 414, 419, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 451, 452, 454, 455, 456, 457, 458, 459, 460, 463, 464, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 609, 610, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 821, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 843, 847, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 966, 971, 972, 976, 977, 978, 981, 984, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1023, 1024, 1035, 1036, 1042, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1068, 1069, 1072, 1074, 1075, 1077, 1079, 1080, 1083, 1084, 1085, 1087, 1089, 1090, 1091, 1092, 1093, 1097, 1098, 1099, 1100, 1103, 1113, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1171, 1172, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1286, 1292, 1294, 1296, 1297, 1298, 1300, 1301, 1303, 1304, 1307, 1308, 1313, 1314, 1316, 1317, 1318, 1321, 1322, 1324, 1325, 1326, 1327, 1330, 1332, 1334, 1335, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1368, 1373, 1377, 1378, 1380, 1381, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399], "20": [39, 40, 41, 66, 138, 150, 151, 155, 156, 158, 162, 165, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 188, 211, 212, 221, 225, 231, 243, 247, 270, 277, 279, 284, 286, 301, 311, 312, 316, 324, 330, 335, 354, 377, 378, 379, 433, 447, 454, 457, 458, 462, 466, 467, 468, 469, 473, 479, 480, 482, 484, 492, 495, 516, 523, 529, 593, 601, 612, 639, 659, 661, 663, 665, 667, 670, 672, 674, 700, 734, 745, 760, 788, 797, 807, 826, 834, 847, 863, 874, 877, 880, 888, 904, 907, 914, 924, 938, 944, 966, 972, 1064, 1071, 1075, 1087, 1100, 1105, 1113, 1116, 1122, 1128, 1145, 1246, 1291, 1325, 1346, 1348, 1351, 1368, 1384, 1385, 1388, 1394, 1396], "200": [487, 488, 490, 649, 650, 847, 972, 1121, 1230, 1246, 1247, 1254, 1255, 1257, 1368, 1388], "2000": [454, 464, 467, 471, 472, 474, 972, 1071, 1081, 1087, 1092, 1093, 1095, 1101, 1377, 1391], "200000": [487, 898, 966], "200000000": 490, "2001": [17, 453, 454, 459, 461, 464, 467, 470, 474, 475, 476, 479, 483, 492, 493, 494, 495, 659, 661, 663, 665, 667, 670, 672, 674, 730, 847, 972, 1070, 1071, 1076, 1078, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1094, 1095, 1096, 1097, 1100, 1104, 1113, 1114, 1115, 1116, 1117, 1321], "2002": [150, 464, 474, 1081, 1095, 1117], "2003": [474, 797, 1095], "2004": [474, 1095], "2005": [474, 1095], "2006": [474, 1095], "2008": 1377, "200m": [487, 488, 490], "2010": [301, 354, 484, 972], "2011": [452, 1069], "2012": [452, 1069, 1394], "2013": 1098, "2016": [258, 354, 893, 966], "2017": [258, 354, 893, 966], "2018": [258, 354, 478, 893, 966, 1099], "2019": [258, 354, 893, 966], "202": 1392, "2020": [154, 166, 214, 221, 241, 258, 286, 354, 357, 451, 456, 460, 463, 478, 481, 484, 485, 486, 487, 488, 489, 490, 491, 501, 655, 730, 732, 733, 772, 847, 866, 874, 893, 914, 966, 972, 1068, 1073, 1077, 1080, 1099, 1102, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1125, 1321, 1323, 1324, 1368, 1392], "2021": [214, 221, 241, 243, 324, 354, 730, 807, 866, 874, 888, 966, 972, 1074, 1075, 1082, 1103, 1321, 1391], "2022": [57, 214, 221, 241, 354, 455, 479, 492, 730, 786, 787, 789, 790, 791, 797, 866, 874, 966, 972, 1072, 1082, 1100, 1113, 1321], "2023": [17, 41, 138, 173, 256, 354, 455, 791, 807, 972, 1072], "2024": [173, 451, 457, 458, 462, 463, 466, 468, 469, 473, 477, 480, 482, 635, 772, 785, 786, 788, 789, 791, 847, 972, 1068, 1080, 1098, 1391, 1394], "2025": [451, 463, 477, 772, 805, 972, 1068, 1080], "2026": 1392, "2030": 1391, "2031": 972, "2040": 484, "2047317070637311557": [244, 354], "2055938745": 138, "2065": [457, 458, 462, 466, 468, 469, 473, 480, 482], "2068": 181, "207": 1392, "2077": [301, 354, 484, 972, 1105, 1391, 1392], "2095": 181, "20_000": [41, 354], "20t08": 484, "20t18": 1105, "20word": 153, "21": [173, 221, 270, 303, 354, 443, 454, 500, 502, 503, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 788, 797, 805, 823, 824, 847, 874, 904, 966, 972, 1061, 1071, 1124, 1126, 1127, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1368, 1385], "213": 1399, "2147483647": 1399, "2147483648": [1216, 1368], "21d": 972, "22": [47, 51, 173, 181, 354, 459, 475, 479, 492, 494, 495, 657, 659, 661, 663, 665, 667, 670, 672, 674, 730, 788, 843, 847, 966, 972, 1100, 1113, 1116, 1253, 1321, 1368, 1391, 1392, 1399], "221": 1399, "2246e": [1276, 1340, 1368], "225": [479, 492, 1393], "22500": 825, "22_000_000": 1377, "22_500": 825, "23": [11, 132, 181, 221, 243, 286, 316, 354, 455, 459, 462, 475, 477, 479, 484, 494, 655, 659, 661, 663, 665, 667, 670, 672, 674, 788, 791, 833, 834, 835, 847, 874, 888, 914, 924, 966, 972, 1072, 1079, 1098, 1351, 1368, 1398, 1399], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1377, "2337": [41, 354], "234": 28, "2345": 972, "23456789": 11, "235": 1399, "23h": 972, "24": [59, 173, 243, 257, 258, 262, 286, 301, 324, 354, 441, 443, 459, 474, 475, 479, 486, 492, 494, 616, 655, 659, 661, 663, 665, 667, 670, 672, 674, 713, 786, 787, 789, 790, 791, 834, 835, 847, 888, 892, 893, 914, 966, 1061, 1095, 1100, 1107, 1113, 1167, 1342, 1368, 1391, 1398], "24030": 180, "249": [761, 847], "25": [1, 28, 41, 61, 138, 221, 225, 243, 248, 258, 286, 311, 316, 324, 328, 354, 412, 447, 459, 460, 475, 479, 484, 492, 494, 501, 640, 642, 645, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 754, 788, 789, 790, 791, 797, 805, 806, 809, 834, 835, 847, 874, 877, 888, 893, 901, 914, 933, 935, 966, 972, 1024, 1063, 1064, 1077, 1100, 1105, 1113, 1119, 1125, 1148, 1234, 1239, 1307, 1368, 1385, 1390, 1396, 1397], "250": [761, 847, 1255, 1368, 1388, 1399], "2500": [256, 316, 354], "254508": [501, 847, 1125, 1368], "255": 1399, "256": [262, 354, 412, 1024, 1234, 1368, 1390], "2560": 1024, "259921": [431, 847, 1046, 1368, 1390], "25_000_000": 1377, "26": [39, 41, 173, 178, 179, 180, 181, 185, 221, 354, 460, 493, 874, 966, 1077], "266667": [221, 354, 874, 966], "27": [1, 61, 311, 347, 354, 442, 470, 476, 493, 745, 772, 847, 956, 972, 1068, 1237, 1346, 1368, 1398, 1399], "270": 1393, "28": [307, 312, 354, 363, 478, 495, 847, 1099, 1116, 1348, 1368, 1391, 1393, 1398, 1399], "283185": [644, 847], "2846": 354, "285714": [530, 847, 1152, 1368], "289962": 1393, "28_341_469": 1377, "29": [17, 173, 452, 471, 1069, 1092], "29096": 1399, "290994": [925, 966], "292432": [984, 1368], "292893": [501, 847, 1125, 1368], "2_color_scal": [41, 354], "2d": [211, 286, 311, 312, 354, 474, 655, 807, 847, 914, 966, 1069, 1076], "2h": [659, 661, 663, 665, 667, 670, 672, 674, 847], "2i": [243, 354, 888, 966], "2m": [972, 1090], "2x": 180, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 57, 58, 59, 60, 61, 65, 66, 84, 96, 102, 105, 107, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 153, 155, 159, 160, 161, 165, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 185, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 358, 363, 364, 365, 366, 368, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 614, 615, 616, 617, 618, 619, 621, 623, 625, 626, 629, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 686, 688, 689, 690, 693, 694, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 731, 732, 737, 738, 741, 742, 743, 744, 745, 746, 748, 752, 753, 756, 757, 758, 760, 761, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 843, 847, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 943, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 966, 971, 972, 977, 978, 981, 983, 985, 986, 987, 989, 990, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1072, 1073, 1076, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1087, 1089, 1090, 1091, 1096, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1108, 1109, 1111, 1113, 1115, 1116, 1118, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1171, 1172, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1285, 1287, 1288, 1289, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1302, 1303, 1307, 1308, 1309, 1310, 1311, 1315, 1322, 1323, 1328, 1329, 1332, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1347, 1348, 1349, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1368, 1373, 1377, 1378, 1380, 1381, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399], "30": [41, 63, 211, 221, 231, 243, 247, 277, 284, 307, 328, 354, 357, 377, 378, 379, 447, 455, 457, 458, 462, 466, 468, 469, 470, 471, 473, 476, 478, 479, 480, 482, 484, 485, 492, 493, 523, 601, 681, 788, 805, 807, 833, 834, 847, 869, 874, 880, 888, 907, 908, 921, 935, 966, 972, 1064, 1072, 1092, 1099, 1100, 1105, 1106, 1113, 1145, 1368, 1373, 1384, 1385, 1388, 1390, 1391, 1393, 1394, 1397, 1399], "300": [307, 354, 522, 633, 650, 847, 972, 1247, 1254, 1255, 1257, 1368, 1388], "3000": 972, "3002": [454, 467, 1071, 1087], "30103": [589, 847, 1390], "3022416320763508302": [1146, 1368], "30_000": [41, 354], "30m": [243, 354, 479, 492, 888, 966, 1100, 1113], "30t16": 484, "31": [61, 66, 150, 151, 165, 174, 175, 176, 177, 221, 301, 354, 454, 455, 459, 467, 471, 474, 477, 485, 700, 730, 785, 788, 797, 807, 826, 874, 966, 972, 1069, 1071, 1072, 1076, 1087, 1092, 1098, 1105, 1106, 1122, 1246, 1291, 1321, 1368, 1392, 1394, 1396, 1399], "31t06": 1105, "32": [59, 71, 77, 81, 91, 253, 258, 286, 354, 616, 655, 681, 847, 893, 914, 966, 1065, 1096, 1234, 1258, 1368, 1385, 1391], "321": [28, 1399], "3212": [734, 1325], "321cba": 1391, "3265500": 972, "32971": [495, 1116], "32974": [495, 1116], "32976": [495, 1116], "32bit": [311, 354], "33": [221, 270, 354, 675, 847, 874, 904, 966, 1258, 1368, 1392], "333": [17, 676, 847, 1121, 1230, 1264, 1368], "33333": 1394, "333333": [249, 354, 618, 758, 805, 847, 891, 966, 1234, 1262, 1357, 1368, 1385], "34": [221, 354, 716, 730, 874, 966, 1308, 1321], "3420": [734, 1325], "343622": [686, 847], "345": [428, 429, 711, 712, 1041, 1042, 1302, 1303], "3450": [1264, 1368], "3456": 972, "34776706224699483": [1278, 1368], "35": [41, 354, 447, 484, 788, 847, 1064, 1368], "350": [354, 357, 522, 633, 847, 1255, 1368, 1373], "3500": [1264, 1368], "356": [459, 475, 494], "356194": [768, 769, 1393], "357": [459, 475, 494], "358": [459, 475, 494], "359": [459, 475, 494], "36": [221, 354, 874, 966, 1396], "360": [445, 644, 847, 1393], "361": 1399, "363961": [581, 1206], "366": [475, 1096], "37": [13, 141, 972], "370h": [501, 847, 1125, 1368], "37338": 1399, "38": [41, 138, 178, 181, 354], "38180177416060584": [668, 847, 1259, 1368], "381802": [668, 847, 1259, 1368], "386294": [590, 847, 1215, 1368, 1390], "389056": [505, 847, 1128, 1368, 1390], "39": [672, 797, 847], "39m": 972, "3_color_scal": [41, 354], "3d12h4m25": [243, 258, 286, 324, 354, 479, 492, 501, 655, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1100, 1113, 1125, 1368], "3f": [153, 730, 733, 1321, 1324], "3i": [243, 286, 354, 888, 966], "3rd": [1298, 1322], "3xy": [695, 1286], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 57, 58, 59, 60, 61, 65, 66, 84, 105, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 151, 156, 158, 162, 165, 168, 169, 170, 173, 185, 209, 210, 211, 212, 213, 214, 215, 216, 220, 222, 226, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 273, 274, 276, 277, 278, 279, 282, 286, 288, 289, 296, 297, 300, 304, 305, 306, 307, 308, 309, 312, 315, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 358, 362, 363, 364, 365, 367, 369, 381, 388, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 405, 412, 423, 424, 425, 428, 429, 431, 432, 433, 437, 438, 441, 442, 443, 445, 448, 455, 458, 459, 467, 475, 476, 477, 478, 479, 480, 481, 484, 486, 489, 491, 492, 494, 498, 499, 501, 505, 506, 508, 509, 510, 512, 513, 514, 517, 518, 519, 520, 521, 524, 526, 528, 529, 530, 531, 540, 541, 545, 546, 547, 554, 555, 556, 557, 558, 560, 561, 563, 571, 573, 574, 575, 576, 577, 578, 579, 583, 584, 589, 592, 593, 594, 614, 616, 618, 619, 621, 623, 625, 626, 629, 630, 631, 634, 635, 637, 638, 639, 640, 643, 645, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 680, 683, 687, 688, 689, 690, 693, 695, 699, 702, 705, 707, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 728, 729, 730, 731, 735, 740, 741, 743, 744, 745, 746, 748, 751, 752, 753, 754, 760, 761, 763, 765, 766, 768, 769, 770, 771, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 788, 789, 790, 792, 794, 795, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 843, 847, 862, 863, 864, 866, 867, 868, 869, 870, 873, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 904, 905, 907, 908, 909, 911, 914, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 938, 939, 942, 943, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 966, 971, 972, 976, 981, 984, 991, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1024, 1035, 1036, 1041, 1042, 1047, 1048, 1050, 1056, 1061, 1063, 1065, 1075, 1079, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1097, 1099, 1100, 1102, 1107, 1110, 1112, 1113, 1114, 1115, 1122, 1125, 1129, 1130, 1132, 1133, 1139, 1140, 1142, 1147, 1148, 1151, 1152, 1153, 1154, 1158, 1161, 1162, 1163, 1164, 1166, 1172, 1179, 1180, 1181, 1182, 1183, 1188, 1192, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1208, 1209, 1224, 1227, 1228, 1231, 1234, 1235, 1236, 1237, 1241, 1242, 1246, 1247, 1248, 1251, 1252, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1267, 1271, 1272, 1275, 1278, 1279, 1280, 1284, 1286, 1290, 1293, 1296, 1298, 1302, 1303, 1305, 1306, 1311, 1313, 1314, 1319, 1320, 1321, 1322, 1326, 1331, 1332, 1335, 1337, 1339, 1345, 1348, 1350, 1352, 1353, 1359, 1368, 1373, 1377, 1378, 1380, 1381, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1396, 1397, 1398, 1399], "40": [41, 211, 221, 231, 258, 277, 354, 479, 484, 492, 523, 587, 734, 745, 847, 874, 893, 907, 966, 972, 1082, 1113, 1212, 1325, 1384, 1385, 1388, 1391], "400": [323, 354, 487, 488, 490, 932, 966, 1254, 1255, 1257, 1368, 1388], "4000000": [1123, 1368], "400157": 96, "404": [259, 354, 701, 703, 894, 966, 1292, 1294], "4096": 1390, "41": [221, 354, 672, 847, 874, 966, 1385, 1399], "412277": 181, "414214": [690, 847, 1281, 1368, 1390], "4160": 61, "416147": 1393, "4164": [258, 354, 893, 966], "42": [61, 141, 221, 244, 270, 286, 354, 484, 655, 847, 874, 904, 914, 966, 1146, 1368, 1384, 1398], "424778": [644, 847], "428571": [500, 847, 1124, 1368], "429101": 1385, "4294967296": [47, 354], "43": [221, 286, 354, 442, 655, 672, 847, 874, 914, 966], "4321": 972, "433013": [669, 847, 925, 966], "44": [11, 270, 354, 448, 847, 904, 966], "4411": [258, 354, 893, 966], "44225": [1046, 1368], "444": 11, "44444444444": 11, "45": [41, 221, 286, 354, 455, 479, 492, 655, 672, 695, 702, 742, 769, 788, 807, 833, 834, 847, 874, 914, 966, 972, 1072, 1100, 1105, 1113, 1286, 1293, 1334, 1390, 1391, 1393, 1397, 1399], "450": [1255, 1368], "45000": 825, "4500000": 972, "456": [9, 11, 455, 972, 1072, 1344, 1368], "456000": [455, 1072], "456001\u00b5": 972, "4566": [258, 354, 893, 966], "456789": [484, 972, 1101], "456789\u00b5": 972, "456m": 972, "457658": 1393, "459148": [497, 847], "46": 972, "4696": [258, 354, 893, 966], "47": [57, 221, 354, 672, 847, 874, 966, 972, 1385], "470": [908, 966], "47033": [668, 847, 1259, 1368], "47033046033698594": [668, 847, 1259, 1368], "475": [908, 966], "48": [13, 181, 286, 354, 655, 745, 847, 914, 966, 972], "4827": [258, 354, 893, 966], "485": 1399, "49": [221, 354, 874, 966, 972], "492474": [501, 847, 1125, 1368], "498": [259, 354, 894, 966], "4_500_000": 972, "4ab4a": 1391, "4d": [501, 847, 1125, 1368], "4f6228": [41, 354], "4f71": [41, 354], "4x": [255, 354], "5": [1, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 38, 40, 43, 44, 47, 52, 57, 58, 60, 61, 65, 105, 131, 134, 135, 136, 137, 138, 140, 151, 173, 174, 176, 179, 181, 185, 210, 211, 214, 215, 216, 221, 222, 225, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 245, 246, 248, 249, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 272, 273, 274, 276, 278, 279, 280, 282, 286, 289, 296, 297, 300, 301, 304, 305, 306, 307, 308, 309, 311, 312, 315, 316, 318, 321, 322, 323, 324, 327, 328, 330, 331, 333, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 358, 363, 364, 367, 382, 383, 388, 389, 390, 392, 394, 398, 403, 405, 411, 412, 423, 424, 425, 428, 429, 432, 433, 443, 444, 445, 447, 448, 451, 454, 455, 456, 457, 458, 462, 463, 466, 467, 468, 469, 473, 478, 480, 481, 482, 484, 485, 491, 495, 499, 501, 503, 504, 507, 509, 513, 514, 518, 519, 521, 524, 526, 529, 531, 534, 537, 538, 539, 540, 541, 545, 547, 554, 557, 558, 560, 561, 563, 566, 568, 569, 573, 574, 575, 576, 577, 578, 582, 583, 587, 593, 614, 616, 618, 630, 634, 635, 636, 637, 638, 639, 640, 642, 643, 645, 649, 650, 651, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 669, 671, 672, 673, 674, 675, 678, 689, 695, 705, 706, 707, 710, 711, 712, 731, 735, 746, 748, 752, 753, 754, 758, 766, 768, 769, 771, 772, 773, 774, 775, 777, 779, 781, 782, 783, 784, 785, 786, 788, 791, 792, 793, 794, 795, 799, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 825, 826, 828, 830, 831, 832, 836, 837, 843, 847, 862, 866, 867, 868, 869, 870, 874, 877, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 901, 902, 908, 911, 914, 920, 921, 922, 923, 924, 925, 926, 927, 931, 932, 934, 935, 938, 939, 942, 944, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 957, 966, 972, 981, 984, 988, 991, 994, 995, 998, 1000, 1001, 1002, 1004, 1006, 1010, 1015, 1016, 1017, 1023, 1024, 1035, 1036, 1041, 1048, 1050, 1057, 1061, 1062, 1063, 1064, 1065, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1080, 1087, 1099, 1101, 1102, 1103, 1105, 1106, 1112, 1114, 1115, 1116, 1122, 1125, 1127, 1129, 1130, 1131, 1142, 1147, 1148, 1151, 1153, 1157, 1160, 1172, 1179, 1182, 1183, 1188, 1191, 1194, 1198, 1199, 1200, 1201, 1202, 1203, 1207, 1208, 1212, 1216, 1224, 1231, 1234, 1235, 1236, 1239, 1240, 1241, 1242, 1247, 1248, 1251, 1252, 1253, 1254, 1255, 1257, 1258, 1261, 1263, 1265, 1267, 1272, 1278, 1281, 1286, 1296, 1297, 1298, 1301, 1302, 1322, 1326, 1339, 1346, 1348, 1351, 1352, 1353, 1356, 1357, 1359, 1368, 1373, 1378, 1381, 1383, 1385, 1386, 1387, 1390, 1391, 1392, 1393, 1396, 1398, 1399], "50": [13, 28, 41, 211, 221, 231, 241, 354, 433, 479, 484, 492, 786, 787, 847, 874, 966, 972, 1050, 1063, 1113, 1307, 1368, 1384, 1385], "500": [41, 323, 354, 357, 457, 458, 462, 466, 468, 469, 473, 480, 482, 932, 966, 1086, 1088, 1094, 1254, 1255, 1257, 1368, 1373], "5000": [316, 354, 1351, 1368], "50000": 151, "500000": [466, 1086], "500000000": [473, 1094], "5000555": 972, "500_000": [457, 458, 462, 466, 468, 469, 473, 480, 482], "500m": [1086, 1088, 1094], "51": 972, "512": [47, 152, 255, 354, 412, 640, 847, 1024, 1234, 1368], "51966": [735, 1326], "52": [328, 354, 493, 675, 847, 935, 966], "523599": 1393, "527525": [1260, 1368], "53": [493, 1114, 1396], "533316061": 1377, "533_316_061": 1377, "54": [505, 847, 1168, 1368, 1390, 1399], "540": [445, 644, 847], "540302": 1393, "543": 9, "543081": [435, 847, 1053, 1368], "5432": 152, "54321": 9, "544": 1399, "544705": 777, "549306": [988, 1368], "55": [41, 59, 354, 527, 847, 1150, 1368, 1387, 1391, 1392], "5555": 972, "55550": 972, "56": [138, 716, 749, 847, 1308], "566371": [644, 847], "567": 28, "56789": [1047, 1137, 1263, 1368], "57": [672, 847, 1263, 1368, 1393, 1399], "570796": [371, 373, 847, 983, 985, 1368, 1393], "575050513": [178, 181], "58": [146, 278, 354], "581139": [1063, 1368], "584963": [588, 847], "587401": [431, 847, 1390], "59": [138, 221, 354, 455, 469, 477, 480, 484, 514, 788, 833, 834, 835, 847, 874, 966, 972, 1072, 1090, 1098, 1101], "59815": [505, 847, 1390], "5_000_555": 972, "5th": [41, 354], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 56, 58, 60, 65, 97, 98, 105, 131, 134, 135, 136, 137, 155, 159, 160, 173, 210, 211, 214, 217, 218, 222, 223, 224, 226, 227, 228, 230, 231, 234, 237, 238, 239, 240, 241, 243, 245, 247, 248, 249, 251, 253, 254, 255, 257, 258, 261, 262, 264, 265, 266, 267, 268, 271, 272, 275, 278, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 297, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 318, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 337, 347, 348, 354, 357, 358, 363, 367, 388, 389, 390, 392, 398, 424, 425, 428, 429, 441, 442, 448, 451, 455, 459, 463, 470, 474, 475, 476, 487, 488, 490, 493, 494, 497, 499, 508, 509, 514, 518, 524, 526, 529, 547, 548, 549, 558, 561, 574, 575, 576, 577, 581, 593, 594, 630, 634, 641, 644, 645, 646, 651, 653, 655, 658, 660, 662, 664, 666, 669, 671, 672, 673, 675, 678, 683, 689, 695, 700, 711, 712, 735, 746, 748, 753, 761, 763, 765, 772, 774, 779, 781, 782, 783, 785, 788, 792, 795, 801, 808, 809, 813, 826, 830, 837, 843, 847, 862, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 884, 885, 886, 888, 889, 891, 892, 893, 895, 897, 898, 906, 908, 910, 911, 912, 914, 915, 916, 918, 920, 921, 922, 923, 924, 927, 930, 931, 934, 935, 938, 939, 946, 956, 957, 966, 972, 998, 1000, 1001, 1002, 1004, 1010, 1041, 1048, 1052, 1054, 1059, 1060, 1065, 1068, 1080, 1095, 1105, 1115, 1122, 1129, 1142, 1148, 1173, 1174, 1183, 1186, 1199, 1200, 1201, 1202, 1206, 1224, 1238, 1241, 1242, 1248, 1250, 1256, 1258, 1260, 1262, 1267, 1272, 1275, 1286, 1291, 1302, 1326, 1338, 1348, 1368, 1373, 1378, 1381, 1383, 1385, 1386, 1390, 1396, 1397, 1399], "60": [41, 211, 231, 278, 354, 462, 468, 469, 480, 491, 514, 672, 730, 847, 1096, 1101, 1112, 1243, 1321, 1368, 1393], "600": [323, 354, 487, 488, 490, 932, 966, 972], "60000": 466, "600000": 972, "60000000": 473, "60206": [589, 847, 1390], "605551": 828, "605551275463989": 828, "609438": 1390, "60_000": [457, 458, 462, 466, 468, 469, 473, 480, 482], "61": [278, 354], "625": [666, 847], "626172": [697, 1288], "63": [672, 847], "63204": 1399, "6331e16": [1340, 1368, 1393], "636253": 1393, "64": [1, 59, 61, 72, 74, 78, 82, 89, 92, 172, 209, 316, 354, 436, 616, 640, 847, 1234, 1237, 1368, 1390], "64030": [735, 1326], "642093": 1393, "647961": 181, "64bit": [173, 647, 847, 1243, 1368], "65": [225, 354, 877, 966, 1119, 1368], "650": [522, 633, 847], "65280": [735, 1326], "654": [28, 826, 924, 966], "65432": 1394, "654321": 602, "65536": 1390, "65552": [411, 1023], "66": [258, 323, 354, 672, 761, 847, 893, 932, 966, 1168, 1258, 1368], "663053": 138, "666": 972, "666000": 972, "666667": [221, 249, 325, 342, 354, 500, 805, 806, 812, 847, 874, 891, 933, 951, 966, 1124, 1368], "666f6f": [697, 1288], "67500": 825, "676": [259, 354, 894, 966], "678": [695, 702, 1286, 1293], "6789": [29, 972], "67890": 29, "686241": 1385, "69": [672, 847, 1168, 1368], "693147": [590, 847, 1213, 1215, 1368, 1390], "6_000_000": 1377, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 58, 60, 65, 155, 159, 160, 173, 188, 210, 214, 217, 218, 219, 221, 223, 224, 227, 228, 230, 234, 237, 239, 243, 245, 247, 249, 257, 261, 264, 266, 268, 270, 271, 275, 278, 280, 283, 284, 286, 287, 289, 290, 291, 292, 294, 297, 299, 302, 303, 304, 305, 310, 312, 313, 314, 322, 324, 325, 326, 354, 357, 358, 363, 367, 389, 390, 392, 401, 442, 454, 455, 459, 467, 475, 478, 479, 484, 492, 494, 505, 518, 524, 529, 530, 547, 561, 574, 575, 576, 577, 634, 635, 645, 651, 655, 671, 672, 689, 705, 734, 748, 772, 781, 782, 785, 788, 789, 795, 800, 808, 809, 826, 830, 837, 847, 866, 871, 872, 874, 876, 879, 881, 884, 886, 888, 889, 891, 892, 897, 904, 906, 909, 912, 914, 915, 916, 920, 924, 927, 966, 972, 988, 1001, 1002, 1004, 1013, 1071, 1072, 1076, 1082, 1087, 1099, 1100, 1105, 1113, 1115, 1128, 1152, 1167, 1186, 1199, 1200, 1201, 1202, 1247, 1248, 1261, 1267, 1296, 1325, 1368, 1373, 1378, 1383, 1385, 1386, 1387, 1390, 1392, 1396, 1399], "70": [221, 354, 761, 789, 847, 874, 966, 1168, 1368, 1385], "700": [323, 354, 932, 966], "702963": [41, 354], "7051579356916758811": 167, "707107": [400, 502, 669, 670, 768, 847, 1012, 1126, 1368, 1393], "712389": 1393, "714": 1399, "714286": [530, 847, 1152, 1368], "718281828459045": [11, 497, 588, 847, 1119, 1213, 1368], "718282": [505, 847, 1128, 1368, 1390], "720": [445, 644, 847], "7264": 1399, "732051": [1281, 1368], "7415e16": 181, "742": [259, 354, 894, 966], "75": [41, 221, 225, 354, 367, 634, 642, 645, 658, 660, 662, 664, 669, 671, 673, 805, 809, 847, 874, 877, 966, 972, 1063, 1148, 1168, 1239, 1307, 1368, 1385, 1393, 1399], "7500": [256, 354], "7508": 1399, "754": [754, 847], "754888": [497, 847], "761594": [750, 847, 1341, 1368], "764052": 96, "7654": 972, "765431": 1101, "7654321": 28, "76933c": [41, 354], "77": 1105, "78": [9, 146, 716, 1308], "780": 9, "784": [258, 354, 893, 966], "785398": [375, 768, 769, 847, 987, 1368, 1393], "789": [11, 972], "79": [1168, 1368], "7d": 972, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 48, 57, 58, 60, 61, 65, 83, 87, 93, 159, 160, 173, 210, 214, 217, 218, 219, 221, 223, 224, 226, 227, 228, 230, 234, 237, 239, 241, 245, 247, 254, 257, 258, 259, 261, 262, 264, 266, 268, 271, 280, 283, 284, 286, 287, 289, 290, 291, 292, 294, 297, 299, 301, 302, 303, 305, 310, 312, 313, 314, 322, 325, 326, 328, 354, 367, 369, 381, 389, 390, 392, 439, 442, 443, 455, 484, 518, 525, 529, 530, 555, 557, 561, 574, 575, 576, 577, 616, 634, 635, 640, 645, 651, 652, 657, 675, 681, 687, 689, 713, 714, 715, 730, 761, 766, 772, 777, 779, 782, 784, 792, 794, 799, 800, 803, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 826, 828, 831, 832, 836, 847, 866, 871, 872, 874, 876, 878, 879, 881, 884, 886, 889, 892, 893, 894, 897, 898, 908, 912, 915, 916, 920, 924, 927, 935, 966, 972, 1001, 1002, 1004, 1054, 1061, 1082, 1148, 1152, 1167, 1180, 1182, 1186, 1199, 1200, 1201, 1202, 1234, 1237, 1248, 1251, 1253, 1256, 1258, 1260, 1262, 1263, 1305, 1306, 1321, 1368, 1377, 1378, 1383, 1385, 1386, 1387, 1390, 1391, 1392, 1396, 1399], "80": [41, 225, 354, 877, 966], "800": [487, 488, 490, 1105], "8000": 152, "803065983": 138, "81": 1390, "814697265625": [1123, 1368], "816497": [302, 354], "8192": 150, "82": [258, 354, 893, 966], "8257e14": 1399, "83": [258, 354, 893, 966], "833": [258, 354, 893, 966], "833333": [342, 951], "848062": 1393, "848808": 181, "85": [41, 146, 354, 1168, 1368, 1399], "850": [522, 633, 847], "8568409950394724": [1119, 1368], "8589934592": [681, 847], "86": 1399, "8601": 1391, "87": 1399, "876": 9, "877809": 1385, "88": [221, 354, 874, 966], "881374": [374, 847, 986, 1368], "888": [826, 924, 966], "8_000_000": 1377, "8a": [1020, 1021], "8nin": 1399, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 51, 52, 57, 65, 210, 219, 221, 234, 236, 245, 249, 257, 259, 261, 262, 278, 286, 288, 289, 292, 304, 305, 322, 326, 328, 347, 354, 363, 367, 369, 381, 389, 390, 392, 397, 399, 439, 442, 445, 455, 484, 510, 518, 529, 535, 555, 561, 572, 580, 618, 634, 635, 644, 651, 655, 656, 657, 668, 671, 672, 683, 687, 702, 734, 742, 745, 775, 781, 782, 785, 788, 800, 835, 847, 874, 884, 889, 891, 892, 894, 897, 914, 916, 927, 935, 956, 966, 972, 996, 997, 1001, 1002, 1004, 1009, 1011, 1063, 1076, 1086, 1088, 1094, 1100, 1113, 1114, 1158, 1167, 1180, 1186, 1197, 1205, 1248, 1252, 1253, 1259, 1261, 1263, 1275, 1293, 1325, 1334, 1368, 1377, 1378, 1383, 1385, 1386, 1387, 1396], "90": [221, 259, 354, 734, 874, 894, 966, 1325, 1385, 1393], "90000": 825, "901234": [1047, 1137, 1263, 1368], "909": [258, 354, 893, 966], "910": [258, 354, 702, 893, 966, 1293], "910t": [695, 702, 1286, 1293], "914": [258, 354, 893, 966], "9223372036854775807": [757, 847], "9223372036854775808": [591, 847], "927295": 1393, "928571": [503, 847, 1127, 1368], "93": [1168, 1368], "94": [364, 847], "9477376373212048": [1168, 1368], "95": [18, 364, 847, 972], "95b3d7": [41, 354], "96": [18, 221, 354, 364, 847, 874, 966, 1168, 1368], "961": 61, "963624": [502, 847, 1126, 1368], "964028": [278, 354], "96_067_179": 1377, "97": [18, 248, 354, 364, 847, 1168, 1368], "9774092659964970114": [523, 847], "978307200": [461, 1078], "978307200000": 483, "978307200000000": [461, 483, 1078, 1104], "978307200000000000": 1104, "978393600": [461, 1078], "978393600000": 483, "978393600000000": [461, 483, 1078, 1104], "978393600000000000": 1104, "978480000": [461, 1078], "978480000000": 483, "978480000000000": [461, 483, 1078, 1104], "978480000000000000": 1104, "978738": 96, "98": [18, 248, 278, 354, 423, 517, 520, 688, 734, 752, 847, 1325], "987": [28, 602], "987000": 972, "9876": 9, "987654": [28, 972], "987654321": 11, "9876543210": 138, "987m": 972, "988": 11, "99": [18, 41, 232, 233, 248, 251, 278, 323, 354, 364, 423, 507, 509, 517, 520, 688, 752, 847, 882, 883, 932, 966, 1105, 1119, 1131, 1368, 1390], "9914e218": 181, "998347": [278, 354], "999": [454, 467, 972, 1071, 1087, 1388, 1399], "999000": 972, "999954": [278, 354], "999999": [477, 740, 788, 833, 834, 835, 972, 1098, 1105, 1331], "999999\u00b5": 972, "9bbb59": [41, 354], "A": [14, 38, 41, 47, 48, 51, 52, 53, 54, 63, 64, 69, 75, 130, 138, 143, 145, 150, 151, 152, 153, 165, 167, 172, 187, 218, 225, 226, 227, 232, 233, 236, 243, 258, 263, 265, 267, 272, 278, 304, 307, 322, 323, 324, 328, 329, 354, 362, 429, 449, 450, 455, 481, 484, 498, 499, 507, 508, 509, 519, 521, 533, 536, 538, 539, 545, 585, 592, 593, 606, 620, 629, 630, 652, 658, 660, 662, 664, 666, 669, 671, 673, 693, 694, 695, 701, 702, 703, 704, 705, 706, 707, 710, 712, 716, 717, 718, 720, 731, 740, 775, 791, 792, 796, 847, 872, 877, 878, 879, 882, 883, 888, 893, 899, 912, 932, 935, 936, 966, 972, 1042, 1066, 1067, 1072, 1102, 1105, 1121, 1131, 1132, 1133, 1230, 1254, 1255, 1257, 1260, 1261, 1262, 1284, 1285, 1286, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1301, 1303, 1307, 1308, 1309, 1311, 1322, 1331, 1368, 1377, 1378, 1381, 1394, 1396], "AND": [762, 763, 826, 972, 1387], "ANDs": [414, 847, 1026, 1368], "AS": [301, 354, 826, 827, 924, 966, 1377, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1398], "And": [738, 1329], "As": [13, 56, 97, 98, 131, 133, 134, 135, 137, 155, 159, 160, 169, 234, 282, 311, 316, 354, 585, 837, 884, 911, 966], "At": [47, 48, 49, 50, 51, 63, 64, 278, 354, 869, 870, 880, 908, 921, 966], "BY": [826, 924, 966, 1377, 1380, 1386, 1395, 1396], "Be": 966, "By": [5, 13, 15, 31, 34, 57, 150, 151, 165, 243, 257, 258, 263, 286, 288, 297, 302, 324, 325, 354, 398, 474, 479, 492, 578, 581, 587, 635, 650, 655, 659, 661, 663, 665, 667, 670, 672, 674, 680, 691, 759, 779, 786, 787, 789, 790, 791, 807, 828, 834, 835, 836, 847, 869, 888, 892, 893, 899, 914, 920, 925, 933, 966, 1010, 1095, 1100, 1113, 1203, 1247, 1271, 1282, 1358, 1368], "For": [15, 40, 41, 52, 53, 54, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 211, 225, 226, 229, 231, 257, 258, 278, 286, 311, 340, 354, 357, 471, 472, 484, 500, 502, 503, 514, 585, 594, 606, 647, 686, 693, 701, 702, 703, 705, 707, 731, 781, 791, 795, 796, 837, 843, 847, 877, 878, 893, 914, 949, 966, 1105, 1123, 1124, 1126, 1127, 1130, 1218, 1243, 1278, 1284, 1292, 1293, 1294, 1296, 1298, 1322, 1346, 1368, 1373], "IF": 1389, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 62, 63, 64, 73, 131, 132, 133, 134, 135, 136, 137, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 182, 183, 184, 195, 209, 211, 214, 226, 231, 234, 241, 243, 245, 253, 254, 255, 257, 258, 261, 262, 267, 274, 278, 282, 286, 288, 289, 290, 294, 297, 299, 301, 304, 305, 308, 309, 311, 312, 318, 319, 321, 322, 323, 354, 357, 366, 368, 386, 391, 398, 403, 411, 425, 451, 455, 456, 463, 471, 472, 481, 484, 510, 525, 531, 535, 543, 553, 564, 573, 578, 579, 585, 593, 594, 601, 602, 608, 610, 635, 640, 642, 645, 647, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 680, 682, 686, 687, 692, 702, 703, 705, 707, 708, 709, 720, 721, 722, 723, 725, 726, 727, 730, 731, 732, 733, 737, 740, 758, 762, 764, 767, 771, 772, 773, 776, 777, 779, 781, 786, 787, 789, 790, 791, 794, 795, 801, 802, 803, 805, 806, 807, 809, 813, 819, 822, 823, 824, 829, 831, 834, 835, 837, 838, 847, 869, 870, 880, 884, 888, 892, 893, 898, 903, 908, 910, 911, 912, 914, 918, 920, 921, 922, 924, 929, 931, 932, 941, 949, 959, 966, 971, 972, 979, 980, 998, 1003, 1010, 1015, 1023, 1037, 1050, 1068, 1072, 1073, 1080, 1092, 1093, 1102, 1105, 1130, 1147, 1148, 1153, 1158, 1167, 1168, 1172, 1178, 1189, 1198, 1203, 1204, 1210, 1218, 1237, 1239, 1241, 1243, 1246, 1247, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1267, 1269, 1271, 1274, 1278, 1279, 1283, 1293, 1294, 1296, 1298, 1299, 1300, 1307, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1321, 1322, 1323, 1324, 1328, 1331, 1339, 1342, 1346, 1348, 1357, 1368, 1373, 1377, 1378, 1380, 1388, 1391, 1396], "In": [57, 64, 152, 154, 166, 167, 170, 181, 185, 205, 210, 229, 231, 234, 243, 258, 259, 262, 274, 278, 286, 312, 321, 354, 357, 593, 594, 635, 655, 716, 717, 837, 847, 870, 888, 893, 894, 914, 931, 966, 1123, 1130, 1237, 1242, 1308, 1368, 1373], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 73, 79, 96, 98, 130, 141, 142, 143, 144, 145, 146, 154, 160, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 207, 221, 259, 263, 270, 277, 301, 311, 316, 323, 331, 340, 354, 357, 358, 443, 444, 451, 463, 525, 585, 594, 605, 642, 656, 657, 659, 661, 663, 665, 667, 668, 670, 672, 674, 772, 774, 805, 806, 837, 843, 847, 865, 869, 870, 874, 880, 894, 898, 899, 904, 908, 924, 932, 939, 940, 949, 966, 974, 1045, 1061, 1062, 1068, 1080, 1148, 1239, 1252, 1253, 1256, 1258, 1259, 1266, 1268, 1346, 1351, 1368, 1373], "Its": [244, 354, 523, 847, 1146, 1368], "NO": 972, "NOT": [134, 254, 295, 354, 585, 604, 679, 847, 919, 966, 1396], "No": [21, 257, 270, 354, 837, 892, 904, 966], "Not": [211, 257, 354, 538, 539, 847, 869, 880, 892, 908, 921, 966], "ON": 1396, "OR": [764, 765, 884, 966, 972, 1387], "ORs": [419, 847, 1031, 1368], "On": [754, 847, 896, 966], "One": [57, 221, 257, 274, 311, 316, 354, 367, 634, 766, 778, 794, 800, 803, 812, 814, 817, 818, 827, 847, 874, 892, 966, 972, 1063, 1368], "Or": [242, 243, 258, 286, 300, 324, 333, 354, 357, 501, 655, 689, 786, 787, 789, 790, 834, 835, 843, 847, 887, 888, 893, 914, 923, 942, 966, 1125, 1368], "That": [156, 898, 966], "The": [10, 21, 34, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 62, 63, 64, 65, 66, 71, 72, 74, 75, 76, 84, 88, 89, 96, 98, 99, 101, 130, 131, 133, 134, 135, 137, 138, 145, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 181, 182, 183, 185, 187, 195, 211, 213, 221, 222, 224, 225, 226, 227, 230, 231, 234, 241, 242, 243, 244, 249, 255, 257, 258, 259, 262, 270, 276, 278, 282, 286, 287, 288, 289, 292, 293, 294, 301, 306, 311, 312, 317, 320, 324, 328, 329, 331, 332, 333, 340, 354, 365, 406, 407, 408, 409, 423, 424, 443, 444, 446, 449, 450, 451, 459, 463, 470, 474, 475, 479, 481, 484, 492, 493, 500, 502, 503, 504, 507, 510, 514, 515, 523, 556, 560, 593, 594, 608, 635, 642, 645, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 686, 692, 696, 697, 701, 706, 707, 708, 709, 714, 715, 716, 717, 725, 726, 727, 728, 729, 730, 731, 741, 745, 751, 752, 753, 772, 775, 793, 797, 806, 807, 809, 823, 824, 825, 826, 829, 837, 839, 840, 842, 843, 847, 848, 849, 852, 854, 855, 856, 864, 869, 870, 874, 875, 877, 878, 880, 881, 884, 887, 888, 891, 892, 893, 894, 898, 904, 908, 911, 914, 916, 917, 918, 921, 924, 928, 930, 935, 936, 939, 940, 942, 949, 966, 970, 971, 972, 978, 981, 1018, 1019, 1020, 1021, 1035, 1036, 1049, 1061, 1062, 1063, 1066, 1067, 1068, 1076, 1080, 1091, 1095, 1096, 1100, 1102, 1105, 1113, 1114, 1122, 1124, 1126, 1127, 1130, 1131, 1134, 1138, 1146, 1181, 1185, 1218, 1237, 1239, 1241, 1245, 1246, 1247, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1275, 1278, 1283, 1287, 1288, 1297, 1298, 1299, 1300, 1305, 1306, 1307, 1308, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1342, 1348, 1350, 1352, 1353, 1360, 1362, 1364, 1368, 1369, 1374, 1375, 1376, 1377, 1382, 1396, 1397, 1399], "Then": 170, "There": 1396, "These": [1, 33, 41, 140, 147, 152, 153, 205, 318, 354, 492, 846, 847, 1100, 1113], "To": [40, 64, 225, 226, 232, 233, 354, 433, 449, 450, 508, 509, 693, 700, 701, 702, 705, 716, 717, 726, 727, 728, 729, 738, 847, 877, 878, 882, 883, 966, 1050, 1066, 1067, 1132, 1133, 1284, 1291, 1292, 1293, 1296, 1307, 1308, 1329, 1348, 1368, 1396], "Will": [63, 869, 880, 908, 921, 966, 1368], "With": [159, 253, 297, 354, 398, 578, 680, 847, 869, 920, 966, 1010, 1167, 1203, 1271, 1368], "_": [1, 57, 61, 205, 278, 309, 313, 354, 391, 428, 429, 564, 694, 702, 704, 706, 711, 712, 718, 721, 722, 1041, 1042, 1044, 1285, 1293, 1297, 1302, 1303, 1309, 1313, 1343, 1368], "__array_ufunc__": 974, "__call__": 843, "__enter__": 1396, "__exit__": 1396, "__getattr__": 843, "__getitem__": 741, "__init__": [1, 32, 33, 34, 35, 52, 53, 54, 55, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 141, 142, 143, 144, 178, 190, 196, 197, 199, 200, 940, 941, 1396], "__name__": [256, 354], "_auto_init_unhandled_kei": 33, "_awai": [675, 847], "_bar_": 796, "_btm_by_a": [424, 847], "_btm_by_b": [424, 847], "_by_ca": [424, 753, 847], "_by_cb": [424, 753, 847], "_check_ord": [921, 966], "_df": [1, 58], "_diff": [328, 354, 935, 966], "_eager": 585, "_expr": [1, 59], "_foo": 599, "_geventdataframeresult": [64, 870, 966], "_internal_cal": 55, "_is_not_nan": [539, 847], "_is_odd": [292, 354, 916, 966], "_isnan": [538, 847], "_isnul": [541, 847], "_kwarg": [869, 908, 966], "_ldf": 1, "_lf": 60, "_lower_boundari": [243, 354, 888, 966], "_mean_squar": [333, 942], "_not_nul": [540, 847], "_o": [428, 429, 711, 712, 1041, 1042, 1302, 1303], "_revers": [619, 623, 652, 847], "_right": [257, 258, 259, 354, 892, 893, 894, 966], "_storage_account": 34, "_storage_options_has_endpoint_url": 33, "_suffix": 624, "_sum": [333, 942], "_to_even": [675, 847], "_top_by_a": [753, 847], "_top_by_b": [753, 847], "_train": [937, 966], "_type": [910, 966], "_type_check": [921, 966], "_upper_boundari": [243, 354, 888, 966], "_world": 796, "a1": [41, 58, 60, 354], "a101": 1399, "a123": [41, 354], "a2": [41, 58, 60, 354], "a_1": [722, 1313, 1343, 1368], "a_2": [1343, 1368], "a_3": [1343, 1368], "a_a": 827, "a_agg_list": [243, 354, 888, 966], "a_b_doubl": 792, "a_btm_by_a": [424, 847], "a_btm_by_b": [424, 847], "a_by_ca": [424, 753, 847], "a_by_cb": [424, 753, 847], "a_div_2": 1390, "a_div_5": 1390, "a_interpol": [530, 847], "a_is_even": [301, 354, 826, 924, 966], "a_isnul": [541, 847], "a_lag_": 775, "a_log2": 1390, "a_mod_2": 1390, "a_not_nul": [540, 847], "a_revers": [619, 623, 652, 847], "a_rol": 775, "a_suffix": 624, "a_times_2": [594, 847], "a_times_b": [593, 847], "a_top_by_a": [753, 847], "a_top_by_b": [753, 847], "a_txt": 827, "aa": [504, 693, 705, 793, 847, 972, 1063, 1284, 1296, 1368, 1391], "aaa": [1, 41, 354, 693, 705, 741, 743, 744, 972, 1284, 1296], "aaaa": [1020, 1021], "aabcdef": 727, "aad": [1020, 1021], "aag": 27, "aazz": 1391, "ab": [245, 261, 305, 328, 354, 717, 741, 743, 744, 847, 935, 966, 972, 1147, 1172, 1339, 1368, 1389, 1391], "ab12": 717, "ab12cd34ef": 717, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 363, 699, 702, 716, 726, 847, 972, 1290, 1293, 1307, 1308, 1391], "abc123": 1391, "abc456": [716, 1307, 1308, 1391], "abcabc": 717, "abcd": 1391, "abcdeff": 726, "abf": [154, 166, 167], "abl": [105, 152, 585], "about": [52, 53, 54, 105, 145, 147, 152, 686, 693, 701, 702, 705, 716, 717, 847, 1278, 1284, 1292, 1293, 1296, 1307, 1308, 1368, 1399], "abov": [41, 211, 258, 278, 354, 357, 893, 966], "abs_a": 1390, "absolut": [147, 154, 166, 167, 174, 175, 176, 177, 362, 500, 502, 503, 847, 977, 1124, 1126, 1127, 1368, 1390], "acc": [781, 782, 795, 821], "accent": 972, "accept": [38, 43, 47, 48, 49, 50, 51, 54, 145, 147, 148, 150, 151, 154, 156, 158, 160, 162, 165, 168, 169, 170, 181, 195, 213, 223, 242, 292, 293, 297, 300, 317, 328, 329, 333, 354, 363, 424, 433, 504, 531, 635, 649, 650, 689, 718, 745, 753, 761, 763, 765, 770, 773, 774, 775, 776, 784, 793, 811, 813, 816, 825, 829, 831, 837, 843, 847, 864, 876, 887, 916, 917, 920, 923, 928, 935, 936, 942, 966, 971, 1036, 1050, 1153, 1237, 1246, 1247, 1271, 1309, 1353, 1368], "access": [38, 43, 47, 48, 49, 50, 51, 58, 59, 60, 61, 156, 160, 162, 165, 167, 168, 169, 170, 195, 209, 217, 255, 287, 288, 301, 354, 703, 741, 871, 924, 937, 966, 971, 1294, 1399], "accord": [287, 354, 642, 786, 787, 789, 790, 834, 835, 847, 1082, 1239, 1368], "accordingli": [145, 148, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164], "account": [41, 138, 153, 167, 354, 474, 500, 502, 503, 847, 1095, 1124, 1126, 1127, 1368], "accumul": [781, 782, 795, 821], "acg": 27, "achiev": [262, 278, 340, 354, 429, 594, 712, 847, 1042, 1218, 1303, 1368], "aco": 1389, "acosd": 1389, "across": [41, 57, 153, 155, 222, 244, 257, 265, 267, 272, 294, 304, 354, 446, 523, 608, 763, 765, 781, 782, 784, 811, 813, 816, 831, 847, 875, 892, 918, 966, 1146, 1368], "action": [40, 354], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 557, 702, 1182, 1293], "actual": [41, 134, 181, 185, 289, 354, 1273, 1368, 1391, 1398], "ad": [39, 41, 134, 155, 243, 263, 301, 311, 316, 318, 323, 328, 329, 354, 369, 484, 507, 601, 602, 745, 781, 782, 826, 847, 888, 899, 924, 932, 935, 936, 966, 972, 1105, 1131, 1346, 1351, 1368], "adbc": [39, 152, 153, 354], "adbc_driver_manag": 173, "adbc_ingest": [39, 354], "add": [40, 41, 42, 47, 51, 151, 211, 231, 243, 262, 328, 329, 330, 331, 354, 357, 444, 621, 622, 623, 624, 642, 745, 791, 795, 837, 847, 888, 892, 935, 936, 937, 938, 939, 966, 1130, 1368, 1373], "add_calendar_dai": 791, "add_calendar_month": 791, "add_calendar_year": 791, "add_chart": [41, 354], "add_dai": 791, "add_format": [41, 354], "add_hour": 791, "add_milli": 791, "add_second": 791, "add_seri": [41, 354], "add_week": 791, "add_worksheet": [41, 354], "addit": [30, 37, 39, 40, 41, 134, 149, 154, 155, 166, 167, 179, 181, 183, 185, 195, 226, 230, 242, 260, 263, 276, 292, 293, 300, 313, 320, 328, 329, 333, 354, 363, 460, 504, 507, 635, 689, 693, 701, 702, 705, 716, 717, 741, 745, 770, 773, 774, 775, 776, 793, 825, 826, 829, 843, 847, 881, 887, 899, 916, 917, 923, 930, 935, 936, 942, 966, 972, 1069, 1077, 1131, 1284, 1292, 1293, 1296, 1307, 1308, 1349, 1368, 1378, 1396], "addition": [65, 155, 287, 354, 972], "address": 702, "adjac": [41, 354], "adjust": [500, 502, 503, 686, 847, 1124, 1126, 1127, 1278, 1368], "adl": [154, 166, 167], "adlf": 167, "advanc": [41, 278, 354, 403, 585, 618, 621, 623, 625, 626, 1015, 1210, 1399], "advantag": [41, 205, 277, 354], "advis": [41, 56, 98, 354], "aedt": 788, "aeiuo": [705, 1296], "af1": 57, "af2": 57, "af3": 57, "affect": [39, 174, 175, 176, 177, 354], "afm": 167, "afoo": [937, 966], "after": [41, 134, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 213, 214, 231, 317, 320, 354, 423, 424, 425, 451, 504, 635, 645, 740, 752, 753, 772, 847, 864, 928, 930, 966, 1035, 1036, 1068, 1130, 1241, 1331, 1352, 1353, 1368, 1383], "afterward": [56, 837], "ag": [270, 354, 904, 966, 1397], "again": [594, 847], "against": [39, 107, 150, 152, 234, 282, 301, 354, 557, 705, 826, 884, 911, 924, 966, 1182, 1296, 1377, 1396, 1398, 1399], "agg": [242, 243, 278, 286, 354, 364, 414, 419, 422, 424, 510, 512, 517, 520, 593, 594, 635, 688, 689, 753, 760, 786, 789, 809, 847, 869, 870, 880, 887, 888, 908, 910, 914, 921, 966, 972], "agg_group": [798, 847], "agg_list": [593, 847], "aggreg": [147, 150, 151, 154, 162, 166, 236, 242, 243, 264, 266, 268, 271, 274, 278, 279, 280, 286, 302, 303, 322, 325, 333, 334, 336, 338, 354, 364, 414, 419, 422, 510, 526, 593, 594, 635, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 762, 763, 764, 765, 781, 782, 783, 784, 795, 800, 810, 811, 813, 815, 816, 821, 830, 831, 847, 888, 898, 900, 901, 902, 905, 906, 909, 914, 925, 926, 933, 942, 943, 945, 947, 966, 1026, 1031, 1034, 1149, 1253, 1254, 1255, 1257, 1260, 1261, 1262, 1368, 1384, 1386, 1389, 1395], "aggregate_funct": [278, 354, 972], "aho": [694, 704, 706, 718, 1285, 1295, 1297, 1309], "aiosqlit": 152, "alchemy_conn": 152, "algorithm": [212, 354, 370, 694, 704, 706, 718, 766, 847, 863, 966, 982, 1285, 1295, 1297, 1309, 1368], "alia": [1, 13, 57, 59, 61, 65, 95, 198, 202, 217, 243, 248, 261, 278, 286, 320, 328, 331, 354, 357, 363, 367, 406, 407, 408, 409, 410, 413, 423, 426, 428, 429, 430, 438, 439, 440, 441, 442, 444, 447, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 498, 499, 512, 514, 515, 519, 521, 527, 528, 531, 534, 537, 545, 547, 569, 581, 587, 592, 594, 598, 601, 602, 604, 606, 611, 614, 616, 618, 629, 630, 634, 636, 640, 642, 645, 647, 676, 678, 693, 694, 695, 696, 698, 699, 701, 702, 704, 705, 706, 707, 711, 712, 718, 719, 720, 721, 722, 723, 724, 728, 729, 731, 741, 742, 743, 744, 746, 751, 752, 754, 760, 761, 767, 768, 769, 773, 774, 775, 776, 786, 789, 791, 792, 795, 796, 801, 804, 805, 808, 809, 821, 825, 829, 834, 837, 847, 888, 890, 897, 914, 930, 935, 939, 966, 1018, 1062, 1069, 1070, 1073, 1076, 1077, 1078, 1079, 1085, 1086, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1102, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1138, 1172, 1239, 1244, 1292, 1293, 1297, 1308, 1313, 1314, 1368], "alias": [301, 354, 601, 602, 924, 966], "alic": [150, 1397], "align": [11, 16, 17, 41, 57, 65, 354, 1397], "align_fram": 65, "align_ful": 65, "align_inn": 65, "align_left": 65, "align_right": 65, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 57, 63, 70, 116, 118, 131, 132, 136, 146, 150, 151, 154, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 178, 179, 182, 185, 205, 210, 212, 214, 221, 223, 225, 226, 233, 245, 250, 252, 254, 255, 256, 257, 259, 260, 261, 267, 269, 273, 274, 278, 281, 283, 287, 288, 289, 293, 299, 300, 304, 305, 309, 311, 312, 316, 319, 321, 322, 323, 324, 329, 331, 354, 357, 367, 369, 391, 424, 437, 443, 449, 450, 451, 452, 463, 484, 492, 504, 509, 522, 523, 526, 529, 533, 536, 540, 541, 546, 556, 557, 564, 582, 585, 593, 615, 618, 619, 621, 622, 623, 624, 625, 626, 633, 635, 645, 650, 652, 657, 675, 681, 687, 689, 695, 699, 702, 703, 707, 710, 713, 717, 725, 726, 727, 731, 753, 763, 772, 774, 781, 782, 783, 784, 793, 795, 800, 801, 804, 813, 821, 829, 830, 831, 837, 843, 847, 853, 859, 862, 863, 866, 869, 870, 874, 876, 877, 878, 880, 883, 892, 894, 898, 903, 908, 912, 917, 921, 922, 923, 929, 931, 932, 936, 937, 939, 966, 972, 1003, 1061, 1063, 1066, 1067, 1068, 1069, 1080, 1105, 1113, 1147, 1154, 1166, 1172, 1181, 1182, 1189, 1207, 1210, 1241, 1247, 1253, 1279, 1286, 1290, 1293, 1294, 1297, 1298, 1301, 1308, 1316, 1317, 1318, 1322, 1339, 1348, 1368, 1372, 1373, 1378, 1380, 1385, 1386, 1391, 1395, 1396, 1398, 1399], "all_compat": 1380, "all_data": 1396, "all_horizont": [225, 226, 354, 762, 837, 877, 878, 966], "all_stat": 31, "alloc": [147, 150, 151, 229, 281, 354, 847, 941, 1123, 1368], "allow": [1, 8, 40, 41, 48, 49, 50, 51, 55, 56, 65, 98, 107, 132, 152, 155, 165, 167, 168, 169, 170, 171, 178, 181, 182, 185, 205, 209, 255, 258, 260, 263, 287, 288, 290, 312, 313, 316, 319, 332, 354, 426, 430, 474, 481, 484, 573, 593, 594, 601, 602, 647, 677, 730, 732, 733, 847, 892, 893, 898, 899, 903, 910, 929, 937, 966, 970, 972, 1095, 1102, 1105, 1198, 1218, 1243, 1265, 1321, 1323, 1324, 1348, 1349, 1368, 1391, 1399], "allow_alias": [601, 602], "allow_chunk": [181, 185], "allow_copi": [132, 209, 312, 354, 1348, 1368], "allow_dupl": [642, 847, 1239, 1368], "allow_exact_match": [258, 354, 893, 966], "allow_infin": [181, 185], "allow_masked_out": [181, 185], "allow_missing_column": [162, 170], "allow_nul": [178, 181, 185, 1399], "allow_object": 807, "allow_parallel": [258, 354, 892, 893, 966], "allow_pyarrow_filt": 171, "allow_time_zon": [181, 182, 185], "allowed_dtyp": [181, 182, 185, 1399], "almost": [64, 262, 340, 354, 730, 732, 733, 870, 966, 970, 1218, 1321, 1323, 1324, 1368], "along": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 354, 966], "alpha": [500, 502, 503, 847, 972, 1124, 1126, 1127, 1368], "alpha_i": [501, 847, 1125, 1368], "alphabet": [972, 1399], "alphanumer": [738, 972, 1329], "alreadi": [39, 40, 106, 311, 354, 443, 557, 609, 758, 847, 921, 966, 1061, 1182, 1357, 1368], "also": [28, 38, 41, 48, 49, 50, 51, 56, 63, 64, 134, 138, 152, 155, 156, 161, 162, 165, 170, 180, 181, 184, 185, 190, 199, 205, 227, 242, 243, 263, 270, 274, 278, 286, 288, 292, 300, 311, 323, 328, 331, 354, 439, 442, 451, 463, 474, 478, 484, 510, 531, 594, 601, 602, 635, 645, 649, 650, 675, 689, 716, 717, 718, 725, 726, 741, 772, 781, 782, 785, 788, 795, 797, 821, 837, 846, 847, 853, 869, 870, 880, 887, 888, 899, 904, 908, 914, 916, 921, 923, 932, 935, 937, 939, 966, 972, 1068, 1080, 1099, 1153, 1241, 1246, 1247, 1263, 1286, 1307, 1308, 1309, 1316, 1368, 1372, 1378, 1380, 1383, 1387, 1391, 1394, 1396, 1397], "alt": [354, 357, 1368, 1373], "altair": [173, 354, 357, 1368, 1373], "altern": [41, 190, 354, 843, 1388], "although": [301, 354, 924, 966], "alwai": [14, 38, 40, 48, 54, 73, 79, 150, 156, 160, 162, 213, 242, 257, 258, 262, 317, 340, 354, 423, 424, 593, 605, 730, 752, 753, 837, 847, 864, 892, 893, 898, 928, 966, 972, 1035, 1036, 1218, 1321, 1352, 1353, 1368, 1377, 1378, 1396, 1399], "am": [719, 1310], "amarillo": 1391, "amaz": [354, 357, 1368, 1373], "amazonaw": 33, "ambigu": [477, 478, 479, 492, 730, 733, 788, 1098, 1099, 1100, 1113, 1321, 1324], "america": 789, "amount": [52, 56, 74, 98, 160, 165, 168, 169, 594, 791, 847, 1385], "amsterdam": [478, 1099], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 55, 58, 60, 61, 65, 73, 74, 75, 96, 103, 107, 110, 113, 120, 122, 131, 133, 134, 137, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 165, 166, 167, 168, 169, 170, 179, 181, 185, 195, 211, 215, 216, 217, 223, 229, 232, 236, 238, 243, 254, 255, 256, 258, 259, 262, 263, 274, 278, 283, 284, 286, 287, 291, 301, 306, 312, 316, 318, 322, 323, 328, 331, 340, 354, 357, 365, 387, 390, 402, 406, 408, 414, 417, 419, 420, 422, 439, 440, 441, 442, 443, 444, 451, 455, 456, 474, 478, 481, 495, 501, 509, 510, 515, 516, 517, 520, 554, 557, 560, 562, 584, 585, 593, 594, 606, 608, 618, 619, 640, 641, 642, 650, 651, 655, 657, 658, 660, 662, 664, 666, 669, 671, 673, 692, 693, 696, 702, 705, 709, 730, 732, 733, 735, 737, 751, 754, 762, 767, 771, 773, 777, 779, 786, 787, 789, 790, 792, 794, 797, 801, 802, 803, 804, 805, 806, 807, 819, 821, 822, 825, 829, 834, 835, 837, 838, 843, 847, 866, 867, 868, 870, 874, 876, 880, 884, 888, 893, 894, 898, 899, 912, 914, 915, 924, 932, 935, 937, 939, 941, 949, 963, 966, 970, 971, 972, 999, 1002, 1014, 1018, 1020, 1026, 1029, 1031, 1032, 1034, 1049, 1051, 1057, 1058, 1059, 1060, 1061, 1068, 1072, 1102, 1116, 1123, 1125, 1138, 1167, 1179, 1182, 1185, 1187, 1209, 1218, 1247, 1248, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1266, 1268, 1283, 1284, 1287, 1293, 1296, 1300, 1321, 1323, 1324, 1326, 1328, 1348, 1350, 1368, 1386, 1388, 1391, 1395, 1396, 1398], "ana": [719, 1310], "anan": [719, 1310], "ananab": 1391, "and_": 847, "ang": 1391, "angl": [768, 769], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 72, 73, 79, 130, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 205, 207, 210, 211, 213, 219, 223, 225, 226, 231, 233, 234, 236, 238, 253, 255, 256, 257, 258, 259, 262, 263, 267, 277, 282, 283, 287, 288, 289, 301, 304, 307, 308, 311, 312, 313, 316, 317, 319, 322, 323, 331, 354, 357, 358, 363, 366, 367, 391, 423, 424, 425, 443, 444, 451, 463, 480, 498, 499, 509, 510, 514, 517, 519, 521, 525, 535, 545, 552, 557, 564, 574, 575, 576, 577, 592, 593, 594, 601, 611, 614, 616, 618, 619, 621, 623, 625, 626, 629, 630, 634, 639, 642, 649, 650, 651, 656, 657, 659, 661, 663, 665, 667, 668, 670, 672, 674, 678, 682, 692, 694, 708, 726, 727, 728, 729, 730, 732, 733, 735, 737, 746, 752, 753, 754, 761, 762, 763, 765, 772, 774, 776, 777, 778, 805, 806, 807, 809, 813, 831, 837, 847, 864, 869, 870, 876, 877, 878, 880, 883, 884, 892, 893, 894, 899, 907, 908, 911, 912, 924, 928, 929, 932, 939, 940, 941, 966, 970, 972, 974, 976, 979, 1003, 1035, 1036, 1045, 1061, 1062, 1068, 1080, 1101, 1120, 1121, 1130, 1133, 1139, 1141, 1143, 1148, 1158, 1167, 1170, 1177, 1182, 1189, 1199, 1200, 1201, 1202, 1217, 1218, 1229, 1230, 1239, 1246, 1247, 1248, 1252, 1253, 1256, 1258, 1259, 1266, 1267, 1283, 1285, 1299, 1321, 1323, 1324, 1326, 1328, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1368, 1373, 1396, 1399], "anna": [270, 354, 904, 966], "annex": [713, 1304], "announc": [910, 966], "anoth": [100, 180, 214, 222, 228, 242, 258, 294, 354, 443, 446, 453, 530, 560, 598, 604, 608, 649, 659, 661, 663, 665, 667, 670, 672, 674, 705, 847, 866, 875, 887, 893, 918, 937, 966, 1061, 1070, 1122, 1130, 1152, 1185, 1246, 1247, 1296, 1368, 1390, 1391], "anti": [257, 354, 892, 949, 966, 1266, 1268, 1368, 1384], "antipattern": [150, 156, 160, 162], "any_horizont": [764, 837], "anyth": [40, 287, 354], "anywher": [410, 413, 730, 732, 733, 1321, 1323, 1324], "ap": 1391, "apach": [36, 43, 44, 47, 132, 148, 152, 153, 156, 158, 167, 208, 354, 975], "apaya": [731, 1322], "api": [0, 33, 38, 43, 47, 48, 49, 50, 51, 132, 160, 162, 165, 168, 169, 170, 171, 190, 195, 209, 262, 340, 354, 594, 809, 847, 949, 966, 1218, 1368, 1395], "apia": [452, 1069], "app": [430, 724, 1043, 1315], "appear": [41, 69, 134, 176, 177, 354, 717, 756, 847, 972, 1355, 1368, 1397], "append": [39, 40, 42, 181, 231, 257, 258, 259, 354, 646, 837, 847, 892, 893, 894, 966, 1130, 1368], "appl": [218, 247, 257, 283, 284, 307, 335, 336, 338, 339, 341, 342, 343, 344, 345, 346, 347, 354, 424, 426, 430, 652, 698, 724, 753, 847, 892, 912, 944, 945, 947, 948, 950, 951, 952, 953, 954, 955, 956, 966, 1038, 1043, 1289, 1315, 1384, 1391], "appli": [11, 21, 38, 41, 48, 63, 65, 130, 145, 152, 165, 178, 181, 185, 205, 221, 236, 259, 262, 277, 300, 301, 311, 340, 354, 379, 454, 457, 458, 459, 462, 464, 465, 466, 467, 468, 469, 470, 473, 475, 476, 480, 482, 493, 494, 496, 502, 503, 593, 594, 639, 658, 659, 660, 661, 664, 665, 671, 672, 689, 716, 717, 730, 732, 733, 737, 770, 781, 782, 795, 808, 809, 821, 826, 837, 847, 874, 894, 898, 907, 923, 924, 949, 966, 1050, 1071, 1074, 1075, 1076, 1079, 1081, 1082, 1086, 1087, 1088, 1090, 1091, 1094, 1096, 1097, 1101, 1103, 1114, 1115, 1117, 1126, 1127, 1218, 1254, 1255, 1257, 1261, 1307, 1308, 1321, 1323, 1324, 1328, 1368, 1377], "applic": [54, 312, 354, 594, 847], "apply_on_context_ent": 205, "appropri": [41, 171, 234, 282, 312, 354, 484, 645, 847, 884, 911, 966, 1105, 1241, 1368], "approx": [370, 847], "approx_n_uniqu": [354, 847, 966, 1368], "approxim": [47, 212, 354, 370, 501, 766, 847, 863, 966, 982, 1125, 1368, 1390, 1399], "april": [481, 1102, 1391, 1392], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 63, 64, 65, 96, 97, 98, 105, 111, 127, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 179, 181, 182, 183, 185, 195, 205, 209, 213, 214, 219, 221, 225, 226, 229, 234, 235, 236, 241, 242, 243, 255, 257, 258, 259, 260, 262, 269, 270, 276, 278, 282, 286, 287, 288, 289, 292, 293, 297, 300, 307, 311, 312, 313, 316, 317, 321, 323, 324, 328, 329, 332, 333, 354, 366, 368, 382, 398, 403, 423, 424, 425, 433, 439, 441, 442, 451, 479, 484, 492, 497, 499, 500, 501, 502, 503, 510, 525, 531, 533, 535, 536, 538, 539, 540, 541, 543, 548, 578, 585, 593, 630, 635, 642, 645, 648, 649, 650, 651, 655, 656, 659, 661, 663, 665, 667, 668, 670, 672, 674, 678, 680, 683, 686, 688, 689, 694, 703, 707, 709, 710, 714, 715, 716, 717, 718, 720, 731, 733, 735, 740, 745, 747, 751, 752, 753, 762, 763, 765, 770, 773, 774, 775, 776, 777, 784, 786, 787, 789, 790, 805, 806, 811, 813, 816, 825, 829, 831, 834, 835, 837, 839, 840, 842, 846, 847, 848, 849, 852, 853, 854, 855, 856, 859, 862, 864, 869, 870, 874, 877, 878, 884, 887, 888, 892, 893, 894, 898, 903, 904, 908, 910, 911, 912, 914, 916, 917, 920, 921, 923, 928, 931, 932, 935, 936, 937, 942, 966, 970, 972, 979, 980, 994, 1010, 1015, 1035, 1036, 1040, 1050, 1059, 1060, 1068, 1100, 1105, 1113, 1119, 1121, 1123, 1124, 1125, 1126, 1127, 1134, 1136, 1148, 1153, 1156, 1158, 1159, 1161, 1162, 1163, 1164, 1168, 1173, 1203, 1210, 1230, 1239, 1241, 1245, 1246, 1247, 1248, 1252, 1259, 1267, 1271, 1275, 1278, 1285, 1294, 1298, 1300, 1305, 1306, 1307, 1308, 1311, 1322, 1324, 1326, 1331, 1338, 1346, 1348, 1349, 1350, 1352, 1353, 1360, 1362, 1364, 1368, 1369, 1372, 1374, 1375, 1376, 1378, 1380, 1383, 1388, 1396, 1399], "arbitrari": [52, 86, 238, 354, 446, 847, 875, 966, 972], "arbitrarili": [262, 354], "arcco": [847, 1368], "arccosh": [847, 1368], "arcsin": [847, 1368], "arcsinh": [847, 1368], "arctan": [768, 769, 847, 1368], "arctan2": 769, "arctanh": [847, 1368], "aren": [38, 48, 354, 966], "arg": [32, 56, 67, 68, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 147, 198, 202, 234, 277, 282, 354, 379, 639, 770, 796, 847, 884, 907, 911, 966, 1218, 1368, 1381], "arg_max": [847, 1368], "arg_min": [847, 1368], "arg_sort": [847, 1368], "arg_tru": [771, 847, 1368], "arg_uniqu": [847, 1368], "arg_wher": [380, 847], "argmax": [593, 847], "argument": [37, 40, 47, 96, 145, 147, 149, 150, 154, 162, 165, 166, 181, 183, 185, 195, 219, 223, 230, 242, 243, 258, 276, 277, 286, 292, 293, 300, 313, 320, 324, 328, 329, 333, 354, 451, 479, 492, 504, 510, 531, 593, 635, 639, 655, 689, 725, 726, 727, 734, 745, 762, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 793, 825, 829, 837, 843, 847, 876, 881, 887, 888, 893, 907, 914, 916, 917, 923, 930, 935, 936, 942, 963, 966, 972, 1068, 1100, 1113, 1153, 1316, 1317, 1318, 1325, 1349, 1368, 1390, 1391], "aris": 152, "arithmet": [236, 354], "arm": 173, "arm64": 173, "around": [38, 48, 354, 966], "arr": [312, 354, 839, 1348, 1360, 1368, 1391], "arr_bar": 1386, "arr_foo": 1386, "arrai": [131, 135, 150, 151, 154, 162, 166, 207, 211, 229, 230, 306, 311, 312, 313, 354, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 411, 439, 440, 441, 442, 552, 567, 568, 569, 570, 572, 581, 582, 584, 587, 589, 593, 651, 658, 660, 662, 664, 666, 669, 671, 673, 679, 751, 774, 792, 806, 826, 847, 881, 966, 971, 974, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1023, 1057, 1058, 1059, 1060, 1065, 1123, 1177, 1192, 1193, 1194, 1195, 1197, 1205, 1206, 1207, 1209, 1212, 1214, 1215, 1248, 1254, 1255, 1257, 1260, 1261, 1262, 1269, 1273, 1342, 1346, 1348, 1349, 1350, 1368, 1389, 1391, 1395, 1398], "array_agg": 1389, "array_contain": 1389, "array_get": 1389, "array_length": 1389, "array_low": 1389, "array_mean": 1389, "array_revers": 1389, "array_sum": 1389, "array_to_str": 1389, "array_uniqu": 1389, "array_upp": 1389, "arraylik": [1065, 1368], "arrow": [43, 44, 49, 131, 132, 152, 153, 156, 158, 168, 208, 255, 288, 289, 306, 308, 312, 354, 966, 975, 1342, 1348, 1368], "arrowarrayexport": [131, 132], "arrowinvaliderror": [40, 354], "arrowstreamexport": [131, 132], "as_": [1368, 1373], "as_arrai": 806, "as_dict": [151, 276, 354], "as_expr": 972, "as_seri": [214, 307, 354, 866, 966, 972], "asarrai": [207, 974], "ascend": [243, 270, 286, 354, 635, 655, 847, 888, 904, 914, 966], "ascii": [7, 21, 428, 429, 694, 704, 706, 707, 711, 712, 718, 720, 731, 740, 972, 1041, 1042, 1285, 1295, 1297, 1298, 1302, 1303, 1309, 1311, 1322, 1331], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [694, 704, 706, 718, 1285, 1295, 1297, 1309], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1399, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 972, "ascii_t": 205, "ascii_uppercas": [322, 354], "asd": [695, 702, 1286, 1293], "asia": [138, 972, 1074, 1075, 1103], "asid": 484, "asin": 1389, "asind": 1389, "asof": [258, 354, 893, 966], "asofjoinstrategi": [258, 354, 893, 966], "assert": [174, 175, 176, 177, 181, 185, 286, 354, 859, 972], "assert_frame_equ": [175, 176, 228, 354, 1399], "assert_frame_not_equ": [174, 177], "assert_series_equ": [174, 177, 1122, 1368, 1399], "assert_series_not_equ": [175, 176], "assert_someth": 179, "assertionerror": [174, 175, 176, 177], "assign": [179, 211, 243, 339, 354, 403, 585, 635, 645, 722, 723, 847, 888, 948, 966, 1015, 1210, 1241, 1313, 1314, 1368], "associ": [39, 41, 57, 153, 155, 180, 183, 289, 354, 971, 1379, 1381, 1385], "assum": [33, 289, 354, 898, 949, 966, 1391], "assume_rol": 33, "assumpt": [593, 847], "async": [63, 64, 152, 870, 966], "async_engin": 152, "asynchron": [64, 152, 870, 966], "asyncio": [64, 152, 870, 966], "asyncresult": [64, 870, 966], "asyncsurrealdb": 152, "ata": 27, "atan": 1389, "atan2": [768, 769, 1389], "atan2_ab": 1393, "atan2d": [769, 1389], "atan2d_ab": 1393, "atand": 1389, "atg": 27, "atgataaaggag": 27, "atol": [174, 175, 176, 177], "attain": [689, 847], "attempt": [1, 10, 48, 49, 50, 51, 63, 64, 211, 446, 847, 869, 870, 875, 880, 908, 921, 966], "attr": [354, 357, 1368, 1373], "attribut": [66, 69, 72, 73, 74, 75, 76, 84, 88, 141, 142, 143, 144, 178, 196, 197, 199, 200, 354, 357, 839, 840, 842, 843, 848, 849, 852, 854, 855, 856, 940, 941, 966, 1360, 1362, 1364, 1368, 1369, 1373, 1374, 1375, 1376], "attributeerror": 1, "audi": [307, 354, 652, 847], "august": 484, "australia": 788, "auth": 35, "authent": [40, 154, 162, 165, 166, 167, 168, 170, 190, 354], "author": 1, "auto": [10, 38, 40, 43, 47, 48, 49, 50, 51, 63, 64, 65, 131, 133, 134, 135, 137, 154, 159, 160, 162, 165, 166, 168, 169, 170, 190, 195, 318, 354, 869, 870, 880, 908, 921, 966, 1399], "auto_structifi": [292, 328, 354, 916, 935, 966], "autofilt": [41, 354], "autofit": [41, 354], "autogener": [150, 151, 155, 161, 165], "automat": [8, 38, 48, 65, 131, 133, 134, 135, 137, 138, 147, 150, 151, 152, 153, 159, 160, 162, 165, 167, 168, 169, 181, 185, 187, 190, 292, 301, 328, 354, 593, 650, 725, 726, 727, 826, 847, 916, 924, 935, 966, 1246, 1247, 1316, 1317, 1318, 1351, 1368, 1378, 1380, 1383, 1396], "autumn": [716, 717], "avail": [41, 47, 51, 140, 152, 153, 154, 163, 166, 167, 179, 192, 193, 194, 205, 263, 278, 301, 353, 354, 484, 645, 826, 839, 840, 842, 846, 847, 848, 849, 852, 853, 854, 855, 856, 859, 899, 924, 964, 965, 966, 972, 1063, 1241, 1360, 1362, 1364, 1368, 1369, 1372, 1374, 1375, 1376, 1387], "available_timezon": [72, 972], "averag": [41, 354, 500, 501, 502, 503, 645, 847, 1124, 1125, 1126, 1127, 1241, 1368, 1385], "avg": 1389, "avocado": 1391, "avoid": [181, 185, 234, 282, 288, 354, 365, 847, 884, 911, 966], "avro": [36, 148, 198, 354, 859], "avrocompress": [36, 354], "aw": [33, 38, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 354, 966], "awai": [675, 847, 1390], "await": [64, 152, 870, 960, 966], "await_result": [910, 966], "awar": [11, 152, 255, 288, 289, 308, 354, 501, 694, 704, 706, 718, 733, 847, 966, 1125, 1285, 1295, 1297, 1309, 1324, 1368], "aws_access_key_id": [40, 154, 166, 170, 354], "aws_region": [40, 166, 170, 354], "aws_secret_access_kei": [40, 154, 166, 170, 354], "awsassumerolekwarg": 33, "axi": [269, 321, 354, 357, 768, 769, 903, 931, 966, 1368, 1373], "aya": [720, 1311, 1322], "az": [154, 166, 167], "azur": [34, 38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 167, 168, 169, 170, 195, 354, 966], "azure_storage_account_kei": [154, 166, 167], "azure_storage_account_nam": [154, 166, 167], "b": [1, 11, 36, 38, 40, 43, 44, 47, 52, 60, 65, 88, 96, 102, 105, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 150, 152, 155, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 252, 253, 254, 255, 256, 257, 260, 261, 263, 264, 266, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 297, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 363, 365, 366, 368, 369, 379, 381, 386, 391, 407, 408, 409, 410, 411, 412, 413, 414, 419, 422, 424, 425, 437, 444, 448, 481, 484, 504, 506, 508, 509, 510, 512, 522, 523, 526, 529, 530, 531, 533, 536, 538, 539, 540, 541, 546, 552, 557, 564, 574, 575, 576, 577, 593, 594, 599, 615, 618, 619, 620, 621, 622, 623, 624, 632, 633, 635, 639, 642, 645, 649, 650, 652, 654, 681, 687, 689, 696, 700, 705, 709, 716, 717, 741, 742, 753, 756, 760, 762, 763, 764, 765, 766, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 792, 793, 794, 795, 796, 799, 800, 801, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 823, 824, 826, 828, 829, 830, 831, 832, 836, 843, 847, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 911, 912, 913, 915, 916, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 966, 972, 978, 981, 1003, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1040, 1044, 1045, 1062, 1065, 1102, 1105, 1119, 1122, 1123, 1130, 1133, 1153, 1158, 1177, 1199, 1200, 1201, 1202, 1239, 1244, 1287, 1291, 1296, 1300, 1307, 1308, 1332, 1334, 1335, 1337, 1349, 1355, 1368, 1378, 1380, 1381, 1383, 1384, 1385, 1386, 1391, 1392, 1393, 1396], "b1": [58, 60], "b2": [58, 60], "b345": [41, 354], "b4": [41, 354], "b_b": [301, 354], "b_btm_by_a": [424, 847], "b_btm_by_b": [424, 847], "b_by_ca": [424, 753, 847], "b_by_cb": [424, 753, 847], "b_div_a": [248, 354], "b_is_not_nan": [539, 847], "b_isnan": [538, 847], "b_isnul": [541, 847], "b_not_nul": [540, 847], "b_revers": [619, 623, 652, 847], "b_suffix": 624, "b_sum": [333, 942], "b_top_by_a": [753, 847], "b_top_by_b": [753, 847], "ba": [446, 504, 608, 724, 793, 847, 972], "back": [4, 57, 170, 231, 243, 294, 312, 313, 354, 608, 635, 717, 847, 869, 880, 888, 908, 918, 921, 941, 966, 1130, 1349, 1368], "backend": [40, 152, 153, 154, 166, 167, 354, 357, 1368, 1373], "background": [63, 64, 354, 358, 869, 870, 965, 966], "backward": [47, 51, 233, 258, 354, 406, 451, 472, 509, 847, 883, 893, 966, 1018, 1068, 1093, 1133, 1368], "backward_fil": [509, 515, 847, 1133, 1138, 1368], "bad": [716, 717, 1307, 1308], "balanc": [184, 186, 1399], "ballon_dor": [701, 703, 1292, 1294], "banana": [218, 307, 336, 338, 341, 342, 343, 344, 345, 346, 347, 354, 424, 652, 698, 724, 753, 847, 945, 947, 950, 951, 952, 953, 954, 955, 956, 1391], "banded_column": [41, 354], "banded_row": [41, 354], "banker": [675, 847, 1263, 1368], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 146, 159, 160, 214, 217, 218, 219, 223, 224, 225, 226, 227, 228, 231, 234, 236, 238, 239, 240, 245, 247, 248, 249, 251, 257, 261, 262, 264, 265, 266, 267, 268, 271, 272, 275, 278, 280, 282, 283, 284, 287, 290, 291, 292, 294, 299, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 319, 320, 325, 326, 327, 332, 354, 357, 427, 446, 528, 598, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 686, 695, 697, 700, 702, 703, 719, 721, 723, 728, 729, 766, 777, 778, 779, 794, 799, 800, 803, 804, 810, 812, 814, 815, 817, 818, 825, 828, 832, 836, 837, 843, 847, 866, 871, 872, 876, 877, 878, 879, 884, 890, 891, 892, 906, 911, 912, 915, 916, 929, 930, 934, 966, 971, 972, 1039, 1189, 1278, 1286, 1288, 1291, 1293, 1294, 1310, 1314, 1319, 1320, 1368, 1382, 1384, 1385, 1386, 1388, 1391, 1394], "bar2": 1391, "bar22": [236, 354], "bar_": 721, "bar_3": [309, 354], "bar_4": [309, 354], "bar_a": [278, 354], "bar_at_2": 1386, "bar_avg": 1385, "bar_b": [278, 354], "bar_color": [41, 354], "bar_max": 1385, "bar_median": 1385, "bar_min": 1385, "bar_negative_border_color_sam": [41, 354], "bar_negative_color_sam": [41, 354], "bar_std": 1385, "bar_sum": 1385, "bar_var": 1385, "bare": [601, 602, 972], "base": [32, 41, 52, 53, 54, 70, 116, 118, 155, 183, 211, 226, 234, 243, 259, 282, 286, 354, 452, 460, 497, 500, 501, 502, 503, 510, 525, 530, 588, 589, 593, 594, 640, 642, 650, 655, 659, 661, 663, 665, 667, 670, 672, 674, 735, 795, 847, 884, 888, 894, 911, 914, 966, 972, 1069, 1077, 1119, 1124, 1125, 1126, 1127, 1148, 1152, 1213, 1214, 1218, 1237, 1239, 1246, 1247, 1326, 1359, 1368, 1384, 1390, 1399], "base64": [408, 409, 696, 697, 1020, 1021, 1287, 1288], "base_nam": [318, 354], "base_path": [52, 53, 54], "base_utc_offset": [460, 1077], "baseexcept": 1396, "basepartitioncontext": 53, "basi": [41, 155, 181, 354], "basic": [41, 207, 354, 600, 974, 1399], "basic_chart": [41, 354], "batch": [44, 96, 140, 145, 151, 152, 158, 160, 169, 171, 288, 316, 354, 869, 898, 966], "batch_siz": [38, 48, 145, 150, 151, 152, 160, 169, 171, 316, 354, 966], "batchedcsvread": 151, "baz": [238, 248, 249, 320, 354, 703, 721, 723, 794, 803, 818, 843, 891, 930, 966, 971, 972, 1294, 1314, 1382, 1388, 1391], "bb": [972, 1063, 1368, 1391, 1396], "bbb": [1, 41, 354, 741, 743, 744, 972], "bc": [705, 717, 830, 1296], "bcbc45": 1391, "bea": 13, "bear": 972, "bearer": 190, "bearer_token": 190, "beauti": 13, "becaus": [160, 169, 229, 243, 260, 262, 322, 340, 354, 514, 557, 585, 847, 888, 949, 966, 1123, 1182, 1218, 1368], "becom": [183, 353, 964, 965], "bed3": [41, 354], "been": [5, 31, 41, 188, 209, 335, 354, 516, 594, 612, 645, 847, 944, 1241, 1368], "beetl": [307, 354, 652, 847], "befor": [41, 48, 49, 50, 51, 52, 71, 72, 145, 147, 150, 152, 155, 165, 171, 174, 175, 176, 177, 187, 205, 231, 243, 258, 301, 311, 316, 320, 354, 417, 418, 420, 421, 441, 442, 443, 593, 635, 636, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 700, 740, 747, 775, 823, 824, 847, 888, 890, 893, 930, 966, 1029, 1030, 1032, 1033, 1059, 1060, 1061, 1130, 1234, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1291, 1331, 1338, 1368, 1384], "beforehand": [730, 732, 733, 1321, 1323, 1324], "begin": [13, 41, 249, 354, 500, 502, 503, 529, 530, 701, 731, 847, 891, 966, 1124, 1126, 1127, 1151, 1152, 1292, 1322, 1368], "behav": [234, 282, 354, 510, 594, 726, 727, 837, 847, 884, 911, 966], "behavior": [47, 51, 55, 162, 170, 211, 225, 226, 234, 257, 258, 354, 390, 516, 560, 562, 700, 794, 803, 847, 877, 878, 892, 893, 963, 966, 1002, 1185, 1187, 1291], "behaviour": [11, 57, 225, 226, 234, 282, 301, 354, 693, 701, 702, 705, 716, 717, 754, 826, 847, 877, 878, 884, 911, 924, 966, 1284, 1292, 1293, 1296, 1307, 1308], "behind": 187, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 130, 141, 142, 143, 144, 145, 146, 150, 151, 152, 154, 155, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 214, 230, 259, 263, 301, 309, 311, 316, 323, 354, 357, 358, 443, 444, 451, 463, 525, 594, 642, 656, 657, 659, 661, 663, 665, 667, 668, 670, 672, 674, 700, 772, 774, 792, 805, 806, 837, 847, 866, 869, 870, 880, 881, 894, 899, 908, 924, 932, 940, 966, 1045, 1061, 1062, 1068, 1080, 1148, 1239, 1252, 1253, 1256, 1258, 1259, 1291, 1343, 1346, 1351, 1368, 1373, 1399], "belong": [1, 243, 354, 888, 966], "below": [20, 40, 154, 155, 166, 167, 226, 234, 278, 282, 354, 484, 509, 707, 716, 717, 731, 786, 787, 789, 790, 834, 835, 837, 843, 847, 884, 911, 966, 1105, 1298, 1307, 1308, 1322], "best": [167, 262, 340, 354, 594, 847, 1218, 1368], "better": [262, 311, 312, 340, 354, 429, 594, 712, 847, 865, 949, 966, 1042, 1266, 1268, 1303, 1368], "between": [25, 65, 101, 178, 179, 181, 185, 210, 219, 257, 270, 280, 288, 346, 354, 391, 425, 447, 448, 484, 531, 555, 564, 574, 575, 576, 577, 636, 642, 643, 666, 667, 692, 708, 768, 769, 772, 777, 779, 806, 820, 823, 824, 847, 892, 904, 909, 955, 966, 1003, 1037, 1044, 1064, 1065, 1105, 1153, 1180, 1189, 1199, 1200, 1201, 1202, 1234, 1239, 1240, 1258, 1283, 1299, 1368, 1385, 1393], "between_ab": [531, 847], "beyond": [52, 738, 1329], "bia": [502, 503, 543, 656, 668, 686, 847, 1126, 1127, 1168, 1252, 1259, 1278, 1368], "bias": [543, 686, 847, 1168, 1278, 1368], "big": [151, 411, 1023], "big_fil": 151, "bigidx": 139, "bigqueri": 153, "bigquery_format": 198, "bin": [444, 525, 642, 735, 761, 840, 847, 1062, 1148, 1239, 1326, 1362, 1368, 1373], "bin2int": 411, "bin_count": [525, 847, 1148, 1368], "bin_i": [761, 847], "bin_x": [761, 847], "bin_xor_xi": [761, 847], "binari": [41, 43, 146, 152, 222, 294, 354, 407, 408, 409, 410, 411, 412, 413, 446, 608, 696, 847, 875, 918, 966, 972, 1019, 1020, 1022, 1023, 1024, 1025, 1287, 1387], "binary_str": [761, 847], "bind": 155, "birthdai": 150, "bit": [71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 415, 416, 417, 418, 420, 421, 647, 693, 847, 1027, 1029, 1030, 1032, 1033, 1243, 1284, 1368, 1387, 1391], "bit_and": 1389, "bit_count": 1389, "bit_length": 1389, "bit_or": 1389, "bit_xor": 1389, "bitmap": [229, 354, 1123, 1368], "bitwis": [367, 414, 419, 422, 634, 761, 762, 763, 764, 765, 847, 1026, 1031, 1034, 1368, 1389, 1395], "bitwise_and": [847, 1368], "bitwise_count_on": [847, 1368], "bitwise_count_zero": [847, 1368], "bitwise_leading_on": [847, 1368], "bitwise_leading_zero": [847, 1368], "bitwise_or": [847, 1368], "bitwise_trailing_on": [847, 1368], "bitwise_trailing_zero": [847, 1368], "bitwise_xor": [847, 1368], "bla": [695, 702, 1286, 1293], "black": [262, 354, 407, 408, 409, 410, 413], "blindli": [557, 1182], "block": [21, 64, 242, 319, 354, 870, 887, 912, 929, 938, 939, 949, 966, 1266, 1268, 1368], "blue": [56, 97, 98, 407, 408, 409, 410, 413, 758, 847, 1357, 1368], "bob": [150, 270, 354, 904, 966, 1397], "bodi": [41, 354, 358], "bold": [41, 354], "bom": [38, 48, 354, 966], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 38, 40, 41, 47, 48, 49, 50, 51, 52, 54, 55, 57, 63, 64, 65, 96, 97, 131, 132, 133, 134, 136, 137, 138, 145, 146, 147, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 207, 209, 213, 214, 215, 216, 221, 223, 228, 233, 234, 235, 236, 240, 241, 242, 243, 247, 250, 251, 252, 255, 257, 258, 267, 276, 278, 282, 283, 287, 288, 289, 290, 295, 298, 300, 301, 304, 307, 309, 312, 313, 317, 318, 319, 320, 323, 324, 326, 328, 336, 338, 341, 344, 354, 365, 366, 367, 368, 369, 379, 382, 383, 386, 390, 391, 399, 404, 407, 408, 410, 413, 424, 425, 426, 430, 438, 439, 440, 441, 442, 443, 444, 451, 463, 464, 480, 497, 498, 499, 500, 502, 503, 519, 521, 522, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 553, 557, 560, 562, 564, 573, 580, 585, 586, 592, 593, 594, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 629, 630, 632, 634, 635, 637, 638, 642, 645, 647, 656, 657, 658, 660, 662, 664, 666, 668, 669, 671, 673, 677, 678, 679, 681, 686, 688, 689, 692, 693, 694, 695, 696, 698, 704, 705, 706, 708, 716, 717, 718, 721, 722, 724, 730, 732, 733, 735, 737, 741, 743, 744, 753, 755, 758, 761, 762, 763, 764, 765, 767, 770, 771, 772, 773, 776, 777, 779, 780, 781, 786, 787, 789, 790, 795, 801, 802, 805, 806, 807, 809, 813, 819, 822, 825, 826, 829, 831, 834, 835, 837, 838, 847, 864, 866, 867, 869, 870, 874, 876, 880, 883, 884, 887, 888, 892, 893, 898, 903, 908, 911, 912, 919, 921, 923, 924, 928, 929, 930, 931, 932, 935, 940, 941, 945, 947, 950, 953, 966, 971, 972, 974, 979, 980, 991, 994, 995, 998, 1002, 1003, 1011, 1016, 1019, 1020, 1022, 1025, 1036, 1037, 1038, 1040, 1043, 1045, 1049, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1068, 1080, 1081, 1101, 1119, 1121, 1122, 1124, 1126, 1127, 1134, 1136, 1144, 1145, 1148, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1173, 1174, 1178, 1182, 1185, 1187, 1189, 1198, 1205, 1211, 1218, 1230, 1232, 1235, 1236, 1239, 1241, 1242, 1243, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1267, 1268, 1269, 1273, 1278, 1280, 1283, 1284, 1285, 1286, 1287, 1289, 1295, 1296, 1297, 1299, 1307, 1308, 1309, 1312, 1313, 1315, 1321, 1323, 1324, 1326, 1328, 1343, 1348, 1349, 1353, 1354, 1357, 1368, 1377, 1378, 1380, 1386, 1391, 1396], "boolean": [57, 96, 181, 213, 234, 236, 282, 300, 317, 354, 366, 367, 368, 382, 383, 386, 407, 410, 413, 424, 463, 464, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 548, 549, 553, 632, 634, 637, 638, 678, 689, 709, 753, 760, 761, 770, 771, 829, 837, 847, 864, 884, 911, 923, 928, 966, 972, 979, 980, 992, 994, 995, 998, 1019, 1036, 1080, 1081, 1134, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1173, 1174, 1178, 1232, 1235, 1236, 1267, 1268, 1284, 1353, 1359, 1368, 1388], "border": 21, "both": [11, 26, 38, 48, 56, 97, 98, 152, 155, 170, 217, 243, 257, 258, 259, 270, 286, 287, 313, 323, 354, 369, 433, 444, 484, 504, 531, 642, 655, 659, 661, 663, 665, 667, 670, 672, 674, 720, 786, 787, 789, 790, 805, 806, 834, 835, 837, 843, 847, 858, 888, 892, 893, 894, 904, 914, 921, 932, 966, 972, 1050, 1105, 1153, 1311, 1349, 1368, 1396, 1397], "boto3": 33, "bottom": [213, 354, 424, 847, 864, 966], "bottom_k": [317, 354, 424, 752, 753, 847, 928, 966, 1036, 1352, 1353, 1368], "bottom_k_bi": [423, 752, 753, 847, 1035, 1352, 1353, 1368], "bound": [112, 150, 151, 229, 243, 354, 390, 433, 531, 560, 562, 585, 591, 757, 767, 786, 787, 789, 790, 805, 806, 834, 835, 847, 888, 966, 1002, 1050, 1123, 1153, 1185, 1187, 1216, 1356, 1368, 1386], "boundari": [243, 354, 433, 738, 847, 888, 966, 1050, 1329, 1368], "box": [21, 262, 354], "box_draw": 21, "branch": [63, 837, 869, 880, 908, 921, 966], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 130, 141, 142, 143, 144, 145, 146, 154, 160, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 257, 259, 263, 301, 311, 316, 323, 354, 357, 358, 443, 444, 451, 463, 525, 594, 642, 656, 657, 659, 661, 663, 665, 667, 668, 670, 672, 674, 772, 774, 805, 806, 847, 869, 870, 880, 892, 894, 899, 908, 924, 932, 940, 966, 1045, 1061, 1062, 1068, 1080, 1148, 1239, 1252, 1253, 1256, 1258, 1259, 1346, 1351, 1368, 1373], "breakpoint": [444, 525, 642, 847, 1062, 1148, 1239, 1368], "breezah": 165, "breviti": 205, "broadcast": [718, 774, 972, 1309], "broader": 972, "brotli": [47, 51, 354, 966], "brussel": [478, 1099], "bst": [456, 460, 478, 1073, 1077, 1099], "bucket": [40, 154, 166, 167, 170, 354, 479, 492, 525, 847, 1100, 1113, 1148, 1368], "bud": [716, 717, 1307, 1308], "budget": 1377, "buffer": [52, 150, 151, 152, 229, 255, 354, 411, 1023, 1123, 1368], "buffer_s": [255, 354], "bug": [96, 145, 593, 594, 847, 898, 949, 966, 1218, 1368], "build": [62, 132, 972, 1399], "built": 101, "builtin": [148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 222, 354, 446, 847, 875, 966], "bundl": 205, "busi": [451, 463, 772, 1068, 1080], "by_alternate_row": 1, "by_dtyp": 972, "by_first_letter_of_column_nam": 58, "by_first_letter_of_column_valu": 58, "by_index": 972, "by_left": [258, 354, 893, 966], "by_nam": 972, "by_pred": [287, 354], "by_right": [258, 354, 893, 966], "bye": 1, "byi": 1391, "bys": [243, 354, 888, 966], "byte": [36, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 146, 148, 149, 150, 151, 156, 157, 158, 159, 160, 163, 164, 165, 168, 169, 222, 229, 294, 354, 411, 428, 429, 446, 608, 705, 706, 707, 711, 712, 720, 731, 847, 875, 918, 966, 1023, 1041, 1042, 1123, 1296, 1297, 1298, 1302, 1303, 1311, 1322, 1368, 1391], "bytesio": [41, 43, 44, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 222, 294, 354, 446, 608, 847, 875, 918, 966], "c": [1, 11, 36, 38, 40, 43, 44, 47, 52, 58, 60, 65, 105, 132, 134, 136, 138, 141, 147, 155, 165, 209, 210, 213, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 227, 228, 230, 234, 236, 239, 240, 241, 242, 243, 245, 247, 248, 256, 257, 260, 261, 263, 264, 266, 268, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 287, 290, 291, 292, 299, 300, 301, 302, 303, 305, 306, 309, 310, 311, 312, 313, 314, 317, 321, 322, 323, 325, 326, 328, 333, 336, 337, 338, 341, 342, 344, 347, 348, 354, 358, 363, 365, 366, 368, 386, 424, 444, 484, 522, 531, 552, 564, 594, 601, 618, 619, 633, 635, 639, 642, 681, 722, 730, 753, 756, 763, 765, 766, 768, 769, 770, 773, 774, 776, 777, 778, 779, 781, 782, 784, 794, 795, 796, 799, 800, 803, 804, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 826, 828, 830, 831, 832, 836, 843, 847, 864, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 884, 887, 888, 892, 896, 899, 906, 908, 911, 912, 913, 915, 916, 921, 922, 923, 924, 928, 931, 932, 935, 937, 942, 945, 946, 947, 950, 951, 953, 956, 957, 966, 972, 1044, 1062, 1153, 1177, 1239, 1313, 1321, 1335, 1355, 1368, 1378, 1380, 1381, 1383, 1384, 1385, 1386, 1391, 1396], "c00": 972, "c01": 972, "c02": 972, "c03": 972, "c05": 972, "c1": 403, "c123": 1391, "c2": 403, "c20": 972, "c25": 972, "c3": 403, "c40": 972, "c45": 1391, "c4d79b": [41, 354], "c50": 972, "c567": [41, 354], "c60": 972, "c75": 972, "c80": 972, "c8ae6d2b276": [41, 354], "c93": 972, "c95": 972, "c96": 972, "c97": 972, "c98": 972, "c99": 972, "c_btm_by_a": [424, 847], "c_btm_by_b": [424, 847], "c_by_ca": [424, 753, 847], "c_by_cb": [424, 753, 847], "c_c_c": [826, 924, 966], "c_contigu": [312, 354], "c_max": [635, 847], "c_mean_squar": [333, 942], "c_min": [635, 847], "c_top_by_a": [753, 847], "c_top_by_b": [753, 847], "c_total": 1396, "cach": [56, 63, 97, 98, 125, 156, 165, 168, 170, 174, 175, 176, 177, 189, 649, 650, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 730, 732, 733, 737, 847, 858, 869, 880, 908, 921, 966, 1040, 1246, 1247, 1321, 1323, 1324, 1328, 1368], "cadi": [278, 354], "cafe": [735, 1326], "caf\u00e9": [428, 429, 711, 712, 972, 1041, 1042, 1302, 1303], "calamin": 155, "calcul": [41, 47, 51, 57, 221, 243, 302, 325, 354, 447, 500, 501, 502, 503, 543, 555, 574, 581, 587, 591, 656, 668, 686, 691, 757, 759, 779, 823, 824, 828, 836, 847, 874, 888, 925, 933, 966, 1063, 1064, 1124, 1125, 1126, 1127, 1168, 1180, 1199, 1252, 1259, 1278, 1282, 1358, 1368], "calendar": [71, 72, 243, 258, 286, 324, 354, 454, 465, 467, 474, 479, 492, 496, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 791, 834, 835, 847, 888, 893, 914, 966, 1071, 1082, 1087, 1095, 1100, 1113, 1117, 1125, 1368], "calendar_year": [465, 496], "call": [10, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 63, 136, 145, 147, 150, 151, 152, 154, 155, 156, 160, 162, 165, 166, 168, 169, 170, 174, 175, 176, 177, 181, 185, 195, 205, 213, 242, 243, 260, 262, 286, 301, 312, 317, 353, 354, 423, 424, 439, 442, 451, 463, 593, 594, 618, 619, 621, 623, 625, 626, 649, 650, 682, 752, 753, 772, 778, 843, 847, 864, 869, 880, 887, 888, 908, 914, 921, 924, 928, 963, 964, 965, 966, 972, 1035, 1036, 1068, 1080, 1218, 1247, 1274, 1348, 1352, 1353, 1368, 1378, 1382, 1396], "callabl": [52, 53, 54, 58, 59, 60, 61, 96, 145, 165, 236, 262, 277, 283, 340, 354, 403, 585, 593, 594, 619, 620, 639, 657, 781, 782, 795, 808, 809, 821, 847, 898, 907, 912, 949, 966, 1015, 1210, 1218, 1253, 1368], "callback": [47, 51, 52, 53, 54, 142, 144, 354, 966], "caller": [96, 153, 270, 354, 585, 898, 904, 949, 966], "cam": [283, 354, 912, 966], "can": [1, 15, 28, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 56, 57, 63, 71, 72, 74, 88, 96, 97, 98, 134, 145, 150, 151, 152, 154, 155, 156, 160, 161, 162, 165, 166, 168, 169, 170, 171, 179, 180, 181, 185, 187, 190, 195, 205, 207, 213, 215, 225, 226, 227, 236, 238, 242, 243, 250, 252, 254, 257, 258, 262, 263, 274, 278, 286, 288, 289, 292, 294, 295, 300, 311, 312, 316, 317, 318, 322, 328, 331, 340, 354, 357, 366, 403, 424, 439, 442, 443, 446, 451, 463, 471, 472, 474, 478, 481, 484, 492, 501, 507, 510, 531, 557, 585, 593, 594, 601, 605, 608, 609, 615, 618, 619, 621, 623, 625, 626, 635, 640, 642, 647, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 679, 681, 686, 689, 694, 703, 710, 716, 717, 718, 725, 726, 727, 730, 741, 753, 770, 772, 785, 788, 795, 797, 801, 802, 805, 809, 826, 837, 843, 846, 847, 858, 864, 865, 869, 870, 875, 877, 878, 880, 888, 892, 893, 899, 914, 916, 918, 919, 921, 923, 924, 928, 935, 938, 939, 966, 972, 974, 1015, 1036, 1061, 1068, 1080, 1092, 1093, 1095, 1099, 1100, 1102, 1105, 1113, 1125, 1131, 1153, 1182, 1210, 1218, 1223, 1237, 1239, 1243, 1247, 1266, 1268, 1269, 1272, 1278, 1285, 1286, 1294, 1301, 1307, 1308, 1309, 1316, 1317, 1318, 1321, 1346, 1348, 1353, 1368, 1373, 1383, 1396], "cancel": [869, 966], "candid": [701, 703, 1292, 1294], "cannot": [1, 47, 48, 49, 50, 51, 63, 64, 107, 110, 150, 151, 155, 156, 158, 160, 161, 162, 170, 187, 205, 258, 262, 289, 290, 312, 331, 340, 354, 408, 484, 504, 573, 594, 609, 677, 696, 722, 743, 809, 847, 869, 870, 880, 893, 908, 921, 939, 941, 949, 966, 972, 1020, 1105, 1198, 1218, 1265, 1287, 1313, 1348, 1368], "capabl": [1, 41, 354], "capac": [229, 298, 354, 1123, 1273, 1368], "capit": [738, 1329], "captur": [701, 703, 716, 717, 1292, 1294, 1307, 1308], "car": [283, 307, 354, 652, 847, 912, 966], "cardin": [212, 354, 370, 766, 847, 863, 966, 982, 1368], "care": [41, 295, 354, 594, 635, 679, 847, 919, 966, 1269, 1368], "cars_revers": [652, 847], "cartesian": [257, 354, 892, 966], "case": [41, 56, 57, 64, 96, 105, 131, 133, 134, 135, 137, 145, 147, 152, 159, 160, 169, 170, 187, 231, 243, 255, 262, 278, 286, 288, 289, 308, 311, 312, 354, 452, 501, 593, 605, 606, 619, 635, 655, 693, 694, 702, 704, 705, 706, 716, 717, 718, 738, 837, 847, 870, 888, 911, 914, 966, 972, 1069, 1125, 1130, 1284, 1285, 1293, 1295, 1296, 1297, 1307, 1308, 1309, 1329, 1346, 1368], "cast": [1, 40, 55, 59, 60, 131, 133, 134, 137, 147, 170, 174, 175, 176, 177, 236, 243, 263, 277, 286, 311, 312, 316, 328, 354, 369, 441, 442, 453, 481, 484, 495, 634, 639, 640, 647, 649, 655, 709, 710, 740, 747, 751, 775, 776, 827, 847, 859, 888, 899, 907, 914, 935, 966, 972, 1045, 1059, 1060, 1070, 1102, 1105, 1116, 1237, 1243, 1300, 1301, 1331, 1338, 1344, 1348, 1350, 1351, 1368, 1389], "cast_opt": 170, "cast_str_to_int": [277, 354, 907, 966], "cast_to_supertyp": [147, 847], "cat": [27, 56, 97, 98, 444, 642, 693, 695, 736, 739, 751, 776, 842, 847, 972, 1062, 1148, 1239, 1284, 1286, 1327, 1330, 1364, 1368], "catalog": [0, 859], "catalog_nam": [191, 193, 194, 195], "cataloginfo": [192, 203], "categor": [40, 56, 75, 97, 98, 100, 174, 175, 176, 177, 257, 309, 354, 426, 427, 428, 429, 430, 444, 642, 649, 650, 751, 847, 972, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1062, 1239, 1246, 1247, 1350, 1368], "categori": [41, 56, 75, 98, 309, 354, 427, 444, 525, 642, 847, 1039, 1062, 1148, 1239, 1343, 1368], "categorical_as_str": [174, 175, 176, 177], "categoricalord": 69, "categoricaltyp": [306, 354], "caus": [113, 122, 132, 150, 151, 152, 165, 209, 231, 312, 354, 593, 847, 1130, 1348, 1368], "cba": 727, "cbrt": [847, 1368, 1389], "cbrt_a": 1390, "cc": [504, 793, 847, 972, 1063, 1368, 1391], "ccc": [1, 41, 354, 741, 743, 744, 972, 1391], "ccy": 1399, "cd": [717, 741, 743, 744, 972], "cd34": 717, "cdatainterfac": [132, 208, 975], "cde": [972, 1391], "cdt": [479, 492, 1100, 1113], "ceil": [59, 847, 1368, 1389], "ceil_a": 1390, "cell": [16, 17, 41, 278, 354], "cent": [454, 1307], "center": [16, 17, 41, 354, 500, 502, 503, 656, 657, 658, 660, 662, 664, 666, 668, 669, 671, 673, 847, 1124, 1126, 1127, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1368], "central": [166, 167, 205, 543, 686, 847, 1168, 1278, 1368], "centuri": 1392, "certain": [52, 248, 324, 354, 726, 727, 843, 862, 869, 908, 966, 1368], "certainli": [730, 732, 733, 1321, 1323, 1324], "cest": [478, 1099], "cet": [478, 1099], "cfg": [2, 4, 18, 205], "cfg_ascii_fram": 205, "cfg_markdown": 205, "cfg_verbos": 205, "cfoo": [937, 966], "chain": [618, 619, 621, 623, 625, 626, 837], "chanc": [178, 181, 185, 1399], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 63, 64, 73, 79, 130, 132, 138, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 154, 155, 156, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 213, 243, 257, 259, 263, 278, 286, 301, 306, 311, 316, 317, 323, 324, 330, 354, 357, 358, 424, 443, 444, 447, 451, 463, 484, 500, 502, 503, 525, 594, 635, 636, 642, 649, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 734, 753, 772, 774, 805, 806, 823, 824, 837, 847, 864, 869, 870, 880, 888, 892, 894, 899, 908, 914, 924, 928, 932, 938, 940, 966, 972, 1044, 1045, 1061, 1062, 1068, 1080, 1105, 1122, 1124, 1126, 1127, 1148, 1234, 1239, 1246, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1273, 1325, 1342, 1346, 1351, 1368, 1373, 1396], "changes_length": [147, 847], "char": [28, 150, 165, 702, 1293], "char_length": 1391, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 48, 99, 149, 150, 151, 153, 165, 354, 428, 429, 474, 699, 700, 702, 707, 711, 712, 714, 715, 716, 717, 720, 721, 722, 725, 726, 727, 728, 729, 731, 738, 740, 908, 966, 972, 1041, 1042, 1095, 1290, 1291, 1293, 1298, 1302, 1303, 1305, 1306, 1307, 1308, 1311, 1312, 1313, 1316, 1317, 1318, 1322, 1329, 1331, 1391], "character_length": 1391, "characterist": [181, 185], "charli": [150, 1397], "chart": [41, 354, 357, 908, 966, 1368, 1373], "cheap": [215, 216, 293, 329, 354, 867, 868, 917, 936, 966, 1049, 1051, 1368], "cheaper": [560, 1185], "check": [40, 72, 107, 150, 151, 165, 174, 175, 176, 177, 189, 228, 253, 257, 258, 354, 386, 407, 410, 413, 426, 430, 522, 531, 535, 553, 693, 698, 705, 724, 847, 892, 893, 898, 966, 998, 1019, 1022, 1025, 1038, 1043, 1122, 1144, 1145, 1155, 1158, 1165, 1167, 1178, 1284, 1289, 1296, 1315, 1368], "check_column_ord": [174, 175], "check_dtyp": [174, 175, 176, 177, 971, 1122, 1368], "check_exact": [174, 175, 176, 177], "check_nam": [176, 177, 1122, 1368], "check_ord": [176, 177], "check_order_observ": 940, "check_row_ord": [174, 175], "check_sorted": [258, 354, 893, 966], "children": 141, "choos": [47, 49, 51, 243, 278, 354, 484, 888, 966, 1105], "chrono": [38, 48, 101, 354, 481, 484, 730, 732, 733, 737, 966, 1102, 1105, 1321, 1323, 1324, 1328, 1391, 1392], "chunk": [15, 51, 140, 150, 151, 154, 160, 162, 165, 166, 168, 169, 170, 181, 185, 231, 256, 273, 312, 354, 369, 646, 847, 966, 981, 1048, 1130, 1142, 1224, 1242, 1342, 1348, 1368], "chunk_length": 1368, "chunkedarrai": [131, 273, 354], "citi": [716, 717], "clang": 173, "clariti": [287, 354], "class": [1, 18, 32, 33, 34, 35, 52, 53, 54, 55, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 116, 118, 141, 142, 143, 144, 178, 179, 190, 196, 197, 199, 200, 289, 294, 354, 608, 805, 834, 843, 847, 853, 859, 872, 879, 915, 934, 940, 941, 966, 971, 1347, 1368, 1372, 1380, 1396], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 222, 354, 446, 516, 847, 875, 966, 1378, 1396], "claus": [859, 1386, 1395], "clean": [730, 732, 733, 1321, 1323, 1324], "cleaner": 205, "cleanli": [11, 241, 354, 1396], "clear": [56, 97, 216, 354, 868, 966, 1051, 1368], "clearer": 134, "clickhous": 153, "client": [33, 152, 190], "clip": [847, 1368], "clipboard": [37, 149, 354, 859], "clone": [133, 134, 135, 136, 137, 215, 312, 354, 867, 966, 1049, 1368], "close": [41, 48, 49, 50, 51, 53, 152, 243, 286, 301, 354, 444, 531, 590, 642, 655, 659, 661, 663, 665, 667, 670, 672, 674, 686, 786, 787, 789, 790, 805, 806, 834, 835, 847, 888, 914, 924, 966, 1062, 1153, 1239, 1278, 1368], "closedinterv": [243, 286, 354, 531, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 805, 806, 834, 835, 847, 888, 914, 966, 1153, 1368], "closest": [131, 258, 354, 893, 966, 1385, 1390], "closur": [659, 661, 670, 672, 674, 847], "cloud": [35, 38, 40, 43, 47, 48, 49, 50, 51, 96, 152, 154, 160, 162, 165, 166, 167, 168, 169, 170, 171, 195, 354, 859, 910, 966], "cloudi": [716, 717], "cloudpickl": 173, "cluster": 170, "cluster_with_column": [63, 869, 880, 908, 921, 940, 966], "co": [702, 847, 1293, 1368, 1389], "coalesc": [65, 257, 258, 323, 354, 529, 704, 706, 730, 837, 847, 892, 893, 932, 966, 1297, 1321, 1384, 1389], "code": [205, 217, 257, 354, 407, 408, 409, 410, 413, 446, 594, 679, 847, 875, 892, 896, 966, 1269, 1368, 1378], "codebas": 205, "coeffici": [219, 354, 686, 847, 1278, 1368, 1385], "coerc": [65, 648, 847, 1245, 1368], "coerce_int96_timestamp_unit": 55, "coercion": [63, 263, 354, 648, 847, 869, 880, 899, 908, 921, 966, 1245, 1368], "col": [1, 13, 38, 41, 48, 52, 57, 58, 59, 60, 135, 137, 165, 179, 181, 234, 242, 243, 248, 251, 253, 257, 258, 259, 262, 263, 274, 277, 278, 282, 286, 287, 292, 300, 311, 316, 320, 322, 328, 333, 354, 358, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 419, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 524, 525, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 539, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 620, 622, 624, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 766, 770, 771, 773, 774, 775, 776, 778, 780, 783, 785, 786, 788, 789, 791, 795, 796, 797, 798, 799, 800, 810, 812, 814, 815, 817, 820, 821, 825, 826, 828, 830, 832, 833, 836, 837, 847, 884, 887, 888, 890, 892, 893, 894, 899, 907, 911, 914, 916, 923, 924, 930, 935, 937, 942, 966, 972, 1095, 1099, 1182, 1266, 1268, 1297, 1301, 1321, 1368, 1399], "col0": [181, 1399], "col1": [181, 278, 354, 966, 1399], "col2": [181, 278, 354, 966, 1399], "col3": [278, 354, 1399], "col4": 1399, "col_idx": 211, "col_nam": [277, 354, 594, 837, 847, 907, 966], "cole": 146, "coli": [41, 354, 625, 626, 972, 1399], "collaps": [63, 869, 880, 908, 921, 966], "collapse_join": [63, 869, 880, 908, 921, 940, 966], "collect": [10, 48, 49, 50, 51, 55, 60, 63, 64, 96, 130, 165, 166, 167, 171, 181, 182, 185, 225, 226, 260, 278, 301, 306, 319, 320, 354, 504, 535, 574, 575, 576, 577, 594, 775, 793, 797, 825, 826, 829, 847, 862, 863, 864, 866, 867, 870, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 916, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 937, 938, 939, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 963, 965, 966, 972, 1158, 1199, 1200, 1201, 1202, 1368, 1378, 1379, 1380, 1383, 1384, 1396, 1397, 1399], "collect_al": [60, 64, 130, 869, 870, 966], "collect_all_async": [870, 966], "collect_async": [64, 966], "collect_schema": [60, 260, 354, 872, 879, 907, 915, 934, 966], "collis": 65, "colnam": [25, 41, 165, 354], "color": [56, 97, 98, 340, 354, 357, 407, 408, 409, 410, 413, 696, 758, 847, 949, 1019, 1020, 1021, 1022, 1025, 1287, 1357, 1368, 1391], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 51, 52, 53, 54, 56, 57, 58, 65, 72, 88, 98, 102, 106, 131, 133, 134, 135, 136, 137, 138, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 181, 197, 200, 210, 211, 213, 214, 217, 219, 220, 223, 224, 225, 226, 227, 230, 234, 235, 238, 239, 241, 242, 243, 247, 248, 253, 254, 255, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 295, 300, 302, 303, 304, 307, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 339, 354, 357, 358, 365, 366, 368, 379, 388, 397, 399, 402, 411, 424, 433, 437, 438, 444, 454, 455, 457, 458, 459, 462, 464, 465, 466, 467, 468, 469, 470, 473, 475, 476, 477, 480, 481, 482, 484, 493, 494, 496, 504, 506, 510, 512, 525, 530, 531, 546, 552, 558, 560, 580, 584, 585, 594, 600, 601, 603, 605, 607, 618, 620, 621, 622, 623, 624, 625, 626, 635, 642, 646, 648, 649, 650, 651, 653, 654, 655, 659, 661, 663, 665, 667, 670, 672, 674, 681, 682, 688, 689, 692, 700, 705, 707, 708, 718, 722, 723, 730, 731, 732, 733, 734, 735, 737, 742, 745, 753, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 843, 847, 864, 866, 873, 876, 877, 878, 879, 881, 884, 887, 888, 892, 893, 894, 898, 899, 900, 901, 902, 903, 905, 906, 909, 911, 912, 914, 915, 916, 917, 919, 923, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 948, 949, 966, 971, 972, 979, 980, 1000, 1009, 1011, 1014, 1023, 1036, 1040, 1044, 1050, 1055, 1056, 1062, 1071, 1074, 1075, 1076, 1079, 1081, 1082, 1086, 1087, 1088, 1090, 1091, 1094, 1096, 1097, 1101, 1102, 1103, 1105, 1114, 1115, 1117, 1129, 1148, 1152, 1177, 1183, 1185, 1205, 1209, 1239, 1245, 1247, 1248, 1251, 1272, 1283, 1291, 1296, 1299, 1313, 1314, 1321, 1323, 1324, 1325, 1326, 1328, 1334, 1337, 1343, 1344, 1353, 1357, 1368, 1384, 1385, 1386, 1388, 1390, 1391, 1393, 1394, 1397, 1398, 1399], "column_0": [1, 262, 318, 354, 910, 966], "column_1": [262, 318, 354, 1393], "column_2": [318, 354, 1393], "column_abc": 16, "column_format": [41, 354], "column_nam": [283, 318, 354, 912, 966], "column_tot": [41, 354], "column_width": [41, 354], "column_x": [150, 151, 155, 161, 165], "column_xyz": 16, "columnar": [135, 137, 255, 288, 354], "columnformatdict": [41, 354], "columninfo": [200, 203], "columnnameorselector": [214, 223, 225, 226, 269, 276, 278, 289, 309, 319, 320, 321, 322, 354, 866, 876, 877, 878, 903, 929, 930, 931, 966], "columnnotfounderror": [238, 239, 354], "columntotalsdefinit": [41, 354], "columnwidthsdefinit": [41, 354], "colx": [41, 354, 625, 626, 972, 1383, 1399], "colz": [972, 1399], "com": [33, 41, 153, 354, 500, 502, 503, 701, 702, 703, 847, 1124, 1126, 1127, 1292, 1293, 1294, 1368], "combin": [47, 51, 63, 65, 130, 234, 243, 244, 258, 278, 282, 286, 324, 354, 367, 380, 492, 501, 514, 609, 634, 650, 655, 725, 726, 727, 786, 787, 789, 790, 834, 835, 837, 847, 869, 880, 888, 893, 908, 911, 914, 921, 966, 1100, 1113, 1125, 1247, 1316, 1317, 1318, 1368, 1384, 1397], "come": [125, 153, 243, 319, 321, 354, 451, 463, 471, 472, 543, 585, 772, 837, 847, 888, 929, 931, 966, 1068, 1080, 1092, 1093, 1168, 1368], "comm_subexpr_elim": [63, 869, 880, 908, 921, 940, 966], "comm_subplan_elim": [63, 869, 880, 908, 921, 940, 966], "comma": [37, 38, 150, 151, 165, 354], "comment": [150, 151, 165, 196, 197, 199, 200], "comment_prefix": [150, 151, 165], "common": [55, 57, 63, 65, 105, 130, 150, 151, 165, 323, 354, 619, 853, 869, 880, 908, 921, 932, 966, 1372], "commonli": 837, "compact": 1394, "compani": 153, "compar": [170, 174, 175, 176, 177, 228, 234, 282, 354, 498, 499, 519, 521, 531, 545, 592, 629, 630, 847, 884, 911, 966, 1044, 1121, 1122, 1230, 1368], "comparison": [171, 234, 282, 354, 884, 911, 966], "compat": [21, 41, 43, 44, 47, 49, 51, 100, 138, 306, 354, 693, 695, 701, 702, 703, 705, 716, 717, 966, 972, 1105, 1284, 1286, 1292, 1293, 1294, 1296, 1307, 1308, 1342, 1368, 1378, 1391, 1392, 1396], "compat_level": [43, 44, 49, 306, 354, 966, 1342, 1368], "compatibleframetyp": [1379, 1381, 1396], "compatlevel": [43, 44, 49, 306, 354, 966, 1342, 1368], "competit": [645, 847, 1241, 1368], "compil": [62, 384, 385, 550, 551, 970, 996, 997, 1175, 1176], "complement": 972, "complet": [150, 152, 165, 1397], "complex": [182, 423, 424, 443, 752, 753, 847, 1035, 1036, 1061, 1352, 1353, 1368], "compliant": [41, 354, 484, 1105], "compon": [455, 480, 484, 730, 733, 791, 1072, 1101, 1105, 1321, 1324], "compos": 1397, "composit": [88, 1399], "compound": [138, 289, 354, 972], "comprehens": 179, "compress": [36, 40, 43, 44, 47, 49, 51, 354, 653, 847, 966, 1250, 1368], "compression_level": [47, 51, 354, 966], "comput": [63, 65, 103, 229, 242, 258, 278, 313, 319, 333, 346, 354, 362, 371, 372, 373, 374, 375, 376, 393, 394, 395, 400, 401, 405, 431, 434, 435, 436, 439, 440, 441, 442, 448, 497, 500, 501, 502, 503, 505, 543, 567, 568, 569, 570, 574, 575, 576, 577, 581, 587, 588, 589, 590, 615, 635, 636, 641, 645, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 683, 684, 685, 686, 690, 749, 750, 758, 763, 765, 768, 769, 770, 777, 779, 792, 813, 823, 824, 837, 847, 862, 869, 887, 890, 892, 893, 910, 929, 937, 942, 955, 966, 977, 983, 984, 985, 986, 987, 988, 1005, 1006, 1007, 1012, 1013, 1017, 1046, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1065, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1168, 1192, 1193, 1194, 1195, 1199, 1200, 1201, 1202, 1206, 1212, 1213, 1214, 1215, 1223, 1234, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1275, 1276, 1277, 1278, 1281, 1340, 1341, 1349, 1357, 1368, 1390, 1393], "computecontext": [910, 966], "computeerror": [605, 735, 837, 1326], "concat": [56, 97, 98, 106, 151, 258, 354, 893, 937, 966, 1048, 1142, 1224, 1242, 1368, 1389], "concat_list": [557, 792], "concat_w": [301, 354, 826, 924, 966, 1389, 1396], "concaten": [56, 65, 97, 98, 236, 277, 354, 639, 692, 708, 774, 775, 776, 847, 907, 966, 1048, 1224, 1283, 1299, 1368, 1391], "concatmethod": 65, "conclus": [135, 137, 354, 966], "concret": [181, 185], "condit": [41, 226, 234, 259, 282, 287, 354, 426, 430, 510, 531, 698, 724, 771, 795, 837, 847, 884, 894, 911, 966, 1153, 1368, 1384, 1389, 1395], "conditional_format": [41, 354], "conditionalformatdict": [41, 354], "config": [0, 57, 221, 292, 311, 328, 354, 694, 704, 706, 718, 786, 787, 789, 790, 791, 859, 869, 874, 916, 935, 966, 1285, 1297, 1309], "configur": [5, 33, 40, 55, 154, 166, 167, 170, 205, 354, 357, 860, 869, 880, 908, 921, 941, 966, 1368, 1373], "configure_axisx": [354, 357, 1368, 1373], "configure_point": [354, 357, 1368, 1373], "conflat": [531, 847], "conform": 1399, "confus": [105, 366, 538, 539, 718, 847], "conjunct": [41, 97, 152, 155, 161, 179, 354, 801, 804, 966], "conn": 152, "connect": [38, 39, 43, 47, 48, 49, 50, 51, 75, 150, 152, 153, 156, 158, 160, 162, 165, 168, 169, 170, 171, 195, 354, 860, 966], "connectionorcursor": [39, 152, 354], "connector": 153, "connectorx": [152, 153, 173], "consecut": [233, 354, 406, 509, 515, 692, 708, 716, 847, 883, 966, 1018, 1133, 1138, 1283, 1299, 1308, 1368], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 97, 98, 130, 141, 142, 143, 144, 145, 146, 150, 151, 152, 154, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 213, 225, 226, 228, 254, 259, 262, 263, 269, 288, 301, 311, 316, 317, 319, 321, 323, 354, 357, 358, 424, 433, 443, 444, 451, 463, 514, 525, 593, 594, 601, 617, 618, 621, 623, 625, 626, 642, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 753, 772, 774, 781, 795, 805, 806, 843, 847, 864, 869, 870, 877, 878, 880, 894, 899, 903, 908, 921, 924, 928, 929, 931, 932, 940, 949, 966, 972, 1036, 1040, 1045, 1050, 1061, 1062, 1068, 1080, 1122, 1148, 1218, 1239, 1252, 1253, 1256, 1258, 1259, 1266, 1268, 1346, 1351, 1353, 1368, 1373, 1378], "consider": 146, "consist": [242, 276, 312, 354, 730, 786, 787, 805, 837, 887, 966, 972, 981, 1130, 1321, 1348, 1368], "consola": [41, 354], "const": 11, "constant": [229, 286, 354, 452, 501, 507, 806, 847, 914, 966, 1069, 1123, 1125, 1131, 1368], "constrain": [57, 165, 225, 226, 354, 877, 878, 966, 972], "constraint": [234, 282, 354, 510, 618, 619, 621, 623, 625, 626, 837, 847, 884, 911, 966, 972, 1398], "construct": [56, 97, 98, 105, 131, 133, 134, 135, 136, 137, 138, 146, 152, 354, 516, 819, 822, 838, 843, 847, 875, 966, 1040, 1368, 1383], "construct_categor": 56, "constructor": [146, 155, 185], "consumpt": [52, 53, 54], "contain": [5, 38, 39, 40, 41, 48, 52, 53, 54, 57, 62, 101, 133, 136, 138, 147, 152, 153, 154, 162, 166, 167, 170, 180, 181, 183, 185, 213, 218, 225, 226, 227, 243, 251, 256, 274, 311, 312, 316, 317, 323, 335, 354, 366, 368, 391, 410, 413, 426, 430, 446, 522, 535, 564, 594, 692, 694, 698, 701, 703, 705, 708, 710, 723, 724, 740, 762, 763, 764, 765, 776, 809, 837, 847, 864, 872, 875, 877, 878, 879, 888, 908, 928, 932, 944, 966, 972, 979, 980, 1003, 1038, 1043, 1144, 1145, 1189, 1224, 1283, 1285, 1289, 1292, 1294, 1296, 1299, 1301, 1314, 1315, 1331, 1342, 1348, 1368, 1386], "contains_with_expr": 407, "contains_with_lit": 407, "content": [14, 48, 49, 50, 51, 682, 847, 966, 970, 1274, 1368], "context": [56, 97, 98, 142, 144, 187, 274, 301, 354, 364, 510, 557, 593, 594, 605, 688, 689, 758, 778, 794, 797, 803, 804, 809, 818, 822, 825, 846, 847, 858, 859, 910, 924, 937, 966, 1182, 1357, 1368, 1383, 1396, 1398], "contigu": [65, 131, 132, 136, 150, 151, 154, 156, 158, 160, 162, 165, 166, 168, 169, 170, 281, 312, 354], "continu": [444, 642, 686, 847, 1062, 1239, 1278, 1368, 1385], "contrast": 791, "control": [11, 12, 41, 51, 64, 65, 155, 179, 181, 300, 301, 311, 354, 650, 689, 826, 847, 869, 870, 880, 908, 921, 923, 924, 941, 963, 966, 1247, 1346, 1368, 1380, 1383, 1396], "conveni": [231, 316, 354, 958, 981, 1130, 1368, 1378], "convers": [132, 209, 255, 256, 288, 289, 308, 312, 313, 354, 456, 730, 732, 733, 737, 859, 1073, 1321, 1323, 1324, 1328, 1348, 1349, 1368, 1394, 1396], "convert": [40, 55, 101, 132, 136, 147, 154, 155, 161, 166, 209, 289, 307, 308, 309, 310, 311, 312, 313, 315, 316, 354, 402, 403, 445, 456, 481, 484, 584, 585, 593, 619, 644, 703, 730, 732, 733, 734, 735, 737, 742, 847, 966, 1014, 1015, 1044, 1073, 1102, 1105, 1209, 1210, 1294, 1321, 1323, 1324, 1325, 1326, 1328, 1334, 1337, 1345, 1346, 1347, 1348, 1349, 1351, 1368, 1391, 1393, 1394, 1396], "convert_time_zon": [478, 1099], "coo": [283, 354, 912, 966], "coord": 745, "coordin": [41, 354, 1152, 1368], "copi": [37, 131, 132, 149, 207, 209, 215, 216, 256, 306, 312, 313, 328, 354, 507, 847, 867, 868, 935, 966, 974, 1049, 1051, 1131, 1342, 1347, 1348, 1349, 1368, 1396], "corasick": [694, 704, 706, 718, 1285, 1295, 1297, 1309], "core": [1, 259, 354, 894, 966, 1396, 1399], "cores_right": [259, 354, 894, 966], "corner": [21, 41, 138, 354], "corr": [354, 1389], "corrcoef": [219, 354], "correct": [96, 147, 155, 161, 502, 503, 543, 585, 656, 668, 686, 847, 898, 966, 1126, 1127, 1168, 1252, 1259, 1278, 1368], "correctli": [41, 354, 593, 795, 847], "correl": [219, 354, 777, 823, 1385], "correlationmethod": 777, "correspond": [243, 258, 286, 312, 324, 354, 424, 465, 474, 479, 492, 594, 645, 655, 659, 661, 663, 665, 667, 670, 672, 674, 753, 786, 787, 789, 790, 834, 835, 847, 869, 888, 893, 914, 966, 1082, 1095, 1100, 1113, 1241, 1368, 1385], "cosd": 1389, "cosh": [847, 1368], "cosin": [371, 372, 434, 435, 593, 847, 983, 984, 1052, 1053, 1368, 1393], "cost": [259, 289, 354, 716, 894, 966, 1308], "cost_usd": [716, 1308], "cot": [847, 1368, 1389], "cotang": [436, 847, 1054, 1368, 1393], "cotd": 1389, "could": [40, 94, 103, 354, 683, 781, 791, 795, 837, 847, 866, 874, 966, 1275, 1368], "count": [41, 171, 212, 221, 243, 274, 275, 286, 318, 324, 330, 345, 354, 370, 387, 396, 438, 451, 463, 501, 525, 546, 554, 566, 571, 594, 617, 633, 645, 655, 659, 661, 663, 665, 667, 670, 672, 674, 695, 756, 758, 766, 772, 780, 804, 817, 847, 863, 874, 888, 906, 914, 938, 954, 966, 972, 982, 999, 1008, 1056, 1063, 1068, 1080, 1125, 1148, 1171, 1179, 1191, 1196, 1225, 1233, 1286, 1355, 1357, 1368, 1373, 1377, 1389], "count_digit": 695, "count_num": [41, 354], "counterpart": 146, "countri": [258, 354, 452, 893, 966, 1069], "country_holidai": [451, 463, 772, 1068, 1080], "covar": 1385, "covar_samp": 1385, "covari": [147, 779, 824, 847, 1385], "cover": 11, "cow": [714, 715, 1305, 1306], "cpu": [150, 151, 173, 311, 354, 941, 1346, 1368], "crab": [693, 705, 1284, 1296], "crate": [38, 48, 101, 354, 693, 695, 701, 702, 703, 705, 716, 717, 730, 732, 733, 737, 966, 972, 1284, 1286, 1292, 1293, 1294, 1296, 1307, 1308, 1321, 1323, 1324, 1328], "creat": [39, 41, 48, 49, 50, 51, 52, 54, 56, 98, 131, 135, 137, 150, 151, 152, 153, 156, 158, 162, 166, 167, 179, 180, 181, 182, 183, 184, 185, 186, 205, 215, 216, 243, 275, 278, 286, 311, 312, 324, 328, 331, 354, 357, 358, 455, 479, 492, 501, 525, 585, 593, 646, 655, 659, 661, 663, 665, 667, 670, 672, 674, 775, 785, 786, 787, 788, 789, 790, 791, 805, 833, 834, 835, 837, 843, 847, 867, 868, 874, 880, 888, 914, 935, 939, 966, 970, 971, 1049, 1051, 1062, 1072, 1100, 1113, 1125, 1148, 1231, 1239, 1242, 1346, 1348, 1368, 1373, 1395, 1396, 1399], "create_async_engin": 152, "create_engin": [39, 354], "created_at": [196, 199, 200], "created_bi": [196, 199, 200], "creation": [142, 144, 151], "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 354, 859, 966], "credential_provid": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 354, 966], "credentialproviderfunct": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 354, 966], "cross": [257, 354, 892, 966, 1384], "crustacean": [705, 1296], "cst": [479, 492, 1100, 1113], "csv": [37, 38, 48, 49, 50, 51, 52, 53, 54, 149, 150, 151, 155, 156, 165, 198, 354, 859, 966], "csvencod": [150, 151, 165], "csvquotestyl": [38, 48, 354, 966], "ctx": [52, 53, 54, 1377, 1379, 1380, 1381, 1382, 1383, 1396], "cube": [1, 61, 431, 640, 847, 1046, 1368, 1390], "cuda": 941, "cum_count": [847, 1368], "cum_count_revers": [438, 847], "cum_max": [847, 1368], "cum_max_all_fil": [439, 847], "cum_max_revers": [439, 847], "cum_min": [847, 1368], "cum_min_revers": [440, 847], "cum_prod": [363, 847, 1368], "cum_prod_revers": [441, 847], "cum_reduc": 781, "cum_sum": [528, 635, 746, 784, 847, 890, 966, 1167, 1368], "cum_sum_revers": [442, 847], "cumsum_horizont": 783, "cumul": [438, 439, 440, 441, 442, 780, 781, 782, 783, 784, 847, 1056, 1057, 1058, 1059, 1060, 1368], "cumulative_ev": [847, 1368], "cumulative_sal": [635, 847], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 138, 142, 143, 144, 152, 153, 160, 162, 165, 168, 169, 170, 178, 179, 181, 182, 183, 184, 185, 186, 195, 215, 216, 223, 257, 258, 283, 301, 311, 316, 354, 357, 358, 460, 585, 636, 847, 862, 867, 868, 876, 892, 893, 912, 921, 924, 941, 966, 972, 1049, 1051, 1069, 1077, 1234, 1346, 1351, 1368, 1373, 1380, 1396], "cursor": [39, 152, 354], "custom": [1, 28, 40, 41, 58, 59, 60, 61, 104, 146, 163, 184, 186, 221, 262, 278, 340, 354, 403, 451, 463, 481, 484, 585, 593, 594, 657, 758, 772, 808, 809, 847, 874, 898, 949, 966, 1015, 1068, 1080, 1102, 1105, 1210, 1218, 1253, 1357, 1368, 1399], "customis": [41, 354], "cut": [642, 847, 1239, 1368], "cxx": 1391, "cypher": 152, "d": [29, 36, 38, 40, 41, 43, 44, 47, 134, 171, 210, 234, 241, 243, 244, 245, 257, 261, 282, 305, 306, 316, 322, 326, 336, 338, 341, 342, 343, 344, 345, 346, 347, 354, 363, 365, 438, 461, 481, 484, 531, 600, 639, 675, 681, 695, 702, 716, 717, 722, 730, 732, 733, 773, 774, 791, 797, 826, 847, 884, 888, 892, 911, 924, 945, 947, 950, 951, 952, 953, 954, 955, 956, 966, 972, 1044, 1056, 1078, 1102, 1105, 1153, 1177, 1286, 1293, 1307, 1308, 1313, 1321, 1323, 1324, 1335, 1368, 1384, 1386, 1388, 1391, 1392], "d1": [41, 354, 455], "d2": 455, "d3": 455, "d789": [41, 354], "d_4": [722, 1313], "d_awai": [675, 847], "d_to_even": [675, 847], "dai": [71, 72, 89, 243, 256, 258, 286, 324, 354, 357, 451, 463, 471, 472, 474, 475, 477, 479, 481, 484, 485, 492, 494, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 772, 785, 786, 787, 788, 789, 790, 791, 834, 835, 847, 888, 893, 914, 966, 972, 1068, 1080, 1092, 1093, 1095, 1096, 1098, 1100, 1102, 1105, 1106, 1113, 1115, 1125, 1368, 1392], "dark": 1377, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 65, 70, 71, 72, 74, 85, 86, 88, 89, 98, 101, 105, 107, 110, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 203, 207, 209, 216, 217, 227, 229, 230, 231, 241, 242, 243, 255, 256, 257, 260, 262, 276, 277, 281, 287, 288, 289, 291, 295, 298, 306, 311, 312, 313, 316, 318, 328, 332, 352, 354, 358, 366, 367, 368, 371, 372, 373, 374, 375, 376, 379, 382, 383, 384, 385, 386, 388, 391, 393, 394, 395, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 425, 427, 428, 429, 433, 434, 435, 436, 437, 444, 445, 446, 451, 452, 453, 454, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 506, 517, 519, 520, 521, 525, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 545, 546, 550, 551, 553, 558, 564, 566, 573, 584, 586, 592, 594, 629, 630, 634, 635, 642, 644, 645, 648, 649, 650, 651, 653, 654, 659, 661, 663, 665, 667, 670, 672, 674, 675, 677, 679, 684, 685, 686, 692, 695, 696, 697, 700, 701, 702, 703, 707, 708, 709, 710, 711, 712, 720, 721, 722, 723, 730, 731, 732, 733, 735, 737, 740, 749, 750, 751, 754, 755, 761, 767, 775, 778, 785, 786, 787, 788, 789, 790, 791, 801, 802, 804, 805, 806, 807, 808, 809, 819, 822, 833, 834, 835, 838, 843, 847, 859, 867, 868, 875, 879, 881, 887, 888, 915, 919, 935, 966, 971, 974, 979, 980, 992, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1014, 1016, 1019, 1020, 1021, 1023, 1024, 1037, 1039, 1041, 1042, 1049, 1050, 1051, 1062, 1063, 1068, 1069, 1070, 1071, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1122, 1123, 1125, 1129, 1130, 1148, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1173, 1174, 1175, 1176, 1178, 1183, 1189, 1191, 1198, 1209, 1211, 1218, 1232, 1239, 1241, 1245, 1246, 1247, 1248, 1250, 1251, 1263, 1265, 1273, 1278, 1283, 1284, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1298, 1299, 1300, 1301, 1302, 1303, 1311, 1312, 1313, 1314, 1321, 1322, 1323, 1324, 1326, 1328, 1331, 1342, 1347, 1348, 1349, 1350, 1354, 1367, 1368, 1377, 1384, 1391, 1396, 1398], "data_bar": [41, 354], "data_bar_2010": [41, 354], "data_label": [41, 354], "data_page_s": [47, 51, 354, 966], "data_source_format": 200, "databas": [39, 129, 152, 153, 354, 859], "databrick": 190, "databricks_format": 198, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 84, 96, 102, 105, 106, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 174, 175, 178, 179, 205, 352, 353, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 419, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 843, 847, 859, 862, 869, 870, 872, 874, 876, 879, 881, 885, 888, 892, 893, 894, 895, 896, 898, 903, 904, 908, 913, 915, 922, 924, 929, 930, 931, 932, 934, 937, 942, 943, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 966, 971, 972, 1062, 1063, 1099, 1125, 1148, 1218, 1239, 1297, 1301, 1313, 1314, 1337, 1343, 1344, 1357, 1368, 1377, 1378, 1379, 1380, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1399], "dataframeplot": [354, 357], "dataload": [316, 354], "datapoint": [243, 354, 888, 966], "dataset": [15, 47, 75, 150, 151, 154, 155, 161, 165, 166, 170, 171, 257, 316, 354, 543, 847, 859, 892, 898, 966, 1168, 1368, 1397], "datasourceformat": [200, 203], "datat": [41, 354], "datatyp": [38, 48, 131, 133, 134, 135, 137, 139, 157, 159, 160, 162, 164, 169, 170, 182, 183, 185, 227, 236, 354, 425, 504, 681, 751, 774, 793, 795, 807, 843, 847, 859, 879, 966, 971, 972, 1037, 1063, 1118, 1218, 1272, 1350, 1368, 1394], "date": [17, 41, 57, 72, 150, 151, 153, 155, 161, 162, 165, 168, 170, 171, 214, 221, 241, 243, 256, 258, 286, 301, 354, 357, 451, 453, 454, 455, 456, 459, 461, 463, 464, 465, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 635, 655, 659, 661, 663, 665, 667, 670, 672, 674, 730, 732, 751, 772, 786, 787, 789, 790, 797, 805, 807, 833, 847, 866, 874, 888, 893, 914, 966, 972, 1068, 1070, 1071, 1072, 1073, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1117, 1125, 1227, 1228, 1321, 1323, 1350, 1368, 1389, 1392, 1394], "date32": [256, 354], "date_format": [38, 48, 354, 966], "date_min": 474, "date_minus_1y_2mon": 1095, "date_part": 1389, "date_plus_1i": [474, 1095], "date_rang": [258, 324, 354, 459, 461, 475, 483, 494, 789, 790, 893, 966, 1076, 1091, 1096, 1097, 1114, 1115], "date_right": [258, 354, 893, 966], "datetim": [17, 38, 41, 48, 55, 57, 101, 138, 154, 162, 166, 168, 170, 181, 182, 183, 185, 195, 196, 199, 200, 214, 221, 241, 243, 256, 258, 286, 301, 324, 354, 357, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 602, 635, 655, 659, 661, 663, 665, 667, 670, 672, 674, 730, 733, 751, 772, 785, 786, 787, 789, 790, 791, 797, 805, 807, 834, 835, 847, 866, 874, 888, 893, 914, 966, 971, 972, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1125, 1227, 1228, 1321, 1324, 1348, 1350, 1368, 1391, 1392], "datetime_cast": 55, "datetime_format": [38, 48, 354, 966], "datetime_rang": [243, 354, 453, 456, 471, 472, 474, 478, 479, 485, 486, 487, 488, 489, 490, 491, 492, 495, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 847, 888, 966, 1069, 1070, 1073, 1077, 1078, 1079, 1085, 1086, 1088, 1090, 1092, 1093, 1094, 1095, 1099, 1100, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113], "datetime_str": 481, "datetimecastopt": 55, "datetimeindex": 136, "david": 1397, "day_nam": [481, 484], "day_of_month": [459, 475, 494], "day_of_year": [459, 475, 494], "daylight": [243, 258, 286, 324, 354, 452, 460, 474, 479, 492, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 791, 834, 835, 847, 888, 893, 914, 966, 1077, 1095, 1100, 1113], "dayofweek": 1392, "dayofyear": 1392, "days_diff": 485, "db": [39, 152, 153, 354], "dbapi2": 152, "dbc": [695, 1286], "dbreadengin": 153, "dbwriteengin": [39, 354], "dbwritemod": [39, 354], "dd": [41, 354, 1391], "ddd": [1, 41, 354, 741, 743, 744], "dddd": 1391, "ddof": [302, 325, 354, 400, 405, 581, 587, 669, 670, 673, 674, 691, 759, 777, 779, 823, 824, 828, 836, 847, 925, 933, 966, 1012, 1017, 1206, 1212, 1260, 1262, 1282, 1358, 1368], "ddww": 1391, "de": 1391, "deal": [47, 51, 255, 354, 366, 368, 477, 478, 645, 730, 733, 762, 763, 764, 765, 788, 847, 966, 979, 980, 1098, 1099, 1241, 1321, 1324, 1368], "debug": [30, 898, 966, 1399], "decad": [1377, 1392], "decai": [500, 501, 502, 503, 847, 1124, 1125, 1126, 1127, 1368], "decemb": [484, 1105], "decim": [9, 11, 12, 28, 29, 38, 41, 48, 150, 151, 165, 354, 358, 675, 734, 847, 966, 972, 1263, 1325, 1368, 1390], "decimal_comma": [150, 151, 165], "decimal_separ": [9, 28], "declar": [131, 133, 134, 135, 137, 152, 159, 160, 169, 311, 316, 354, 837, 966, 972, 1377], "decod": [150, 151, 709], "decompos": [320, 354, 930, 966], "decompress": [47, 49, 51, 354, 966], "decor": [56, 58, 59, 60, 61, 181, 185, 262, 354, 594, 847, 858, 859, 1218, 1368], "dedic": [1, 132, 255, 288, 354, 972, 1396], "deem": [221, 354, 874, 966], "deepcopi": [215, 354, 867, 966, 1049, 1368], "def": [1, 56, 58, 59, 60, 61, 152, 179, 181, 185, 205, 277, 318, 354, 363, 639, 699, 702, 727, 761, 808, 847, 870, 907, 966, 972, 1290, 1293, 1399], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 63, 64, 65, 69, 72, 73, 74, 131, 132, 133, 134, 135, 136, 137, 138, 147, 150, 151, 153, 155, 156, 158, 159, 160, 161, 162, 165, 167, 168, 169, 170, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 205, 221, 222, 225, 226, 229, 238, 242, 243, 244, 255, 257, 258, 263, 267, 269, 276, 278, 286, 287, 288, 289, 290, 294, 297, 301, 302, 304, 309, 311, 312, 316, 319, 321, 322, 323, 325, 330, 339, 354, 365, 366, 368, 386, 391, 398, 403, 411, 444, 446, 451, 463, 477, 478, 484, 497, 499, 500, 502, 503, 523, 535, 553, 560, 564, 573, 578, 579, 581, 585, 587, 588, 593, 601, 602, 605, 608, 627, 628, 630, 635, 636, 642, 645, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 680, 682, 691, 692, 701, 708, 720, 725, 726, 727, 730, 732, 733, 735, 737, 758, 759, 762, 764, 767, 771, 772, 773, 776, 777, 779, 786, 787, 788, 789, 790, 791, 794, 797, 801, 802, 803, 805, 806, 807, 813, 819, 822, 825, 828, 829, 831, 834, 835, 836, 837, 838, 847, 869, 870, 874, 875, 877, 878, 880, 887, 888, 892, 893, 899, 903, 908, 910, 914, 918, 920, 921, 924, 925, 929, 931, 932, 933, 938, 941, 948, 966, 970, 972, 979, 980, 998, 1003, 1010, 1015, 1023, 1050, 1062, 1063, 1068, 1080, 1098, 1099, 1105, 1119, 1123, 1124, 1126, 1127, 1146, 1158, 1178, 1185, 1189, 1198, 1203, 1204, 1210, 1227, 1228, 1234, 1239, 1241, 1246, 1247, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1271, 1274, 1282, 1283, 1284, 1292, 1296, 1299, 1311, 1316, 1317, 1318, 1321, 1323, 1324, 1326, 1328, 1346, 1348, 1357, 1358, 1368, 1390, 1391, 1399], "default_match": [693, 705], "default_scop": 35, "defaultazurecredenti": 34, "defaultdict": [289, 354], "defer": [205, 354, 357, 358, 1368, 1373], "defin": [38, 41, 48, 55, 72, 75, 152, 159, 170, 178, 179, 181, 214, 225, 226, 230, 243, 262, 274, 277, 286, 323, 340, 354, 429, 531, 560, 594, 639, 642, 654, 655, 659, 661, 663, 665, 667, 670, 672, 674, 707, 712, 720, 731, 738, 786, 787, 789, 790, 805, 806, 809, 829, 834, 835, 847, 866, 877, 878, 881, 888, 907, 914, 932, 949, 966, 970, 971, 972, 1042, 1153, 1185, 1218, 1239, 1251, 1298, 1303, 1311, 1322, 1329, 1368], "definit": [41, 76, 354, 543, 656, 847, 971, 972, 1168, 1252, 1368], "deflat": [36, 354], "deg": 1393, "degre": [302, 325, 354, 581, 587, 644, 669, 670, 673, 674, 691, 759, 769, 779, 823, 824, 828, 836, 847, 925, 933, 966, 1260, 1262, 1282, 1358, 1368, 1389], "delai": 96, "delet": [75, 1384, 1395], "delimit": [46, 48, 160, 169, 278, 309, 354, 692, 708, 966, 1283, 1299, 1343, 1368, 1391], "delta": [40, 154, 166, 198, 302, 325, 354, 581, 587, 669, 670, 673, 674, 691, 759, 779, 823, 824, 828, 836, 847, 859, 925, 933, 966, 1260, 1262, 1282, 1358, 1368], "delta_merge_opt": [40, 354], "delta_table_opt": [154, 166, 195], "delta_table_vers": 195, "delta_write_opt": [40, 354], "deltalak": [40, 154, 166, 173, 195, 354], "deltashar": 198, "deltat": [40, 154, 166, 354], "demo": [41, 354], "demonstr": [150, 514, 847, 972], "dens": [21, 241, 354, 645, 847, 1241, 1368], "densiti": [1368, 1373], "depend": [47, 52, 56, 62, 98, 152, 155, 161, 173, 210, 211, 354, 384, 385, 550, 551, 594, 605, 642, 645, 791, 794, 797, 803, 847, 976, 996, 997, 1175, 1176, 1239, 1241, 1368, 1399], "deploi": [181, 185], "deprec": [40, 63, 66, 150, 151, 178, 179, 180, 181, 185, 188, 212, 269, 312, 330, 335, 354, 458, 495, 516, 612, 649, 692, 700, 760, 769, 777, 778, 847, 863, 869, 880, 903, 908, 918, 921, 931, 937, 938, 944, 966, 1075, 1084, 1085, 1116, 1145, 1246, 1283, 1291, 1348, 1368], "depth": 146, "desc": [972, 1377, 1380, 1384, 1386], "descend": [57, 213, 295, 300, 317, 354, 379, 399, 424, 580, 635, 645, 678, 679, 688, 689, 753, 758, 770, 847, 864, 919, 923, 928, 966, 991, 1011, 1165, 1205, 1241, 1267, 1269, 1280, 1357, 1368], "describ": [181, 241, 354, 713, 966, 1304, 1368], "descript": [243, 354, 888, 966, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1394, 1397, 1398], "deseri": [146, 294, 354, 516, 608, 847, 918, 966], "deserializ": [222, 294, 354, 446, 608, 847, 875, 918, 966], "design": [311, 316, 354, 862], "desir": [181, 257, 354, 403, 495, 585, 892, 966, 1015, 1116, 1210], "destin": 153, "detail": [62, 132, 152, 153, 174, 176, 209, 243, 323, 354, 484, 751, 847, 888, 932, 941, 966, 1105, 1350, 1368, 1399], "determin": [15, 38, 41, 48, 57, 65, 94, 146, 150, 151, 152, 155, 161, 162, 165, 170, 172, 213, 217, 236, 243, 255, 256, 262, 286, 317, 318, 324, 354, 424, 463, 464, 477, 478, 525, 585, 605, 642, 648, 650, 686, 694, 707, 730, 731, 733, 734, 753, 788, 806, 819, 822, 838, 847, 864, 871, 872, 879, 888, 914, 928, 934, 966, 1036, 1080, 1081, 1098, 1099, 1148, 1210, 1239, 1245, 1246, 1247, 1278, 1285, 1321, 1324, 1325, 1353, 1368], "determinist": [758, 847, 1357, 1368], "dev": [208, 975, 1260, 1368], "develop": [153, 181, 185], "deviat": [302, 354, 502, 669, 670, 691, 828, 847, 925, 966, 1126, 1282, 1368, 1385], "devic": [311, 354, 869, 880, 908, 921, 941, 966, 1346, 1368], "devicememoryresourc": 941, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 58, 59, 84, 102, 106, 132, 133, 134, 135, 136, 137, 138, 151, 152, 153, 165, 178, 179, 181, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 411, 412, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 664, 666, 668, 669, 671, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 843, 847, 888, 914, 930, 932, 946, 949, 957, 966, 972, 1099, 1125, 1297, 1301, 1313, 1314, 1344, 1368, 1373, 1377, 1378, 1379, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1399], "df0": [270, 354, 904, 966, 1383], "df1": [57, 65, 174, 175, 228, 231, 270, 301, 326, 354, 904, 966, 1380, 1382, 1383, 1384, 1396], "df2": [57, 65, 174, 175, 228, 231, 326, 354, 1380, 1382, 1383, 1384, 1396], "df3": [57, 354], "df4": 354, "df5": 354, "df6": 354, "df_a": 1396, "df_a1": 65, "df_a2": 65, "df_a3": 65, "df_agg_nuniqu": [274, 354], "df_b": 1396, "df_count": [758, 847], "df_current_batch": 151, "df_d1": 65, "df_d2": 65, "df_from_str_repr": [310, 354], "df_h1": 65, "df_h2": 65, "df_new_grid": [529, 847], "df_nuniqu": [274, 354], "df_original_grid": [529, 847], "df_panda": 1378, "df_pd": 132, "df_tempor": [659, 661, 663, 665, 667, 670, 672, 674, 847], "dfi": 209, "diagon": [65, 318, 354], "diagonal_relax": 65, "diagram": [910, 966], "dict": [31, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 58, 60, 62, 131, 133, 134, 135, 136, 137, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 181, 195, 196, 199, 200, 235, 255, 276, 287, 288, 289, 307, 308, 311, 316, 318, 354, 847, 966, 971, 972, 1136, 1368, 1381], "dictat": [147, 474, 847, 1095], "dictionari": [31, 38, 40, 41, 43, 47, 48, 49, 50, 51, 62, 88, 131, 133, 134, 135, 137, 146, 150, 151, 152, 153, 154, 157, 159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 195, 255, 276, 287, 288, 289, 307, 308, 311, 316, 354, 966, 971], "did": [452, 1069], "diff": [328, 354, 485, 486, 487, 488, 489, 490, 491, 574, 847, 935, 966, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1199, 1368], "differ": [41, 47, 55, 101, 104, 125, 150, 155, 170, 171, 174, 176, 205, 225, 231, 243, 244, 255, 257, 278, 286, 288, 289, 308, 311, 312, 318, 354, 447, 459, 474, 475, 478, 484, 493, 499, 514, 523, 555, 574, 576, 585, 594, 627, 628, 630, 635, 649, 650, 730, 756, 794, 797, 803, 847, 860, 877, 878, 880, 888, 892, 914, 966, 970, 972, 1044, 1064, 1076, 1095, 1096, 1099, 1105, 1114, 1121, 1130, 1146, 1180, 1199, 1201, 1218, 1227, 1228, 1230, 1246, 1247, 1321, 1368, 1392, 1394, 1396], "digit": [73, 639, 675, 676, 702, 847, 972, 1263, 1264, 1286, 1293, 1368, 1399], "dimens": [131, 133, 135, 137, 159, 160, 169, 354, 651, 847, 966, 1248, 1348, 1368], "dimension": [133, 135, 137, 312, 354, 966, 1368], "direct": [41, 153, 162, 167, 170, 297, 311, 322, 354, 398, 578, 680, 847, 920, 966, 1010, 1203, 1271, 1368], "directli": [6, 31, 41, 64, 65, 152, 181, 185, 205, 211, 289, 311, 354, 500, 502, 503, 650, 822, 847, 870, 966, 1124, 1126, 1127, 1247, 1346, 1368, 1380, 1396, 1399], "directori": [41, 47, 48, 49, 50, 51, 52, 54, 147, 162, 165, 168, 170, 354, 966], "dirpath": [36, 38, 43, 44, 47, 165, 354], "disabl": [47, 51, 56, 97, 98, 162, 168, 182, 255, 354, 869, 966], "disable_string_cach": 98, "disallow": 181, "discard": [234, 282, 354, 510, 847, 884, 911, 966, 1134, 1368], "disco": [704, 706, 1295, 1297], "discont": [704, 706, 1295, 1297], "discourag": [594, 847], "discoveri": [278, 354], "discret": [444, 447, 497, 555, 574, 642, 847, 1062, 1064, 1119, 1180, 1199, 1239, 1368], "disk": [47, 48, 49, 50, 51, 156, 354, 609, 860, 921, 966], "dispatch": 972, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 221, 241, 354, 874, 880, 921, 966], "distanc": [258, 354, 893, 966], "distinct": [41, 185, 276, 278, 332, 354, 386, 404, 534, 535, 537, 553, 586, 645, 654, 791, 847, 998, 1016, 1157, 1158, 1160, 1178, 1211, 1241, 1251, 1368, 1385, 1395, 1397, 1399], "distinct_count": [47, 51, 354, 966], "distinguish": [484, 1105], "distribut": [543, 686, 847, 910, 966, 1168, 1278, 1368], "div": 1389, "diverg": [63, 130], "divid": [21, 444, 479, 492, 500, 502, 503, 514, 543, 642, 645, 847, 1062, 1100, 1113, 1124, 1126, 1127, 1168, 1239, 1368, 1385, 1390], "divis": [514, 754, 847, 1390], "divisor": [302, 325, 354, 581, 587, 669, 670, 673, 674, 691, 759, 779, 823, 824, 828, 836, 847, 925, 933, 966, 1260, 1262, 1282, 1358, 1368], "dl": [316, 354], "do": [1, 41, 55, 57, 63, 133, 134, 137, 150, 162, 165, 170, 174, 175, 176, 177, 210, 221, 223, 231, 254, 257, 258, 278, 283, 306, 318, 322, 354, 357, 443, 451, 557, 593, 716, 717, 725, 726, 727, 777, 819, 822, 838, 847, 865, 869, 874, 876, 880, 892, 893, 898, 908, 910, 912, 921, 941, 966, 972, 1061, 1068, 1130, 1182, 1307, 1308, 1316, 1317, 1318, 1351, 1368, 1373], "do_polars_oper": 30, "do_someth": 152, "do_various_th": 205, "doc": [40, 43, 44, 132, 153, 156, 158, 174, 176, 207, 208, 219, 354, 974, 975], "document": [33, 101, 153, 207, 354, 358, 481, 484, 710, 730, 732, 733, 737, 843, 941, 974, 1044, 1102, 1105, 1301, 1321, 1323, 1324, 1328], "doe": [11, 38, 40, 48, 49, 50, 51, 57, 63, 64, 119, 131, 133, 134, 135, 137, 138, 150, 151, 152, 153, 154, 155, 159, 160, 165, 166, 169, 171, 211, 216, 231, 238, 243, 244, 256, 257, 263, 282, 287, 288, 289, 319, 328, 331, 354, 357, 358, 495, 510, 514, 523, 585, 594, 694, 704, 706, 718, 726, 727, 756, 843, 847, 862, 868, 869, 870, 874, 880, 884, 888, 892, 898, 899, 908, 911, 921, 929, 935, 939, 966, 1051, 1116, 1130, 1134, 1146, 1273, 1285, 1295, 1297, 1309, 1368, 1373, 1391], "doesn": [40, 150, 165, 243, 258, 354, 497, 847, 888, 893, 966, 1119, 1368], "dog": [693, 736, 739, 776, 1284, 1327, 1330], "doi": 1392, "dollar": [716, 717, 1307, 1308], "domain": [1, 702, 1293], "don": [65, 243, 258, 262, 319, 322, 354, 443, 557, 594, 635, 847, 888, 893, 929, 966, 972, 1061, 1182, 1218, 1368], "done": [48, 49, 50, 51, 63, 64, 130, 151, 171, 205, 212, 258, 354, 369, 370, 635, 847, 863, 866, 869, 870, 880, 893, 908, 966, 982, 1368], "dot": [57, 609, 843, 847, 910, 921, 966, 1368], "doubl": [313, 354, 716, 717, 1307, 1308], "dow": 1392, "down": [165, 168, 169, 170, 171, 214, 354, 425, 513, 847, 1137, 1368], "downcast": 55, "download": [160, 165, 168, 169, 609, 921, 966], "downstream": [312, 354, 679, 847, 1269, 1368], "dr": 167, "drago": [707, 1298], "dragon": 707, "dragonfr": 1298, "dragonfruit": [707, 720, 731, 1298, 1311, 1322], "dramat": 155, "draw": [21, 26, 181, 185, 1399], "drawback": 843, "drawfn": 1399, "drawing_charact": 21, "dremio": 152, "driver": [39, 152, 153, 354], "drop": [1, 134, 224, 225, 226, 262, 282, 319, 328, 354, 447, 449, 450, 555, 556, 642, 847, 877, 878, 911, 929, 935, 966, 1064, 1066, 1067, 1180, 1181, 1239, 1368, 1395], "drop_dupl": [319, 354, 929, 966], "drop_empty_col": [155, 161], "drop_empty_row": [155, 161], "drop_first": [309, 354, 1343, 1368], "drop_in_plac": 354, "drop_nan": [226, 354, 450, 847, 878, 966, 1067, 1368], "drop_nul": [225, 354, 449, 847, 877, 966, 1066, 1368], "dset": 171, "dst": [479, 492, 1100, 1113], "dst_offset": [452, 1069], "dt": [1, 41, 57, 155, 161, 286, 354, 655, 791, 847, 856, 914, 966, 972, 1376, 1391, 1392], "dt1": 1391, "dt2": 1391, "dtm": [41, 354, 455, 484, 972, 1072, 1105, 1391], "dtm_iso": 484, "dtm_iso_strict": 484, "dtype": [11, 41, 55, 56, 60, 66, 72, 76, 88, 97, 98, 108, 131, 133, 135, 137, 138, 150, 151, 152, 153, 155, 159, 160, 161, 165, 169, 178, 179, 180, 181, 185, 207, 209, 214, 217, 229, 243, 258, 286, 310, 311, 312, 313, 316, 322, 331, 354, 411, 425, 426, 427, 428, 429, 430, 441, 442, 484, 495, 504, 517, 552, 560, 591, 593, 594, 601, 640, 647, 648, 655, 681, 683, 709, 730, 747, 751, 757, 767, 774, 793, 795, 797, 801, 802, 804, 805, 806, 807, 808, 809, 819, 822, 829, 838, 847, 866, 871, 888, 893, 914, 939, 966, 971, 972, 974, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1023, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1049, 1059, 1060, 1063, 1064, 1105, 1116, 1123, 1155, 1173, 1174, 1177, 1185, 1209, 1216, 1218, 1237, 1245, 1249, 1272, 1275, 1300, 1321, 1338, 1345, 1346, 1348, 1349, 1350, 1351, 1356, 1368, 1396, 1399], "dtype_format": [41, 354], "dtypekind": 209, "dtypelik": [207, 974], "dtypeoper": [1, 60], "dubiou": 101, "duckdb": 138, "due": [243, 258, 286, 289, 324, 354, 365, 460, 474, 479, 492, 618, 619, 621, 623, 625, 626, 655, 659, 661, 663, 665, 667, 670, 672, 674, 772, 786, 787, 789, 790, 834, 835, 847, 866, 888, 893, 914, 966, 1077, 1095, 1100, 1113], "dummi": [309, 354, 1343, 1368], "dump": 146, "duplic": [57, 106, 250, 257, 258, 259, 319, 323, 354, 365, 532, 618, 642, 837, 847, 892, 893, 894, 929, 932, 966, 1154, 1239, 1368, 1397], "duplicateerror": [642, 847, 1239, 1368], "dur": [259, 354, 894, 966], "durat": [205, 258, 324, 354, 452, 460, 484, 485, 486, 487, 488, 489, 490, 491, 495, 501, 751, 786, 787, 789, 790, 834, 835, 847, 893, 966, 971, 972, 1069, 1077, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1125, 1348, 1350, 1368], "dure": [48, 49, 50, 51, 56, 63, 64, 105, 130, 150, 151, 165, 170, 205, 231, 354, 860, 869, 870, 880, 908, 940, 966, 1130, 1368], "dutch": [451, 463, 772, 1068, 1080], "dynam": [147, 243, 354, 403, 585, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 847, 888, 966, 970, 1015, 1210], "dynamicgroupbi": [243, 354], "e": [11, 34, 36, 38, 40, 43, 44, 47, 48, 146, 150, 156, 158, 162, 168, 170, 171, 183, 222, 234, 241, 245, 254, 258, 261, 305, 306, 312, 322, 354, 363, 446, 497, 501, 504, 531, 588, 594, 599, 600, 601, 602, 603, 605, 606, 607, 609, 610, 611, 681, 686, 705, 726, 727, 738, 793, 809, 826, 837, 847, 875, 884, 893, 896, 912, 966, 970, 972, 1119, 1125, 1153, 1278, 1296, 1329, 1368, 1386, 1391, 1399], "e101": [41, 354], "e_filt": [605, 607], "e_sum_ov": [605, 607], "e_sum_slic": [605, 607], "each": [38, 41, 48, 52, 53, 54, 57, 66, 73, 84, 151, 152, 155, 160, 169, 174, 175, 176, 177, 179, 218, 220, 227, 234, 241, 242, 243, 256, 258, 262, 276, 278, 282, 286, 288, 290, 311, 316, 320, 323, 324, 332, 333, 335, 337, 339, 340, 348, 354, 379, 424, 428, 429, 444, 463, 479, 492, 510, 534, 537, 563, 566, 573, 583, 590, 594, 642, 645, 653, 654, 662, 666, 677, 682, 689, 702, 706, 707, 711, 712, 720, 722, 723, 731, 738, 753, 767, 770, 776, 801, 802, 806, 829, 837, 847, 869, 872, 873, 879, 884, 888, 893, 908, 911, 914, 930, 932, 942, 944, 946, 948, 949, 957, 966, 991, 1041, 1042, 1048, 1062, 1080, 1100, 1113, 1157, 1160, 1188, 1191, 1198, 1208, 1239, 1241, 1250, 1251, 1265, 1274, 1293, 1297, 1298, 1302, 1303, 1311, 1313, 1314, 1322, 1329, 1337, 1368, 1385, 1391, 1396, 1397, 1399], "eager": [96, 243, 258, 278, 322, 354, 453, 456, 459, 461, 471, 472, 474, 475, 478, 479, 483, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 659, 661, 663, 665, 667, 670, 672, 674, 767, 771, 773, 777, 779, 786, 787, 789, 790, 797, 801, 802, 805, 806, 819, 822, 825, 826, 829, 834, 835, 838, 846, 847, 888, 893, 898, 966, 971, 1069, 1070, 1073, 1076, 1077, 1078, 1079, 1085, 1086, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1396], "eager_execut": 1396, "eagerli": [585, 1377], "ear": [720, 731, 1311], "earlier": [258, 354, 893, 966], "earliest": [243, 354, 477, 478, 730, 733, 788, 888, 958, 966, 1098, 1099, 1321, 1324], "easi": 205, "easiest": 210, "easili": [57, 292, 316, 328, 333, 354, 829, 843, 916, 935, 942, 966], "east": [75, 170, 259, 354, 894, 966], "ebf1d": [41, 354], "edg": [525, 847, 1148, 1368], "eee": [1, 41, 354, 972], "ef": 717, "effect": [41, 48, 49, 50, 51, 55, 236, 243, 354, 460, 514, 594, 620, 622, 624, 777, 847, 888, 938, 939, 966, 1069, 1077], "effici": [132, 152, 254, 256, 354, 593, 847, 862], "efgh": 1391, "eg": [18, 26, 27, 41, 65, 153, 205, 311, 354, 479, 730, 733, 754, 847, 972, 1321, 1324], "egnaro": 1391, "either": [63, 64, 88, 147, 181, 253, 257, 258, 259, 276, 286, 287, 311, 312, 354, 501, 593, 640, 642, 655, 678, 730, 762, 770, 774, 829, 847, 869, 870, 892, 893, 894, 896, 914, 966, 970, 972, 1125, 1237, 1239, 1267, 1321, 1368, 1381, 1399], "element": [14, 15, 26, 176, 177, 180, 181, 183, 185, 210, 211, 213, 220, 253, 278, 287, 300, 302, 317, 325, 354, 371, 372, 373, 374, 375, 376, 387, 388, 423, 424, 431, 434, 435, 436, 437, 439, 440, 441, 442, 443, 449, 450, 505, 506, 510, 523, 527, 535, 546, 554, 556, 557, 558, 561, 566, 574, 575, 576, 577, 581, 587, 589, 590, 593, 594, 635, 636, 645, 648, 656, 657, 658, 660, 662, 664, 666, 668, 669, 671, 673, 678, 683, 684, 685, 689, 690, 691, 722, 723, 734, 749, 750, 752, 753, 759, 770, 779, 805, 823, 824, 828, 836, 847, 864, 873, 923, 925, 928, 933, 966, 983, 984, 985, 986, 987, 988, 999, 1000, 1035, 1036, 1046, 1049, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1066, 1067, 1128, 1129, 1134, 1135, 1147, 1150, 1158, 1167, 1169, 1171, 1172, 1179, 1181, 1182, 1183, 1186, 1191, 1199, 1200, 1201, 1202, 1214, 1215, 1218, 1234, 1241, 1245, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1267, 1275, 1276, 1277, 1281, 1282, 1313, 1314, 1325, 1339, 1340, 1341, 1345, 1352, 1353, 1354, 1358, 1368, 1385, 1386], "elementwis": [593, 635, 657, 658, 660, 662, 664, 666, 669, 671, 673, 847, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1368], "elig": [898, 966], "elimin": [63, 130, 543, 847, 1168, 1368], "elis": [270, 354, 904, 966], "ellips": 21, "ellipsi": [241, 354], "elppa": 1391, "els": 151, "email": [702, 1293], "email_part": [702, 1293], "emphas": [354, 358], "emploi": 972, "empti": [14, 36, 38, 48, 110, 134, 150, 151, 155, 161, 163, 165, 215, 216, 243, 269, 321, 354, 692, 700, 807, 825, 867, 868, 888, 903, 931, 966, 971, 972, 1049, 1051, 1135, 1155, 1169, 1283, 1291, 1368], "en": [21, 41, 354], "enabl": [29, 30, 47, 51, 56, 63, 64, 97, 98, 154, 162, 166, 168, 170, 174, 175, 176, 177, 189, 207, 292, 313, 328, 354, 366, 368, 649, 650, 679, 694, 704, 706, 718, 758, 843, 847, 869, 870, 880, 908, 916, 921, 935, 966, 974, 979, 980, 1246, 1247, 1269, 1285, 1295, 1297, 1309, 1349, 1357, 1368], "enable_string_cach": 97, "enclos": [516, 847], "encod": [69, 75, 87, 146, 150, 151, 165, 309, 354, 357, 408, 516, 653, 696, 742, 847, 1020, 1250, 1287, 1343, 1368, 1373], "encompass": [525, 847, 1148, 1368], "encount": [55, 121, 150, 151, 165, 170, 243, 354, 627, 628, 709, 710, 777, 781, 795, 847, 888, 966, 1227, 1228, 1300, 1301, 1368], "end": [38, 41, 48, 150, 151, 165, 243, 249, 278, 354, 407, 410, 413, 426, 430, 452, 479, 504, 529, 530, 579, 693, 698, 702, 707, 714, 720, 724, 725, 726, 729, 767, 772, 785, 786, 787, 788, 789, 790, 793, 801, 802, 805, 806, 834, 835, 837, 843, 847, 888, 891, 908, 966, 972, 1022, 1038, 1043, 1069, 1100, 1151, 1152, 1165, 1204, 1289, 1293, 1298, 1305, 1311, 1315, 1316, 1317, 1322, 1368, 1391], "endian": [411, 1023], "endpoint": [190, 444, 642, 805, 847, 1062, 1239, 1368], "ends_a": 1391, "ends_in_digit": 1391, "ends_with": [407, 413, 430, 693, 724, 972, 1043, 1315, 1389], "ends_with_expr": 410, "ends_with_lit": 410, "engin": [10, 15, 39, 48, 49, 50, 51, 63, 64, 96, 145, 152, 153, 155, 161, 187, 242, 257, 262, 312, 319, 340, 354, 593, 826, 847, 869, 870, 880, 887, 892, 898, 903, 908, 921, 929, 941, 949, 963, 966, 970, 1218, 1348, 1368, 1380, 1396], "engine_opt": [39, 155, 354], "enginetyp": [48, 49, 50, 51, 63, 64, 869, 870, 880, 908, 921, 966], "enough": [557, 686, 847, 1182, 1278, 1368], "ensur": [11, 41, 52, 54, 96, 147, 153, 180, 183, 207, 234, 242, 263, 276, 278, 282, 287, 312, 354, 531, 593, 847, 884, 887, 898, 899, 911, 941, 966, 972, 974, 1348, 1368], "enter": 205, "entir": [41, 155, 161, 354], "entri": [205, 354, 966, 971, 1396], "entropi": [847, 1368], "enumer": [75, 136, 150, 151, 155, 161, 165, 256, 354], "env": [4, 186], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 48, 49, 50, 51, 63, 64, 147, 160, 162, 165, 168, 169, 170, 184, 187, 190, 195, 311, 354, 869, 870, 880, 908, 921, 966], "eol_char": [150, 151, 165], "eparg": 1391, "epoch": [71, 72, 492, 797, 1113, 1392], "epoch_": [461, 1078], "epoch_n": [461, 1078], "epochtimeunit": [461, 797, 1078], "eq": [234, 282, 354, 499, 510, 847, 884, 911, 966, 1121, 1368], "eq_miss": [847, 1230, 1368], "equal": [56, 98, 150, 151, 165, 174, 175, 176, 177, 243, 258, 259, 270, 300, 354, 444, 492, 498, 499, 519, 545, 585, 630, 642, 648, 656, 657, 658, 660, 662, 664, 666, 668, 669, 671, 673, 689, 714, 715, 718, 740, 770, 805, 823, 824, 837, 843, 847, 884, 888, 893, 894, 904, 911, 923, 966, 1062, 1100, 1121, 1210, 1230, 1239, 1245, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1305, 1306, 1309, 1331, 1368, 1385, 1388, 1399], "equiprob": [221, 280, 346, 354, 643, 666, 667, 820, 847, 874, 909, 955, 966, 1063, 1240, 1258, 1368], "equival": [41, 65, 131, 133, 134, 135, 137, 159, 160, 169, 243, 253, 274, 354, 363, 367, 429, 498, 499, 501, 514, 519, 521, 545, 592, 614, 616, 629, 630, 631, 634, 640, 712, 736, 738, 739, 746, 754, 761, 847, 888, 966, 1042, 1120, 1121, 1125, 1141, 1143, 1167, 1170, 1217, 1229, 1230, 1303, 1327, 1329, 1330, 1368, 1378, 1386, 1398], "err": 703, "error": [15, 40, 55, 64, 65, 96, 116, 120, 122, 133, 134, 137, 145, 150, 151, 155, 162, 165, 170, 258, 263, 278, 287, 312, 354, 365, 390, 391, 408, 451, 560, 562, 564, 585, 618, 650, 693, 696, 701, 703, 705, 709, 710, 730, 732, 733, 737, 847, 866, 870, 893, 899, 941, 949, 966, 1002, 1003, 1020, 1068, 1185, 1187, 1189, 1247, 1284, 1287, 1292, 1294, 1296, 1300, 1301, 1321, 1323, 1324, 1328, 1348, 1368, 1394], "escap": [99, 150, 151, 153, 165, 699, 716, 717, 1290, 1307, 1308], "esp": 15, "especi": [179, 654, 847, 966, 1251, 1368], "espresso": 972, "est": 789, "establish": [152, 205], "estim": [150, 151, 212, 229, 354, 370, 502, 503, 543, 766, 847, 863, 966, 982, 1123, 1126, 1127, 1168, 1368], "estimated_s": [354, 1368], "etc": [22, 40, 41, 147, 150, 154, 155, 156, 158, 166, 167, 354, 594, 847, 972, 1266, 1268, 1368, 1392], "eu": [166, 167], "eur": [241, 354, 1399], "europ": [456, 460, 478, 1073, 1077, 1099], "eval": [310, 354, 593, 594, 792, 847, 1218, 1345, 1368], "evalu": [48, 49, 50, 51, 170, 232, 234, 258, 282, 354, 367, 380, 382, 383, 415, 416, 417, 418, 420, 421, 443, 510, 528, 548, 549, 585, 634, 635, 762, 764, 767, 771, 773, 777, 779, 786, 787, 789, 790, 792, 801, 802, 805, 806, 819, 822, 825, 829, 834, 835, 837, 838, 847, 869, 884, 890, 892, 893, 911, 966, 992, 994, 995, 1027, 1028, 1029, 1030, 1032, 1033, 1061, 1134, 1173, 1174, 1359, 1368, 1388], "even": [38, 48, 150, 257, 354, 501, 639, 642, 675, 792, 847, 892, 966, 972, 1125, 1239, 1263, 1368], "evenli": [243, 354, 805, 806, 888, 966], "event": [64, 870, 966], "eventu": [39, 354], "ever": [635, 847], "everi": [15, 38, 48, 150, 151, 155, 161, 165, 237, 243, 308, 324, 354, 382, 383, 384, 385, 388, 390, 396, 439, 440, 441, 442, 443, 479, 492, 506, 518, 550, 551, 555, 558, 561, 562, 563, 571, 574, 579, 583, 654, 700, 781, 782, 847, 886, 888, 966, 994, 995, 996, 997, 1000, 1002, 1008, 1057, 1058, 1059, 1060, 1061, 1100, 1113, 1129, 1140, 1175, 1176, 1180, 1183, 1186, 1187, 1188, 1196, 1199, 1204, 1208, 1251, 1291, 1368], "everybodi": [694, 718, 1285, 1309], "everyth": 972, "evolv": [263, 354, 899, 966], "ew": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "ewm_mean": [847, 1368], "ewm_mean_bi": [847, 1368], "ewm_std": [847, 1368], "ewm_var": [847, 1368], "ewma": [501, 847, 1125, 1368], "exact": [176, 179, 181, 185, 258, 298, 354, 370, 514, 700, 728, 729, 730, 732, 733, 754, 847, 893, 966, 1291, 1321, 1323, 1324], "exactli": [133, 134, 137, 174, 175, 176, 177, 180, 181, 185, 263, 354, 722, 723, 728, 729, 791, 899, 966, 1273, 1313, 1314, 1319, 1320, 1368], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 98, 102, 105, 106, 107, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 147, 150, 151, 152, 153, 154, 155, 159, 160, 161, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 843, 847, 859, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 966, 971, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1368, 1373, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398], "exc_tb": 1396, "exc_typ": 1396, "exc_val": 1396, "exce": [241, 354], "excel": [37, 41, 149, 155, 354, 859], "excelspreadsheetengin": 155, "except": [0, 223, 238, 245, 258, 261, 263, 283, 305, 354, 650, 707, 731, 793, 847, 859, 876, 893, 899, 912, 966, 972, 1037, 1147, 1172, 1247, 1298, 1322, 1339, 1348, 1368, 1395], "exclud": [181, 185, 243, 354, 424, 439, 442, 451, 463, 531, 601, 753, 772, 843, 847, 888, 966, 972, 1068, 1080, 1153, 1368], "excluded_dtyp": [181, 182, 185], "exclus": [287, 354, 761, 767, 801, 802, 847], "execut": [10, 40, 48, 49, 50, 51, 56, 63, 64, 65, 96, 147, 152, 153, 260, 301, 354, 446, 557, 758, 826, 837, 847, 865, 869, 870, 875, 880, 898, 908, 910, 921, 924, 941, 966, 1182, 1357, 1368, 1378, 1379, 1380, 1382, 1396, 1398], "execute_glob": 1396, "execute_opt": [152, 153], "exist": [1, 39, 40, 41, 42, 57, 75, 106, 154, 162, 166, 170, 181, 223, 238, 278, 283, 318, 323, 328, 329, 354, 365, 407, 410, 413, 455, 478, 716, 717, 775, 847, 872, 876, 879, 912, 915, 932, 934, 935, 936, 966, 972, 1072, 1099, 1307, 1308, 1398], "existing_t": 1398, "existing_table_path": [40, 354], "exit": [56, 97, 205, 1383, 1396], "exp": [500, 501, 502, 503, 847, 1124, 1125, 1126, 1127, 1368, 1389], "exp_a": 1390, "expand": [147, 150, 162, 165, 170, 506, 599, 603, 648, 744, 847, 972, 1129, 1245, 1368], "expand_selector": 972, "expans": 741, "expect": [38, 40, 43, 47, 48, 49, 50, 51, 54, 73, 79, 111, 119, 127, 150, 152, 154, 160, 162, 165, 166, 168, 169, 170, 175, 177, 195, 211, 354, 585, 594, 807, 847, 896, 898, 966], "expens": [150, 151, 160, 162, 165, 169, 170, 184, 186, 255, 262, 287, 288, 289, 318, 319, 354, 594, 847, 872, 874, 879, 915, 929, 934, 966, 1130, 1218, 1368, 1399], "experiment": [47, 51, 163, 259, 316, 354, 805, 806, 894, 935, 966], "expiri": [38, 40, 43, 47, 48, 49, 50, 51, 154, 160, 162, 165, 166, 168, 169, 170, 195, 354, 966], "explain": [130, 210, 260, 354, 869, 966, 1395], "explainformat": [880, 966], "explicit": [41, 105, 152, 165, 179, 301, 323, 354, 484, 821, 924, 932, 966, 1105], "explicitli": [75, 105, 153, 179, 181, 205, 238, 257, 354, 649, 829, 847, 858, 892, 966, 1396], "explod": [147, 354, 424, 512, 635, 651, 753, 847, 966, 1248, 1368, 1386], "explor": [221, 354, 874, 966], "expon": [640, 847, 1237, 1368, 1390], "exponenti": [500, 501, 502, 503, 505, 640, 847, 1124, 1125, 1126, 1127, 1128, 1368, 1390], "export": [41, 43, 44, 49, 208, 255, 256, 288, 289, 306, 308, 311, 354, 843, 966, 972, 975, 1342, 1368], "expos": 859, "expr": [1, 52, 53, 54, 57, 58, 59, 60, 61, 145, 147, 230, 232, 233, 248, 257, 258, 259, 263, 274, 278, 287, 292, 293, 311, 316, 328, 329, 354, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 847, 848, 849, 852, 853, 854, 855, 856, 881, 882, 883, 892, 893, 894, 899, 909, 916, 917, 935, 936, 966, 972, 1061, 1120, 1121, 1125, 1132, 1133, 1139, 1141, 1143, 1170, 1182, 1188, 1204, 1208, 1217, 1229, 1230, 1245, 1284, 1289, 1296, 1315, 1368, 1394], "expr1": [1388, 1396], "expr2": [1388, 1396], "expr_unique_subset": [274, 354], "express": [0, 8, 52, 53, 54, 63, 145, 147, 178, 181, 185, 213, 230, 232, 234, 242, 248, 257, 258, 262, 263, 274, 278, 282, 287, 292, 293, 297, 300, 311, 316, 317, 328, 329, 331, 333, 340, 354, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 379, 380, 384, 385, 386, 387, 388, 391, 402, 407, 408, 409, 410, 411, 412, 413, 424, 426, 428, 429, 430, 433, 434, 435, 436, 437, 443, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 504, 506, 507, 509, 510, 514, 516, 517, 519, 520, 521, 522, 528, 531, 532, 533, 534, 535, 536, 537, 545, 546, 550, 551, 553, 554, 557, 558, 564, 566, 584, 585, 591, 592, 593, 594, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 612, 614, 616, 618, 619, 621, 623, 625, 626, 629, 630, 632, 634, 635, 639, 640, 641, 642, 644, 648, 649, 650, 651, 653, 654, 677, 678, 679, 682, 684, 685, 687, 689, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 716, 717, 718, 720, 721, 722, 723, 731, 735, 745, 746, 749, 750, 753, 754, 755, 757, 758, 760, 761, 762, 763, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 816, 819, 821, 822, 823, 824, 825, 827, 829, 831, 833, 834, 835, 837, 838, 843, 846, 859, 864, 869, 880, 881, 884, 887, 892, 893, 899, 908, 911, 916, 917, 920, 921, 923, 928, 935, 936, 937, 939, 942, 949, 966, 972, 999, 1036, 1050, 1061, 1068, 1072, 1105, 1120, 1121, 1125, 1131, 1141, 1143, 1153, 1170, 1179, 1182, 1217, 1218, 1229, 1230, 1245, 1246, 1247, 1267, 1271, 1284, 1285, 1286, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1300, 1301, 1307, 1308, 1309, 1322, 1326, 1353, 1368, 1386, 1388, 1390, 1391, 1395], "exprmetanamespac": [598, 604], "ext": [52, 53, 54, 152], "extend": [0, 134, 326, 354, 507, 847, 859, 970, 981, 1131, 1368], "extend_const": [847, 1368], "extens": [313, 354, 1349, 1368], "extern": [202, 937, 966], "external_shallow_clon": 202, "extra": [40, 55, 147, 150, 151, 154, 156, 158, 162, 165, 166, 167, 170, 231, 243, 263, 354, 847, 888, 899, 966, 1130, 1368], "extra_column": [170, 263, 354, 899, 966], "extra_struct_field": [55, 263, 354, 899, 966], "extract": [138, 210, 301, 354, 454, 457, 459, 462, 465, 466, 467, 468, 469, 470, 473, 475, 476, 480, 482, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 639, 702, 703, 704, 709, 710, 720, 722, 847, 1071, 1074, 1075, 1076, 1079, 1082, 1086, 1087, 1088, 1090, 1091, 1094, 1096, 1097, 1101, 1103, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1117, 1293, 1294, 1295, 1300, 1301, 1311, 1389], "extract_mani": [706, 1297], "extract_numb": [639, 847], "extracted_nr": 702, "extrem": [507, 657, 847, 1131, 1253, 1368], "extrema": [681, 847, 1272, 1368], "f": [52, 58, 151, 152, 234, 241, 256, 306, 312, 318, 322, 354, 363, 403, 412, 585, 681, 700, 730, 733, 775, 847, 884, 966, 972, 1015, 1210, 1291, 1321, 1324, 1368, 1373, 1386], "f32": [1, 60, 214, 301, 310, 316, 354, 681, 826, 847, 866, 924, 966, 972, 1216, 1368, 1394], "f4": [312, 354], "f5ed2452": [41, 354], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 57, 59, 61, 65, 84, 96, 132, 134, 159, 171, 178, 181, 214, 215, 216, 219, 221, 222, 223, 225, 227, 232, 233, 236, 240, 241, 242, 243, 248, 249, 257, 258, 263, 265, 266, 267, 268, 272, 278, 279, 280, 299, 300, 302, 304, 316, 325, 328, 333, 336, 338, 341, 342, 343, 344, 346, 347, 354, 362, 365, 371, 372, 373, 374, 375, 376, 394, 400, 405, 412, 425, 431, 432, 434, 435, 436, 444, 445, 449, 450, 480, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 513, 514, 519, 521, 529, 530, 538, 539, 540, 541, 543, 545, 557, 568, 569, 581, 587, 588, 589, 590, 592, 595, 596, 597, 613, 616, 618, 627, 628, 629, 630, 636, 640, 642, 643, 644, 645, 649, 650, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 683, 684, 685, 686, 690, 691, 745, 749, 750, 754, 758, 759, 768, 769, 773, 775, 777, 779, 792, 793, 805, 806, 809, 812, 813, 814, 826, 828, 836, 843, 847, 866, 867, 874, 876, 877, 882, 883, 887, 888, 891, 892, 893, 899, 901, 902, 909, 923, 925, 933, 935, 937, 942, 945, 947, 950, 951, 952, 953, 955, 956, 966, 972, 983, 984, 985, 986, 987, 988, 1006, 1012, 1017, 1024, 1046, 1047, 1052, 1053, 1054, 1062, 1063, 1066, 1067, 1101, 1124, 1125, 1126, 1127, 1128, 1132, 1137, 1148, 1151, 1152, 1182, 1193, 1194, 1206, 1212, 1213, 1214, 1215, 1234, 1237, 1239, 1241, 1247, 1252, 1253, 1255, 1256, 1258, 1259, 1260, 1262, 1263, 1264, 1275, 1276, 1277, 1281, 1340, 1341, 1356, 1357, 1368, 1377, 1385, 1386, 1390, 1393, 1396, 1399], "f64_awai": [675, 847], "f64_to_even": [675, 847], "f_string": 796, "fa1e": [735, 1326], "face": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 354, 966], "facil": 152, "facilit": [217, 354], "factor": [500, 502, 503, 751, 847, 1124, 1126, 1127, 1350, 1368], "fail": [38, 39, 40, 43, 47, 48, 49, 50, 51, 132, 154, 156, 160, 162, 165, 166, 168, 169, 170, 195, 209, 312, 319, 354, 380, 482, 585, 730, 732, 733, 737, 847, 929, 966, 1218, 1321, 1323, 1324, 1328, 1348, 1368, 1394], "fall": [170, 444, 642, 847, 869, 880, 908, 921, 941, 966, 1062, 1239, 1368, 1385], "fallback": [132, 155], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 38, 40, 41, 47, 48, 49, 50, 51, 52, 55, 57, 63, 64, 65, 132, 133, 134, 136, 137, 138, 145, 147, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 209, 213, 214, 215, 216, 221, 228, 234, 236, 240, 241, 242, 243, 247, 250, 251, 252, 255, 257, 258, 260, 266, 267, 273, 274, 276, 278, 279, 282, 287, 288, 289, 290, 292, 295, 298, 300, 301, 304, 307, 309, 312, 313, 317, 318, 319, 323, 324, 326, 328, 336, 338, 341, 342, 344, 347, 354, 366, 367, 368, 379, 382, 383, 386, 390, 391, 399, 404, 407, 410, 413, 424, 425, 426, 430, 438, 439, 440, 441, 442, 443, 444, 451, 463, 464, 480, 497, 498, 499, 500, 502, 503, 521, 522, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 553, 557, 560, 562, 564, 573, 580, 585, 586, 592, 593, 594, 598, 600, 601, 602, 604, 606, 609, 610, 629, 630, 632, 634, 635, 637, 638, 642, 645, 656, 657, 658, 660, 662, 664, 666, 668, 669, 671, 673, 677, 678, 679, 681, 686, 688, 689, 692, 693, 694, 695, 698, 704, 705, 706, 708, 709, 716, 717, 718, 721, 722, 724, 730, 732, 733, 735, 753, 755, 758, 761, 762, 763, 764, 765, 767, 770, 771, 772, 773, 776, 777, 779, 780, 781, 786, 787, 789, 790, 795, 801, 802, 805, 806, 807, 809, 813, 819, 822, 825, 826, 829, 831, 834, 835, 837, 838, 847, 864, 866, 867, 868, 869, 870, 874, 880, 884, 887, 888, 892, 893, 896, 898, 908, 911, 916, 919, 921, 923, 924, 928, 929, 932, 935, 941, 945, 947, 950, 951, 953, 956, 966, 971, 972, 979, 980, 991, 994, 995, 998, 1002, 1003, 1011, 1016, 1019, 1020, 1022, 1025, 1036, 1037, 1038, 1040, 1043, 1045, 1048, 1049, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1068, 1080, 1081, 1101, 1121, 1122, 1124, 1126, 1127, 1134, 1136, 1142, 1144, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1173, 1174, 1178, 1182, 1185, 1187, 1189, 1198, 1205, 1211, 1224, 1230, 1232, 1235, 1236, 1239, 1241, 1242, 1243, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1267, 1269, 1273, 1278, 1280, 1283, 1284, 1285, 1286, 1289, 1295, 1296, 1297, 1299, 1300, 1307, 1308, 1309, 1312, 1313, 1315, 1321, 1323, 1324, 1326, 1343, 1348, 1349, 1353, 1354, 1357, 1359, 1368, 1378, 1380, 1386, 1391, 1396], "far": [41, 354], "fashion": [257, 354], "fast": [47, 49, 51, 147, 184, 186, 354, 507, 679, 847, 966, 970, 1131, 1269, 1368, 1399], "fast_executemani": [39, 354], "fast_project": 940, "faster": [48, 49, 50, 51, 63, 152, 155, 231, 312, 322, 354, 594, 756, 847, 869, 880, 908, 921, 966, 1130, 1218, 1368], "fastexcel": [155, 173], "favor": [39, 354], "fay": 146, "feat1": [311, 316, 354], "feat2": [311, 316, 354], "feather": [43, 156, 168, 354, 859], "featur": [1, 47, 62, 73, 79, 167, 311, 316, 354], "feature_0": [937, 966], "feature_0_train": [937, 966], "feature_1": [937, 966], "feature_nam": [316, 354], "feb": [173, 1391], "februari": 1391, "fed": 726, "feel": [694, 718, 1285, 1309], "fetch": [140, 869, 966], "fetch_california_h": [316, 354], "few": [241, 354], "fewer": [707, 731, 966, 1298, 1322], "ff": 1385, "ff00": [735, 1326], "fff": 1, "ffff00": [408, 409, 696, 1020, 1021, 1287], "ffffff": [41, 354], "ffi": [229, 354, 1123, 1368], "fgg": 972, "fghi": 1391, "fh": 151, "fiction": 1377, "field": [37, 38, 40, 48, 51, 55, 88, 123, 126, 134, 141, 263, 320, 354, 403, 585, 593, 594, 620, 622, 624, 653, 702, 703, 709, 722, 723, 743, 744, 745, 751, 758, 781, 782, 808, 829, 837, 847, 899, 930, 966, 1015, 1210, 1218, 1250, 1294, 1313, 1314, 1335, 1337, 1350, 1368, 1392], "field_0": [403, 585, 1015, 1210], "field_1": [403, 585, 1015, 1210], "field_2": [1015, 1210], "field_id": 141, "field_n": [403, 585, 1015, 1210], "field_nam": [594, 847, 1218, 1368], "field_overwrit": [51, 141, 966], "fiftyf": [527, 847], "figsiz": [609, 908, 921, 966], "figur": [609, 676, 847, 921, 966, 1264, 1368], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 222, 231, 294, 354, 446, 516, 608, 612, 847, 875, 918, 966, 970, 1130, 1368], "file_cache_ttl": [160, 165, 168, 169], "file_idx": [53, 142, 144], "file_path": [52, 53, 54, 142, 144], "filenam": 156, "filesourc": [155, 161, 162, 170], "filesystem": [40, 154, 166, 167, 354], "fill": [57, 65, 215, 232, 233, 297, 322, 354, 358, 406, 439, 442, 508, 509, 515, 529, 530, 658, 660, 662, 664, 666, 669, 671, 673, 680, 796, 819, 822, 838, 847, 882, 883, 920, 937, 966, 1018, 1132, 1133, 1138, 1152, 1231, 1254, 1255, 1257, 1260, 1261, 1262, 1271, 1368], "fill_char": [714, 715, 1305, 1306], "fill_nan": [233, 354, 509, 847, 883, 966, 1133, 1368], "fill_nul": [57, 232, 324, 354, 406, 439, 442, 508, 515, 680, 847, 882, 937, 966, 1018, 1132, 1138, 1368], "fill_valu": [297, 322, 354, 680, 847, 920, 966, 1271, 1368], "fillnullstrategi": [233, 354, 509, 847, 883, 966, 1133, 1368], "film": 1377, "filter": [1, 58, 63, 96, 145, 165, 166, 170, 171, 225, 226, 250, 251, 252, 278, 282, 340, 354, 426, 430, 605, 607, 698, 724, 760, 785, 788, 792, 795, 825, 826, 837, 847, 862, 869, 877, 878, 880, 890, 908, 911, 921, 924, 949, 966, 972, 1268, 1368, 1384], "final": [14, 41, 57, 147, 170, 258, 260, 354, 500, 502, 503, 847, 874, 893, 966, 1124, 1126, 1127, 1368, 1397], "find": [65, 239, 354, 527, 678, 693, 694, 706, 847, 1150, 1267, 1285, 1297, 1307, 1368], "find_pat": 705, "fine": [869, 880, 908, 921, 963, 966], "finish": [52, 53, 54, 231, 354, 1130, 1368], "finish_callback": [52, 53, 54], "finit": [533, 754, 777, 847, 1156, 1368], "first": [47, 57, 150, 151, 155, 156, 158, 161, 162, 165, 170, 174, 175, 176, 177, 210, 241, 243, 245, 257, 258, 261, 262, 273, 277, 278, 286, 305, 309, 310, 318, 319, 324, 331, 337, 354, 379, 381, 390, 443, 447, 472, 474, 479, 495, 514, 524, 527, 534, 547, 555, 557, 562, 563, 585, 593, 594, 606, 615, 639, 640, 655, 678, 689, 693, 700, 701, 705, 707, 709, 710, 716, 717, 731, 738, 773, 774, 781, 795, 799, 837, 843, 847, 888, 889, 892, 893, 897, 907, 914, 929, 937, 939, 946, 966, 972, 991, 1002, 1061, 1063, 1064, 1093, 1095, 1100, 1116, 1147, 1150, 1157, 1172, 1180, 1182, 1187, 1188, 1210, 1218, 1267, 1280, 1291, 1292, 1294, 1296, 1298, 1300, 1301, 1307, 1308, 1322, 1329, 1339, 1343, 1345, 1348, 1368, 1388, 1389, 1391, 1397, 1399], "first_column": [41, 354], "first_non_nul": [585, 1210], "first_part": [722, 723, 1313, 1314], "fisher": [543, 656, 686, 847, 1168, 1252, 1278, 1368], "fit": [146, 255, 298, 322, 354, 681, 822, 847, 1272, 1273, 1368], "five": [315, 354, 1399], "fix": [11, 66, 75, 179, 495, 791, 806, 1116], "flag": [62, 154, 166, 178, 295, 312, 354, 679, 693, 701, 702, 705, 716, 717, 847, 880, 898, 919, 966, 972, 1269, 1284, 1292, 1293, 1296, 1307, 1308, 1348, 1368, 1391], "flat": [146, 289, 354, 558, 651, 847, 1183, 1248, 1368], "flat_from_polar": 141, "flatten": 847, "flavour": [41, 152, 354], "flight": 152, "flight_sql": 152, "flightsql": 152, "float": [11, 12, 38, 41, 48, 55, 77, 78, 150, 151, 165, 171, 174, 175, 176, 177, 178, 181, 185, 209, 221, 225, 229, 232, 258, 263, 280, 290, 311, 312, 346, 354, 432, 444, 449, 450, 480, 497, 498, 499, 500, 502, 503, 508, 513, 514, 519, 521, 529, 533, 536, 538, 539, 540, 541, 545, 573, 588, 592, 595, 609, 613, 627, 628, 629, 630, 640, 642, 643, 657, 658, 660, 662, 664, 666, 667, 669, 671, 673, 675, 677, 683, 754, 820, 822, 847, 874, 877, 882, 893, 899, 909, 921, 955, 966, 972, 1037, 1047, 1062, 1063, 1065, 1066, 1067, 1101, 1119, 1123, 1124, 1126, 1127, 1132, 1137, 1148, 1168, 1198, 1213, 1227, 1228, 1237, 1238, 1239, 1240, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1263, 1265, 1268, 1275, 1278, 1282, 1338, 1348, 1358, 1368, 1396, 1399], "float16": [316, 354], "float32": [1, 11, 38, 48, 60, 214, 236, 263, 310, 311, 312, 316, 354, 501, 847, 866, 899, 966, 972, 1125, 1155, 1216, 1346, 1348, 1351, 1368], "float4": [301, 354, 826, 924, 966, 1394], "float64": [11, 38, 41, 48, 96, 134, 150, 159, 178, 181, 217, 227, 229, 236, 263, 291, 316, 328, 354, 371, 372, 373, 374, 375, 376, 412, 425, 434, 435, 436, 445, 480, 501, 504, 538, 539, 644, 684, 685, 749, 750, 793, 809, 819, 822, 838, 843, 847, 871, 879, 899, 915, 935, 966, 971, 972, 1101, 1125, 1349, 1356, 1368], "float_cast": [55, 263, 354, 899, 966], "float_list": 84, "float_precis": [9, 11, 28, 38, 41, 48, 354, 966], "float_scientif": [38, 48, 354, 966], "floatcastopt": 55, "floatfmt": 12, "floor": [59, 514, 847, 1368, 1389], "floor_a": 1390, "floordiv": [754, 847], "fmt": [12, 258, 354, 528, 796, 847, 890, 893, 966], "fmt_number": [354, 358], "fmt_str_length": [13, 786, 787, 789, 790], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 354], "fn": [781, 782, 795, 821], "foggi": [716, 717, 1307, 1308], "fold": [354, 606, 773, 781, 782, 821, 837], "folder": 171, "follow": [41, 47, 62, 145, 150, 151, 152, 154, 155, 161, 165, 166, 167, 243, 258, 262, 277, 286, 312, 324, 354, 474, 479, 492, 501, 593, 639, 640, 645, 655, 659, 661, 663, 665, 667, 668, 670, 672, 674, 683, 743, 754, 769, 786, 787, 789, 790, 809, 834, 835, 837, 839, 840, 842, 847, 848, 849, 852, 854, 855, 856, 888, 893, 907, 914, 966, 972, 1095, 1100, 1113, 1125, 1237, 1241, 1266, 1268, 1275, 1348, 1360, 1362, 1364, 1368, 1369, 1374, 1375, 1376, 1394, 1399], "font": [41, 354], "font_color": [41, 354], "font_siz": [41, 354], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 146, 159, 160, 214, 217, 218, 219, 223, 224, 225, 226, 227, 228, 231, 234, 236, 238, 239, 240, 244, 245, 246, 247, 248, 249, 251, 257, 261, 262, 264, 265, 266, 267, 268, 271, 272, 275, 278, 280, 282, 283, 284, 287, 290, 291, 292, 294, 296, 299, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 318, 319, 320, 325, 326, 327, 332, 354, 427, 444, 446, 474, 518, 524, 528, 547, 598, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 642, 651, 692, 695, 697, 700, 702, 703, 708, 719, 721, 723, 725, 726, 727, 728, 729, 736, 739, 748, 766, 777, 778, 779, 794, 798, 799, 800, 803, 804, 810, 812, 814, 815, 817, 818, 820, 825, 828, 832, 836, 837, 843, 847, 866, 871, 872, 876, 877, 878, 879, 884, 890, 891, 892, 906, 911, 912, 915, 916, 929, 930, 934, 937, 966, 971, 972, 1039, 1062, 1095, 1189, 1237, 1239, 1248, 1286, 1288, 1291, 1293, 1294, 1310, 1314, 1319, 1320, 1327, 1330, 1368, 1382, 1384, 1385, 1386, 1388, 1391, 1394], "foo1": 1391, "foo11": [236, 354], "foo_": [603, 721, 796], "foo_1": [309, 354], "foo_2": [309, 354], "foo_3_4": 1391, "foo_a": [278, 354], "foo_a_bar_1": 796, "foo_at_1": 1386, "foo_b": [278, 354], "foo_b_bar_2": 796, "foo_bar": [598, 604, 721, 807, 1382], "foo_bar2": [598, 604], "foo_bar_baz": 721, "foo_c_bar_3": 796, "foo_low": [736, 1391], "foo_mean": 1386, "foo_q25": 1385, "foo_q50": 1385, "foo_q75": 1385, "foo_std": 1385, "foo_strip": 725, "foo_strip_end": 726, "foo_strip_start": 727, "foo_sum": [1385, 1386], "foo_uniqu": 1386, "foo_upp": [739, 1391], "foo_var": 1385, "foobar": [728, 729, 1319, 1320, 1391], "foobarbar": [729, 1320], "foofoobar": [728, 1319], "foral": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "forbid": [55, 263, 354, 899, 966], "forc": [150, 156, 160, 162, 258, 262, 312, 340, 354, 585, 892, 893, 949, 966, 1218, 1348, 1368], "force_parallel": [258, 354, 892, 893, 966], "foreign": 202, "form": [38, 48, 131, 133, 134, 135, 137, 159, 160, 169, 211, 255, 288, 322, 354, 484, 636, 713, 738, 847, 862, 966, 1105, 1234, 1304, 1329, 1368, 1391], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 48, 101, 132, 148, 150, 151, 152, 155, 156, 158, 161, 165, 171, 208, 222, 230, 241, 255, 269, 278, 288, 289, 294, 308, 321, 352, 354, 358, 446, 479, 481, 484, 608, 609, 610, 730, 732, 733, 737, 791, 847, 875, 880, 881, 903, 918, 931, 966, 970, 975, 1102, 1105, 1321, 1323, 1324, 1328, 1367, 1391, 1392], "formul": [225, 354, 877, 878, 966], "formula": [41, 354, 497, 847, 1119, 1368], "fortran": [311, 312, 354], "forward": [233, 258, 297, 324, 354, 398, 439, 442, 451, 471, 509, 515, 578, 680, 847, 883, 893, 920, 966, 1010, 1068, 1092, 1133, 1138, 1203, 1271, 1368], "forward_fil": [406, 509, 847, 1018, 1133, 1368], "found": [21, 38, 41, 48, 102, 123, 126, 134, 138, 155, 162, 170, 227, 301, 354, 527, 678, 705, 710, 728, 729, 730, 733, 847, 924, 966, 1150, 1267, 1296, 1301, 1319, 1320, 1321, 1324, 1368, 1380, 1391, 1396], "four": [315, 354, 1396], "fourth": [543, 847, 1168, 1368], "frac": [500, 501, 502, 503, 686, 847, 1124, 1125, 1126, 1127, 1278, 1368], "fraction": [38, 48, 174, 175, 176, 177, 290, 354, 480, 573, 636, 677, 730, 733, 758, 847, 966, 1101, 1198, 1234, 1265, 1321, 1324, 1357, 1368], "fragment": 1396, "frame": [38, 39, 41, 48, 57, 64, 65, 134, 151, 155, 161, 174, 175, 214, 215, 221, 255, 256, 260, 262, 270, 274, 277, 287, 288, 289, 301, 316, 322, 323, 354, 484, 826, 866, 867, 874, 904, 907, 924, 932, 966, 972, 1049, 1105, 1368, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1395, 1399], "frame_data": [1379, 1382], "frameinittyp": [354, 966], "frametyp": [57, 1396], "framework": [278, 321, 354, 931, 966], "freedom": [302, 325, 354, 581, 587, 669, 670, 673, 674, 691, 759, 779, 823, 824, 828, 836, 847, 925, 933, 966, 1260, 1262, 1282, 1358, 1368], "freeli": [263, 354, 826, 899, 924, 966, 972], "freez": [41, 354], "freeze_pan": [41, 354], "frequenc": [324, 354, 758, 847, 1357, 1368], "frequent": [1266, 1268, 1368], "fri": [354, 357], "fridai": [243, 354, 451, 463, 481, 772, 888, 966, 1068, 1080, 1102, 1105], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 48, 49, 50, 51, 55, 57, 65, 75, 88, 96, 101, 105, 121, 125, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 190, 195, 210, 214, 221, 222, 223, 229, 231, 234, 235, 241, 243, 255, 256, 257, 258, 259, 260, 263, 269, 278, 282, 283, 286, 287, 289, 290, 292, 293, 301, 309, 316, 318, 319, 321, 322, 323, 324, 330, 354, 357, 358, 403, 412, 444, 445, 446, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 501, 504, 514, 516, 529, 543, 561, 573, 585, 594, 602, 627, 628, 630, 635, 636, 639, 642, 644, 655, 657, 659, 661, 663, 665, 667, 670, 672, 674, 675, 677, 689, 701, 702, 707, 709, 710, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 756, 768, 769, 772, 773, 785, 786, 787, 788, 789, 790, 791, 805, 807, 822, 826, 833, 834, 835, 837, 843, 846, 847, 866, 874, 875, 876, 884, 888, 892, 893, 894, 899, 903, 911, 912, 914, 916, 917, 924, 929, 931, 932, 937, 938, 966, 970, 971, 972, 1015, 1024, 1062, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1121, 1123, 1125, 1130, 1168, 1186, 1198, 1210, 1227, 1228, 1230, 1231, 1234, 1239, 1253, 1265, 1292, 1293, 1298, 1300, 1311, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1328, 1343, 1359, 1368, 1377, 1378, 1379, 1380, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399], "from_arrai": 826, "from_arrow": 132, "from_json": 847, "from_panda": 132, "from_repr": [310, 354, 1345, 1368], "fromkei": [58, 60], "front": [243, 354, 888, 966], "fruit": [307, 354, 426, 430, 652, 698, 724, 731, 847, 1038, 1043, 1289, 1315, 1322], "fruits_revers": [652, 847], "fsspec": [150, 151, 156, 158, 166, 167, 173], "fsspecfileio": 167, "full": [12, 27, 47, 51, 57, 72, 101, 134, 137, 150, 151, 152, 154, 156, 159, 160, 162, 165, 166, 167, 169, 170, 171, 257, 323, 354, 707, 709, 716, 717, 730, 731, 732, 733, 737, 786, 787, 892, 898, 932, 966, 970, 972, 1298, 1300, 1307, 1308, 1321, 1322, 1323, 1324, 1328, 1368, 1384, 1399], "full_path": [142, 144], "full_sent": 776, "fulli": [183, 277, 290, 312, 354, 525, 847, 1148, 1368], "funcnam": [41, 354], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 73, 79, 96, 97, 98, 128, 130, 132, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 201, 205, 207, 209, 213, 219, 222, 229, 236, 259, 262, 263, 269, 277, 278, 283, 301, 311, 312, 313, 316, 317, 318, 321, 323, 340, 354, 357, 358, 366, 403, 423, 424, 443, 444, 446, 451, 463, 500, 502, 503, 525, 585, 593, 594, 619, 620, 635, 639, 642, 654, 656, 657, 659, 661, 663, 665, 667, 668, 670, 672, 674, 683, 686, 706, 751, 752, 753, 762, 766, 772, 774, 778, 780, 781, 782, 794, 795, 797, 799, 800, 803, 805, 806, 808, 809, 812, 814, 817, 819, 821, 828, 832, 836, 838, 843, 847, 859, 864, 869, 870, 875, 880, 894, 898, 899, 903, 907, 908, 912, 924, 928, 931, 932, 939, 940, 949, 966, 970, 974, 1015, 1035, 1036, 1045, 1061, 1062, 1068, 1080, 1123, 1124, 1126, 1127, 1148, 1210, 1218, 1239, 1251, 1252, 1253, 1256, 1258, 1259, 1266, 1268, 1273, 1275, 1278, 1297, 1346, 1349, 1351, 1352, 1353, 1368, 1373, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 1399], "function_nam": 147, "further": 843, "futur": [43, 44, 64, 209, 221, 257, 295, 306, 354, 870, 874, 892, 919, 966, 1342, 1368], "g": [34, 38, 48, 146, 150, 154, 156, 158, 166, 171, 183, 209, 222, 254, 312, 322, 354, 363, 446, 501, 504, 594, 681, 793, 837, 847, 875, 912, 966, 970, 1125, 1368, 1399], "g1": [510, 760, 847], "g2": [510, 760, 847], "g_1": [686, 847, 1278, 1368], "gag": 27, "gamma": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "gantt": [908, 966], "gather": [151, 237, 354, 379, 518, 561, 770, 847, 886, 966, 991, 1140, 1186, 1368], "gather_everi": [354, 847, 966, 1368], "gb": [229, 354, 412, 1123, 1368], "gbp": 1399, "gc": [40, 154, 166, 167, 354], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 167, 168, 169, 170, 195, 354, 966], "gdp": [258, 354, 893, 966], "gdp2": [258, 354, 893, 966], "gdp_date": [258, 354, 893, 966], "ge": [847, 1368], "gener": [1, 52, 53, 96, 145, 146, 152, 153, 172, 178, 179, 180, 181, 182, 183, 185, 209, 217, 219, 278, 290, 309, 312, 318, 354, 573, 677, 682, 767, 786, 789, 801, 802, 804, 805, 806, 822, 834, 835, 847, 966, 1037, 1198, 1265, 1274, 1343, 1368, 1399], "geq": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "germani": [258, 354, 893, 966], "get": [52, 53, 54, 57, 64, 75, 147, 157, 163, 164, 171, 201, 210, 213, 217, 218, 227, 235, 238, 240, 243, 245, 246, 250, 252, 253, 261, 265, 272, 273, 278, 286, 287, 291, 296, 299, 305, 313, 317, 327, 337, 348, 354, 364, 377, 378, 379, 381, 389, 392, 404, 412, 424, 427, 439, 440, 441, 442, 451, 461, 463, 511, 517, 524, 527, 542, 544, 547, 559, 565, 586, 595, 596, 597, 605, 607, 613, 627, 628, 637, 638, 643, 654, 655, 687, 691, 700, 747, 748, 752, 753, 755, 759, 770, 772, 794, 799, 803, 809, 810, 811, 812, 814, 815, 816, 818, 828, 832, 836, 847, 864, 869, 870, 872, 879, 884, 885, 888, 889, 895, 897, 914, 915, 922, 927, 928, 934, 946, 957, 966, 971, 976, 989, 990, 991, 992, 993, 1001, 1004, 1016, 1024, 1039, 1048, 1057, 1058, 1059, 1060, 1068, 1078, 1080, 1118, 1135, 1136, 1142, 1147, 1150, 1153, 1154, 1166, 1169, 1172, 1184, 1190, 1211, 1219, 1221, 1222, 1224, 1226, 1227, 1228, 1235, 1236, 1240, 1251, 1279, 1282, 1291, 1339, 1343, 1349, 1354, 1358, 1368], "get_chunk": 1368, "get_column": [209, 314, 354], "get_column_index": 354, "get_polars_schema": 203, "get_table_info": 203, "get_token": 34, "get_worksheet_by_nam": [41, 354], "gevent": [64, 173, 870, 966], "gh": 717, "gh45": 717, "gh45ij67kl": 717, "ghi": [363, 702, 847, 972, 1293], "gil": [594, 847, 970], "git": 62, "github": [153, 354], "give": [160, 168, 169, 258, 269, 319, 321, 354, 461, 514, 543, 648, 754, 758, 837, 847, 859, 893, 903, 910, 929, 931, 966, 1078, 1168, 1245, 1357, 1368, 1395], "given": [41, 52, 53, 54, 57, 96, 107, 112, 129, 131, 133, 134, 135, 137, 145, 146, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 176, 177, 178, 179, 181, 183, 184, 185, 186, 207, 229, 230, 232, 234, 243, 248, 253, 262, 270, 276, 277, 282, 287, 288, 289, 297, 300, 316, 323, 354, 386, 398, 403, 412, 424, 433, 452, 456, 481, 483, 484, 497, 501, 525, 531, 553, 578, 585, 588, 594, 635, 639, 645, 648, 649, 651, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 680, 702, 703, 714, 715, 730, 733, 740, 743, 753, 771, 773, 777, 779, 793, 794, 803, 808, 809, 822, 823, 824, 837, 847, 881, 888, 898, 904, 907, 910, 911, 920, 923, 932, 949, 966, 971, 972, 974, 998, 1010, 1015, 1024, 1050, 1069, 1073, 1102, 1104, 1105, 1119, 1123, 1125, 1148, 1153, 1167, 1178, 1203, 1210, 1213, 1216, 1218, 1231, 1237, 1241, 1245, 1248, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1267, 1271, 1293, 1294, 1305, 1306, 1321, 1324, 1331, 1356, 1359, 1368, 1377, 1379, 1384, 1386, 1387, 1390, 1391, 1396, 1398, 1399], "glimps": [221, 245, 354], "glob": [150, 151, 155, 156, 160, 162, 165, 168, 169, 170], "global": [56, 97, 98, 155, 172, 181, 189, 301, 354, 649, 650, 826, 847, 924, 966, 1040, 1044, 1246, 1247, 1368, 1378, 1380, 1395], "gmt": [456, 460, 478, 1073, 1077, 1099], "go": [13, 150, 151, 165, 426, 698, 1038, 1289], "godfath": 1377, "goe": 13, "gonfruit": 1322, "good": [47, 49, 51, 255, 354, 966, 1390], "goodby": 1, "googl": [35, 154, 166, 167], "gpu": [10, 49, 63, 64, 311, 354, 869, 870, 880, 908, 921, 941, 963, 966, 1346, 1368], "gpu_devic": [311, 354], "gpudevic": [311, 354], "gpuengin": [10, 869, 880, 908, 921, 966], "grade": [1168, 1368], "grain": [869, 880, 908, 921, 963, 966], "granular": [51, 966, 1396], "grape": 1391, "graph": [63, 152, 260, 354, 609, 869, 890, 937, 966], "graphviz": [260, 354, 609, 921, 966], "great": [354, 358], "great_tabl": [354, 358], "greater": [215, 258, 354, 519, 521, 531, 686, 714, 715, 723, 740, 837, 847, 893, 966, 1153, 1278, 1305, 1306, 1314, 1331, 1368], "greatest": [1385, 1389], "greatli": [156, 168], "green": [56, 97, 98, 340, 758, 847, 949, 1357, 1368], "greenlet": [64, 870, 966], "greet": 1, "grid": [529, 847], "grid_point": [529, 847], "gridlin": [41, 354], "gross": 1377, "group": [9, 28, 47, 51, 54, 147, 151, 170, 214, 242, 243, 256, 258, 274, 276, 278, 286, 289, 322, 324, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 364, 424, 443, 506, 512, 517, 520, 557, 593, 594, 605, 607, 635, 645, 654, 655, 688, 689, 693, 701, 702, 703, 705, 716, 717, 753, 758, 809, 847, 866, 887, 888, 893, 914, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 966, 972, 1061, 1182, 1251, 1284, 1292, 1293, 1294, 1296, 1307, 1308, 1357, 1368, 1377, 1385, 1395, 1396], "group_bi": [243, 274, 278, 286, 324, 353, 354, 364, 414, 419, 422, 424, 510, 512, 517, 520, 593, 594, 635, 688, 689, 753, 758, 760, 786, 789, 809, 847, 869, 870, 880, 888, 908, 910, 914, 921, 964, 966, 972, 1357, 1368], "group_by_dynam": [286, 354, 914, 966], "group_by_partit": [908, 966], "group_col": [510, 760, 847], "group_df": [340, 949], "group_dtyp": [635, 847], "group_index": [701, 1292], "group_to_row": [635, 847], "groupbi": [242, 354, 594, 809, 847], "grouper": [414, 419, 422, 847], "grow": [326, 354], "grown": [247, 354], "gt": [354, 358, 847, 1368], "gte": [510, 760, 847], "guarante": [10, 47, 51, 150, 151, 213, 221, 244, 270, 317, 319, 354, 423, 424, 523, 751, 752, 753, 847, 864, 874, 904, 928, 929, 966, 1035, 1036, 1146, 1350, 1352, 1353, 1368], "guid": [145, 147, 847, 970, 1399], "gzip": [47, 51, 354, 966], "h": [322, 354, 363, 481, 484, 681, 716, 717, 730, 733, 737, 847, 1307, 1308, 1321, 1324, 1328, 1391, 1392], "ha": [40, 41, 48, 49, 50, 51, 55, 57, 64, 136, 152, 165, 188, 209, 324, 330, 335, 354, 423, 424, 443, 516, 593, 606, 612, 707, 731, 741, 752, 753, 777, 794, 803, 843, 847, 870, 921, 938, 944, 949, 966, 1035, 1036, 1049, 1061, 1063, 1298, 1322, 1352, 1353, 1368], "half": [316, 354, 479, 500, 501, 502, 503, 675, 847, 1100, 1124, 1125, 1126, 1127, 1263, 1368], "half_away_from_zero": [675, 847, 1263, 1368], "half_lif": [500, 501, 502, 503, 847, 1124, 1125, 1126, 1127, 1368], "half_to_even": [675, 847, 1263, 1368], "ham": [36, 38, 40, 43, 44, 47, 214, 217, 218, 219, 223, 224, 225, 226, 227, 228, 234, 239, 244, 245, 247, 257, 261, 264, 266, 268, 271, 275, 280, 282, 283, 284, 287, 290, 291, 292, 299, 302, 303, 305, 309, 310, 312, 313, 314, 319, 325, 326, 354, 427, 609, 610, 843, 866, 871, 872, 876, 877, 878, 879, 884, 892, 906, 911, 912, 915, 916, 929, 937, 966, 1039, 1384, 1385], "ham_a": [309, 354], "ham_b": [309, 354], "ham_right": [257, 354, 892, 966], "hamburg": 843, "hand": [41, 150, 151, 165, 354, 574, 575, 576, 577, 1199, 1200, 1201, 1202], "handi": [451, 463, 772, 1068, 1080], "handl": [40, 42, 104, 138, 147, 150, 151, 165, 171, 234, 238, 282, 354, 447, 555, 700, 740, 847, 869, 884, 911, 966, 1064, 1180, 1291, 1331, 1368], "handler": [148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 222, 354, 446, 847, 875, 966], "happen": [152, 456, 642, 847, 1073, 1239, 1368], "hard": [96, 145, 165, 898, 966], "harder": [243, 354, 888, 966], "hardwar": 1399, "has_head": [150, 151, 155, 161, 165], "has_nul": [847, 1145, 1368], "has_prefix": [430, 724], "has_suffix": [426, 698], "has_two": 1386, "has_valid": 1368, "hash": [244, 354, 847, 1368], "hash_row": 354, "hat": [716, 717, 1307, 1308], "have": [5, 15, 31, 34, 41, 53, 56, 57, 65, 72, 98, 147, 148, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 210, 222, 231, 255, 257, 258, 278, 281, 286, 288, 289, 308, 316, 331, 354, 443, 446, 500, 502, 503, 594, 606, 645, 649, 650, 655, 703, 718, 774, 847, 875, 892, 893, 903, 914, 938, 939, 966, 972, 1061, 1063, 1124, 1126, 1127, 1130, 1241, 1246, 1247, 1307, 1309, 1368, 1395, 1397, 1399], "haystack": [702, 1293], "he": 726, "head": [75, 165, 241, 261, 305, 354, 369, 547, 847, 897, 966, 1172, 1339, 1368], "header": [38, 41, 47, 48, 51, 138, 150, 151, 155, 161, 165, 227, 318, 354, 966], "header_format": [41, 354], "header_nam": [318, 354], "headerless": 165, "heap": [147, 229, 354, 847, 1123, 1368], "heatmap": [41, 354], "heavili": 170, "height": [41, 146, 181, 226, 354, 357, 1368, 1373], "hell": [725, 1316], "hello": [1, 21, 725, 726, 727, 972, 1189, 1316, 1317, 1318, 1379, 1382, 1391], "hello_": 796, "hello_data": 1382, "hello_world": 1382, "help": [41, 174, 175, 176, 177, 354, 966], "helper": [354, 358, 843], "henc": [716, 1308], "here": [38, 40, 41, 43, 47, 48, 49, 50, 51, 131, 133, 134, 135, 137, 152, 153, 154, 159, 160, 162, 165, 166, 167, 168, 169, 170, 179, 181, 185, 195, 210, 278, 354, 451, 463, 593, 594, 609, 703, 710, 772, 837, 847, 862, 921, 966, 972, 1068, 1080, 1301], "hex": [408, 409, 696, 697, 735, 1020, 1021, 1287, 1288, 1326], "hexadecim": [1020, 1021], "hf": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 354, 966], "hf_token": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 354, 966], "hi": [1, 1391], "hidden": [41, 354], "hidden_column": [41, 354], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 354], "hide_password": 152, "high": [289, 354, 358, 642, 847, 859, 1239, 1368], "higher": [47, 51, 55, 221, 280, 346, 354, 643, 666, 667, 820, 847, 874, 909, 955, 966, 1063, 1240, 1258, 1368], "highest": [354, 358, 645, 757, 777, 847, 966, 1241, 1368], "highli": [147, 847], "hint": 145, "hippopotamu": [714, 715, 1305, 1306], "hist": [847, 1368, 1373], "histogram": [1368, 1373], "hit": [865, 966], "hive": [52, 162, 168, 170], "hive_custom": 198, "hive_dir": [52, 54], "hive_partit": [162, 168, 170], "hive_schema": [162, 168, 170], "hive_serd": 198, "hmm": [972, 1391], "hold": [298, 312, 354, 1348, 1368], "holidai": [451, 463, 772, 1068, 1080], "home": [738, 1329], "horizont": [21, 65, 106, 236, 247, 265, 267, 272, 304, 322, 354, 763, 765, 774, 775, 776, 781, 782, 784, 792, 795, 811, 813, 816, 821, 831, 937, 966], "host": [62, 150, 156, 158, 170], "hour": [160, 165, 168, 169, 243, 258, 286, 324, 354, 466, 468, 469, 473, 474, 477, 479, 480, 484, 486, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 788, 789, 790, 791, 805, 833, 834, 835, 847, 888, 893, 914, 966, 972, 1095, 1098, 1100, 1107, 1113, 1125, 1368, 1392], "hours_diff": 486, "hous": [316, 354], "how": [12, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 57, 65, 106, 147, 153, 160, 162, 165, 168, 169, 170, 195, 226, 234, 257, 258, 278, 322, 323, 354, 387, 447, 477, 478, 529, 554, 555, 635, 648, 668, 730, 733, 772, 788, 847, 884, 892, 893, 932, 937, 966, 999, 1064, 1098, 1099, 1179, 1180, 1245, 1259, 1321, 1324, 1368], "howev": [1, 10, 52, 134, 152, 162, 170, 205, 229, 262, 312, 354, 635, 847, 869, 880, 908, 921, 966, 1123, 1368], "hstack": [106, 354], "html": [33, 41, 43, 44, 132, 152, 156, 158, 207, 208, 209, 219, 354, 974, 975], "http": [21, 33, 41, 43, 44, 75, 132, 152, 153, 156, 158, 190, 207, 208, 209, 219, 354, 609, 701, 703, 713, 921, 966, 974, 975, 1292, 1294, 1304], "httpmethod": 75, "hug": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 354, 966], "huge": [229, 354, 1123, 1368], "hut": [716, 717, 1307, 1308], "hvplot": [354, 357, 1368, 1373], "hyperbol": [372, 374, 376, 435, 685, 750, 847, 984, 986, 988, 1053, 1277, 1341, 1368], "hyperloglog": [212, 354, 370, 766, 847, 863, 966, 982, 1368], "hyphen": [692, 1283], "hypothesi": [179, 181, 184, 185, 1399], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 71, 72, 73, 74, 79, 89, 96, 98, 102, 104, 105, 106, 107, 108, 109, 111, 112, 117, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 199, 201, 205, 210, 211, 212, 213, 214, 216, 217, 221, 222, 225, 226, 228, 229, 231, 232, 233, 234, 238, 242, 243, 244, 245, 248, 249, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 269, 270, 274, 276, 277, 278, 282, 283, 284, 286, 287, 288, 289, 290, 293, 294, 295, 297, 299, 300, 301, 302, 305, 306, 311, 312, 313, 316, 317, 318, 319, 321, 323, 324, 325, 329, 331, 332, 340, 354, 357, 358, 363, 366, 368, 369, 370, 380, 383, 390, 391, 398, 403, 406, 411, 423, 424, 425, 428, 429, 443, 444, 446, 449, 450, 451, 452, 455, 463, 464, 471, 472, 474, 479, 481, 484, 492, 500, 501, 502, 503, 506, 508, 509, 510, 514, 515, 523, 525, 528, 531, 543, 549, 556, 557, 560, 562, 564, 573, 578, 579, 581, 585, 587, 590, 593, 594, 598, 600, 601, 602, 604, 605, 606, 608, 617, 635, 640, 642, 645, 647, 648, 649, 650, 651, 654, 655, 656, 657, 659, 661, 663, 665, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 682, 683, 686, 687, 688, 689, 691, 692, 693, 694, 695, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 720, 723, 725, 726, 727, 730, 731, 732, 733, 735, 737, 738, 740, 745, 752, 753, 758, 759, 762, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 789, 790, 795, 799, 800, 801, 802, 804, 805, 806, 807, 809, 812, 814, 817, 819, 822, 823, 824, 825, 826, 828, 832, 834, 835, 836, 837, 838, 843, 847, 862, 863, 864, 865, 868, 869, 870, 872, 874, 875, 877, 878, 879, 880, 882, 883, 884, 887, 888, 891, 892, 893, 894, 896, 898, 899, 903, 904, 908, 911, 912, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 931, 932, 933, 934, 936, 939, 940, 941, 949, 959, 966, 970, 972, 979, 980, 981, 982, 995, 1002, 1003, 1010, 1015, 1018, 1023, 1035, 1036, 1040, 1041, 1042, 1045, 1050, 1051, 1061, 1062, 1063, 1066, 1067, 1068, 1069, 1072, 1080, 1081, 1095, 1100, 1102, 1105, 1113, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1133, 1134, 1135, 1138, 1146, 1147, 1148, 1150, 1153, 1155, 1158, 1165, 1167, 1168, 1169, 1172, 1174, 1181, 1182, 1185, 1187, 1189, 1198, 1203, 1204, 1210, 1218, 1237, 1239, 1241, 1243, 1245, 1246, 1247, 1248, 1251, 1252, 1253, 1256, 1258, 1259, 1260, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1271, 1274, 1275, 1278, 1279, 1282, 1283, 1284, 1285, 1286, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1305, 1306, 1307, 1308, 1309, 1311, 1314, 1316, 1317, 1318, 1321, 1322, 1323, 1324, 1326, 1328, 1329, 1331, 1339, 1342, 1346, 1348, 1349, 1351, 1352, 1353, 1357, 1358, 1368, 1373, 1377, 1378, 1383, 1387, 1388, 1391, 1394, 1396, 1397, 1399], "i0e0": 1399, "i16": [1, 60, 459, 475, 494, 681, 847, 972, 1096, 1345, 1368, 1399], "i32": [1, 60, 131, 134, 138, 178, 180, 181, 292, 301, 354, 389, 390, 392, 411, 425, 454, 462, 465, 466, 467, 468, 469, 473, 496, 681, 772, 837, 847, 916, 966, 971, 1001, 1002, 1004, 1023, 1071, 1082, 1086, 1087, 1088, 1094, 1117, 1216, 1368, 1388, 1392, 1399], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 58, 59, 60, 61, 65, 66, 84, 105, 131, 132, 133, 134, 135, 136, 137, 138, 146, 150, 152, 159, 160, 165, 210, 211, 213, 214, 215, 216, 218, 222, 223, 226, 227, 230, 231, 233, 234, 237, 238, 240, 241, 242, 243, 245, 247, 248, 250, 252, 254, 257, 258, 259, 261, 262, 263, 264, 270, 271, 276, 277, 278, 279, 282, 283, 284, 285, 286, 290, 292, 294, 297, 299, 300, 301, 303, 305, 307, 314, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 344, 347, 348, 354, 363, 365, 369, 379, 384, 385, 387, 388, 393, 395, 396, 397, 398, 399, 401, 404, 414, 419, 422, 423, 424, 433, 439, 440, 441, 442, 443, 444, 447, 448, 461, 477, 483, 485, 486, 487, 488, 489, 490, 491, 501, 504, 506, 507, 509, 510, 511, 512, 514, 517, 518, 520, 524, 526, 528, 529, 530, 531, 534, 535, 537, 538, 539, 540, 541, 544, 547, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 591, 593, 594, 614, 615, 616, 618, 619, 621, 623, 625, 626, 631, 635, 636, 639, 640, 641, 642, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 677, 679, 680, 681, 682, 687, 688, 689, 707, 716, 717, 731, 735, 740, 741, 743, 744, 745, 746, 747, 748, 752, 753, 754, 755, 757, 760, 767, 770, 773, 774, 775, 776, 781, 782, 783, 784, 785, 788, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 821, 825, 826, 827, 830, 831, 832, 833, 837, 843, 847, 862, 864, 866, 867, 869, 870, 875, 876, 878, 881, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 897, 898, 899, 900, 904, 905, 907, 908, 910, 911, 912, 913, 914, 916, 918, 920, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 935, 938, 939, 942, 943, 945, 946, 947, 949, 950, 953, 956, 957, 966, 972, 976, 977, 978, 981, 1000, 1005, 1007, 1009, 1010, 1011, 1013, 1016, 1035, 1036, 1050, 1051, 1057, 1058, 1059, 1060, 1061, 1062, 1078, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1129, 1130, 1131, 1133, 1134, 1139, 1140, 1142, 1147, 1149, 1158, 1172, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1192, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1210, 1211, 1218, 1223, 1231, 1237, 1239, 1242, 1243, 1244, 1246, 1247, 1248, 1250, 1254, 1257, 1261, 1265, 1266, 1268, 1271, 1272, 1274, 1279, 1280, 1326, 1332, 1337, 1339, 1344, 1352, 1353, 1354, 1359, 1368, 1377, 1378, 1380, 1384, 1385, 1386, 1387, 1388, 1390, 1393, 1394, 1396, 1397, 1399], "i8": [402, 403, 459, 462, 466, 468, 469, 470, 473, 475, 476, 480, 493, 494, 584, 681, 819, 822, 838, 847, 1014, 1015, 1064, 1076, 1079, 1090, 1091, 1097, 1101, 1114, 1115, 1209, 1249, 1272, 1356, 1368, 1392], "i_bitand_j": 1387, "i_bitand_op_j": 1387, "i_bitcount": 1387, "i_bitor_j": 1387, "i_bitor_op_j": 1387, "i_bitxor_j": 1387, "i_bitxor_op_j": 1387, "iceberg": [42, 167, 354, 859], "icon": [41, 354], "id": [27, 34, 41, 65, 146, 150, 155, 167, 259, 311, 318, 331, 340, 354, 654, 716, 717, 756, 847, 894, 939, 949, 966, 972, 1251, 1355, 1368, 1396, 1397, 1399], "id_char": 1399, "id_var": [269, 321, 354, 903, 931, 966], "ideal": [140, 145], "ident": [34, 138, 215, 216, 354, 481, 653, 654, 847, 867, 868, 966, 1049, 1051, 1102, 1250, 1251, 1368], "identif": [155, 161], "identifi": [138, 152, 269, 276, 319, 321, 332, 354, 903, 929, 931, 966], "idiograph": 972, "idiom": 837, "idiomat": [843, 872, 879, 915, 934, 949, 966], "idx": [165, 243, 256, 331, 354, 390, 403, 585, 888, 939, 966, 1015, 1210, 1296], "idx_lit": 1296, "idx_rx": 1296, "ieee": [754, 847], "if_set": [5, 31], "if_table_exist": [39, 354], "ifnul": 1389, "ignor": [40, 55, 152, 170, 180, 181, 185, 263, 267, 304, 323, 354, 366, 368, 391, 411, 447, 478, 500, 502, 503, 555, 564, 627, 628, 692, 708, 762, 764, 776, 813, 831, 847, 899, 932, 966, 972, 979, 980, 1003, 1023, 1064, 1099, 1124, 1126, 1127, 1180, 1189, 1227, 1228, 1283, 1299, 1368], "ignore_error": [150, 151, 160, 165, 169], "ignore_nul": [267, 304, 354, 366, 368, 391, 500, 502, 503, 564, 692, 708, 762, 764, 776, 813, 831, 847, 979, 980, 1003, 1124, 1126, 1127, 1189, 1283, 1299, 1368], "ignore_spac": 972, "ij": 717, "ij67": 717, "ijkl": 1391, "ilmsuxu": [693, 701, 702, 705, 716, 717, 1284, 1292, 1293, 1296, 1307, 1308], "imbal": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "imdb_scor": 1377, "immedi": [205, 645, 767, 771, 773, 777, 779, 786, 787, 789, 790, 801, 802, 805, 806, 819, 822, 825, 829, 834, 835, 838, 847, 1241, 1368, 1378], "immut": [312, 354, 1348, 1368], "impact": [243, 354, 888, 966, 1377, 1396], "impl": 167, "implement": [47, 96, 145, 152, 209, 244, 262, 340, 354, 357, 358, 523, 594, 618, 619, 621, 623, 625, 626, 741, 751, 809, 847, 949, 1146, 1218, 1266, 1268, 1350, 1368, 1373], "implic": [446, 847, 875, 966], "implicit": [323, 354, 837, 932, 966], "implicitli": [234, 282, 354, 510, 837, 847, 884, 911, 966, 1396], "implod": [847, 1368, 1386], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 57, 72, 75, 96, 131, 132, 135, 136, 146, 150, 152, 153, 159, 160, 165, 171, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 211, 214, 221, 222, 223, 226, 241, 243, 256, 258, 276, 278, 294, 301, 309, 311, 316, 321, 322, 324, 354, 357, 358, 412, 445, 446, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 601, 602, 608, 635, 657, 659, 661, 663, 665, 667, 670, 672, 674, 772, 785, 786, 787, 788, 789, 790, 791, 792, 805, 826, 834, 835, 843, 847, 859, 866, 870, 874, 875, 876, 878, 888, 893, 898, 918, 931, 966, 970, 1024, 1052, 1054, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1125, 1156, 1159, 1161, 1162, 1253, 1276, 1340, 1368, 1373, 1378, 1393, 1396, 1399], "improv": [39, 51, 156, 167, 168, 257, 354, 593, 847, 892, 966], "in_part_idx": [52, 54, 144], "in_plac": [247, 298, 326, 354, 1242, 1273, 1280, 1368], "in_progress": [910, 966], "includ": [7, 21, 31, 38, 40, 41, 48, 52, 54, 62, 136, 152, 154, 155, 160, 161, 162, 165, 166, 167, 168, 169, 170, 181, 182, 205, 217, 221, 229, 259, 276, 278, 282, 289, 300, 316, 318, 322, 323, 354, 444, 480, 510, 514, 525, 531, 601, 642, 656, 658, 660, 662, 664, 666, 668, 669, 671, 673, 716, 717, 721, 722, 725, 726, 772, 781, 823, 824, 847, 874, 884, 894, 911, 923, 932, 966, 972, 1062, 1063, 1101, 1123, 1134, 1148, 1153, 1239, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1307, 1308, 1312, 1313, 1316, 1368, 1396], "include_bom": [38, 48, 354, 966], "include_boundari": [243, 354, 888, 966], "include_break": [444, 642, 847, 1062, 1239, 1368], "include_breakpoint": [525, 847, 1148, 1368], "include_categor": 972, "include_categori": [525, 847, 1148, 1368], "include_col": 181, "include_file_path": [155, 160, 161, 162, 165, 168, 169, 170], "include_head": [38, 41, 48, 151, 318, 354, 966], "include_index": 136, "include_init": 781, "include_kei": [52, 54, 276, 289, 354], "include_nul": [323, 354, 932, 966], "inclus": [210, 243, 286, 354, 484, 531, 655, 659, 661, 663, 665, 667, 670, 672, 674, 721, 722, 767, 786, 787, 789, 790, 801, 802, 805, 806, 834, 835, 847, 888, 914, 966, 1105, 1153, 1312, 1313, 1368], "incom": 152, "incompat": 124, "incomplet": [650, 847, 1247, 1368], "incorpor": 1396, "incorrect": [295, 354, 495, 593, 594, 679, 847, 919, 949, 966, 1116, 1269, 1368], "incorrectli": [150, 585], "increas": [41, 52, 53, 54, 57, 150, 155, 161, 162, 170, 354, 443, 654, 847, 1061, 1251, 1368], "independ": [63, 178, 181, 185, 316, 354, 682, 847, 869, 880, 908, 921, 966], "index": [41, 112, 132, 136, 139, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 173, 209, 211, 237, 239, 243, 248, 253, 255, 278, 284, 286, 287, 288, 297, 299, 311, 312, 314, 321, 323, 324, 330, 331, 354, 364, 377, 378, 379, 381, 384, 385, 390, 398, 403, 501, 517, 518, 520, 527, 550, 551, 560, 561, 562, 578, 579, 585, 655, 659, 661, 663, 665, 667, 670, 672, 674, 678, 680, 687, 693, 701, 705, 707, 720, 731, 741, 770, 801, 804, 847, 886, 888, 914, 920, 922, 931, 932, 938, 939, 966, 972, 989, 990, 991, 992, 993, 996, 997, 1002, 1010, 1015, 1125, 1139, 1140, 1150, 1167, 1175, 1176, 1185, 1186, 1187, 1203, 1204, 1210, 1231, 1266, 1267, 1271, 1279, 1292, 1296, 1298, 1311, 1322, 1368, 1373, 1386, 1391], "index_column": [243, 286, 354, 655, 847, 888, 914, 966], "index_of": [847, 1368], "indexord": [311, 312, 354], "indic": [38, 41, 43, 47, 48, 49, 50, 51, 71, 72, 74, 89, 105, 115, 147, 148, 150, 151, 152, 155, 156, 158, 160, 161, 162, 165, 168, 169, 170, 178, 179, 185, 195, 243, 286, 289, 297, 309, 354, 380, 398, 517, 525, 532, 533, 534, 536, 537, 538, 539, 540, 541, 560, 578, 598, 599, 600, 601, 602, 603, 604, 635, 655, 659, 661, 663, 665, 667, 670, 672, 674, 678, 680, 770, 771, 818, 847, 888, 914, 920, 966, 972, 1010, 1045, 1139, 1148, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1185, 1203, 1266, 1267, 1271, 1343, 1368, 1391, 1399], "indistinguish": [38, 48, 354, 966], "individu": [41, 51, 141, 205, 286, 311, 312, 316, 354, 594, 702, 744, 847, 869, 914, 966, 972, 1048, 1293, 1368], "inequ": [629, 847], "inexact": [174, 175, 176, 177], "inf": [178, 181, 185, 376, 444, 533, 536, 642, 754, 847, 988, 1054, 1062, 1156, 1159, 1216, 1234, 1239, 1356, 1368, 1393], "infer": [38, 43, 47, 48, 49, 50, 51, 73, 88, 105, 131, 133, 134, 135, 136, 137, 150, 151, 152, 155, 159, 160, 161, 162, 165, 168, 169, 170, 195, 262, 354, 593, 594, 651, 709, 730, 732, 733, 734, 737, 791, 795, 807, 822, 847, 966, 1218, 1248, 1300, 1321, 1323, 1324, 1325, 1328, 1368], "infer_schema": [150, 165], "infer_schema_length": [134, 137, 146, 150, 151, 152, 155, 159, 160, 161, 165, 169, 354, 709, 966, 1300], "inference_length": [734, 1325], "inference_s": [262, 354], "infin": [738, 754, 847, 1329], "infinit": [536, 754, 847, 1159, 1368], "influenc": [155, 898, 966], "influxdb": 152, "info": [154, 166, 167, 173], "inform": [20, 24, 38, 39, 43, 47, 48, 49, 50, 51, 52, 53, 54, 62, 145, 147, 154, 160, 162, 165, 166, 167, 168, 169, 170, 174, 176, 195, 196, 197, 199, 200, 207, 219, 221, 354, 358, 543, 594, 686, 693, 701, 702, 705, 716, 717, 847, 869, 874, 880, 908, 921, 966, 970, 974, 1044, 1168, 1278, 1284, 1292, 1293, 1296, 1307, 1308, 1368], "inherit": [287, 354, 446, 847, 875, 966], "init": [205, 1377], "initcap": 1389, "initi": [33, 34, 35, 41, 88, 145, 190, 205, 354, 781, 795, 837, 1396], "initialis": [75, 152, 205, 966], "inject": [41, 57, 354], "inlin": [25, 289, 354, 693, 701, 702, 705, 716, 717, 1284, 1292, 1293, 1296, 1307, 1308, 1386], "inner": [66, 84, 180, 257, 259, 323, 354, 391, 402, 448, 564, 584, 594, 648, 751, 826, 847, 892, 894, 932, 966, 1003, 1014, 1065, 1189, 1209, 1218, 1245, 1350, 1368, 1384, 1396], "inner_dtyp": [180, 183], "innermost": [180, 183], "innter": 1002, "inprocessqueri": [869, 966], "input": [0, 54, 57, 63, 105, 134, 136, 147, 150, 151, 213, 223, 242, 259, 262, 263, 267, 276, 278, 283, 292, 293, 297, 300, 304, 317, 323, 328, 329, 333, 354, 363, 424, 426, 430, 433, 501, 504, 516, 531, 589, 593, 594, 606, 635, 649, 650, 683, 689, 707, 718, 720, 726, 727, 728, 729, 731, 733, 745, 753, 761, 763, 765, 767, 770, 773, 774, 775, 776, 784, 791, 793, 801, 802, 807, 808, 809, 811, 813, 816, 825, 829, 831, 837, 843, 847, 859, 864, 876, 887, 894, 899, 912, 916, 917, 920, 923, 928, 932, 935, 936, 942, 966, 1036, 1050, 1125, 1153, 1214, 1215, 1218, 1237, 1246, 1247, 1271, 1275, 1298, 1311, 1322, 1324, 1353, 1368, 1390, 1391, 1393], "input_wildcard_expans": [147, 847], "insensit": [694, 702, 704, 706, 716, 717, 718, 972, 1284, 1285, 1293, 1295, 1296, 1297, 1307, 1308, 1309], "insensitive_match": [693, 705], "insert": [39, 55, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 248, 263, 318, 320, 354, 678, 692, 708, 740, 847, 899, 930, 966, 1267, 1283, 1299, 1331, 1368], "insert_aft": [41, 354], "insert_befor": [41, 354], "insert_chart": [41, 354], "insert_column": 354, "insid": [64, 593, 837, 847, 870, 966], "inspect": [847, 966], "instal": [33, 34, 35, 109, 136, 150, 151, 153, 156, 158, 219, 313, 354, 451, 463, 609, 772, 921, 966, 1068, 1080, 1349, 1368], "instanc": [38, 43, 47, 48, 49, 50, 51, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 181, 185, 195, 231, 236, 354, 606, 781, 795, 843, 859, 866, 898, 910, 938, 939, 966, 1130, 1368], "instanti": [34, 39, 41, 152, 183, 292, 310, 311, 328, 354, 916, 935, 966, 971, 1345, 1346, 1368], "instantli": [64, 870, 966], "instead": [38, 40, 45, 46, 57, 64, 66, 132, 133, 134, 137, 150, 151, 152, 155, 161, 162, 165, 170, 171, 178, 179, 180, 181, 185, 212, 213, 241, 254, 255, 258, 262, 269, 274, 276, 287, 288, 289, 292, 293, 294, 297, 311, 312, 313, 317, 329, 330, 354, 357, 358, 379, 398, 424, 425, 428, 429, 444, 458, 484, 501, 504, 514, 578, 608, 642, 649, 680, 692, 700, 711, 712, 725, 726, 727, 728, 729, 740, 753, 760, 767, 769, 771, 773, 777, 778, 779, 786, 787, 789, 790, 791, 801, 802, 805, 806, 819, 822, 825, 826, 829, 834, 835, 838, 847, 862, 863, 864, 870, 880, 893, 903, 916, 917, 918, 920, 928, 936, 937, 938, 941, 966, 972, 991, 1010, 1020, 1036, 1037, 1041, 1042, 1062, 1075, 1084, 1085, 1105, 1125, 1145, 1203, 1239, 1246, 1266, 1268, 1271, 1280, 1283, 1291, 1302, 1303, 1316, 1317, 1318, 1331, 1348, 1349, 1353, 1368, 1373, 1377, 1378, 1382, 1396, 1397], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 48, 49, 50, 51, 53, 59, 66, 73, 134, 137, 140, 141, 142, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 195, 197, 211, 213, 215, 221, 229, 232, 233, 237, 239, 241, 244, 245, 246, 248, 253, 255, 256, 258, 261, 262, 273, 274, 284, 286, 287, 290, 296, 297, 299, 302, 305, 310, 314, 317, 322, 325, 327, 330, 331, 337, 348, 354, 363, 390, 398, 400, 403, 405, 406, 423, 424, 443, 447, 451, 477, 500, 502, 503, 507, 508, 509, 515, 517, 518, 520, 523, 524, 525, 547, 555, 560, 561, 562, 563, 573, 578, 579, 581, 583, 584, 585, 587, 634, 636, 639, 640, 642, 645, 648, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 682, 687, 691, 701, 707, 709, 714, 715, 716, 720, 722, 723, 731, 734, 735, 740, 748, 752, 753, 759, 761, 767, 777, 779, 785, 788, 791, 797, 799, 801, 802, 805, 806, 818, 819, 822, 823, 824, 828, 829, 832, 833, 836, 838, 847, 864, 867, 874, 882, 883, 886, 889, 893, 897, 908, 920, 922, 925, 927, 928, 933, 934, 938, 939, 941, 946, 957, 966, 971, 972, 989, 990, 1002, 1010, 1012, 1015, 1017, 1018, 1035, 1036, 1037, 1048, 1049, 1055, 1061, 1064, 1065, 1068, 1098, 1123, 1124, 1126, 1127, 1131, 1132, 1133, 1138, 1139, 1140, 1146, 1147, 1148, 1150, 1167, 1171, 1172, 1180, 1185, 1186, 1187, 1188, 1198, 1203, 1204, 1206, 1208, 1209, 1210, 1212, 1224, 1225, 1227, 1228, 1231, 1233, 1234, 1237, 1238, 1239, 1241, 1245, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1274, 1279, 1282, 1292, 1298, 1300, 1305, 1306, 1307, 1311, 1313, 1314, 1322, 1325, 1326, 1331, 1338, 1339, 1345, 1352, 1353, 1358, 1368, 1380, 1383, 1396, 1399], "int16": [1, 60, 316, 354, 441, 442, 475, 747, 847, 972, 1059, 1060, 1096, 1338, 1345, 1368], "int32": [1, 41, 60, 65, 131, 134, 178, 180, 181, 243, 256, 263, 286, 311, 354, 389, 390, 392, 411, 425, 454, 465, 466, 467, 468, 473, 496, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 751, 822, 847, 888, 899, 914, 966, 971, 972, 998, 1001, 1002, 1004, 1023, 1071, 1082, 1086, 1087, 1088, 1094, 1117, 1125, 1216, 1350, 1351, 1368], "int64": [1, 40, 41, 59, 60, 65, 66, 88, 107, 150, 159, 217, 227, 236, 243, 263, 277, 286, 291, 292, 306, 313, 354, 384, 385, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 441, 442, 485, 486, 487, 488, 489, 490, 491, 495, 501, 504, 593, 594, 620, 622, 624, 639, 647, 655, 659, 661, 663, 665, 667, 670, 672, 674, 709, 735, 747, 751, 767, 774, 793, 801, 802, 807, 822, 829, 843, 847, 871, 879, 888, 899, 907, 914, 915, 916, 966, 972, 996, 997, 999, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1059, 1060, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1118, 1125, 1218, 1243, 1326, 1338, 1348, 1349, 1350, 1351, 1368], "int64arrai": [1342, 1368], "int8": [1, 60, 88, 236, 354, 402, 403, 441, 442, 459, 462, 469, 470, 476, 480, 493, 494, 584, 747, 819, 822, 838, 847, 971, 1014, 1015, 1059, 1060, 1064, 1076, 1079, 1090, 1091, 1097, 1101, 1114, 1115, 1209, 1249, 1338, 1348, 1356, 1368], "int_rang": [243, 322, 331, 340, 354, 767, 804, 825, 888, 898, 939, 949, 966], "integ": [38, 41, 48, 55, 71, 72, 74, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 172, 179, 181, 184, 186, 211, 226, 243, 263, 286, 309, 312, 354, 367, 432, 480, 513, 514, 634, 640, 642, 647, 654, 655, 656, 668, 707, 731, 735, 761, 767, 797, 801, 802, 822, 847, 878, 888, 899, 914, 966, 972, 1047, 1101, 1137, 1237, 1239, 1243, 1251, 1252, 1259, 1266, 1298, 1322, 1326, 1348, 1368, 1390, 1396, 1399], "integer_cast": [55, 263, 354, 899, 966], "integer_list": 84, "integr": [41, 316, 354, 659, 661, 663, 665, 667, 670, 672, 674, 847, 1399], "intend": [1, 174, 175, 176, 177, 740, 1331], "intens": [262, 340, 354, 635, 847, 1218, 1368], "interact": [181, 185, 221, 354, 357, 874, 966, 1368, 1373], "interchang": [132, 209], "interest": [151, 481, 484, 1102, 1105], "interfac": [0, 120, 121, 131, 132, 203, 204, 208, 859, 975, 1396], "interfer": 970, "interleav": 1391, "intermedi": [249, 354, 529, 847, 891, 966, 1151, 1152, 1368, 1399], "intern": [43, 44, 49, 152, 172, 255, 306, 354, 514, 847, 966, 1342, 1368, 1378], "interoper": [207, 974], "interpol": [221, 280, 346, 354, 509, 530, 597, 643, 666, 667, 820, 847, 874, 909, 955, 966, 1063, 1152, 1240, 1258, 1368, 1385], "interpolate_bi": [847, 1368], "interpolationmethod": [529, 847, 1151, 1368], "interpret": [135, 137, 150, 151, 165, 354, 411, 966, 1023], "intersect": [41, 354, 575, 972, 1200, 1395], "interv": [243, 286, 324, 354, 444, 479, 525, 531, 642, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 805, 806, 834, 835, 847, 888, 914, 966, 1062, 1076, 1078, 1079, 1086, 1088, 1090, 1091, 1094, 1096, 1097, 1100, 1104, 1114, 1148, 1153, 1239, 1368, 1385], "intoexpr": [147, 213, 242, 243, 286, 292, 293, 297, 300, 317, 328, 329, 333, 354, 369, 386, 387, 407, 410, 413, 424, 447, 451, 477, 501, 507, 517, 525, 527, 530, 531, 553, 554, 574, 575, 576, 577, 635, 649, 650, 659, 661, 663, 665, 667, 670, 672, 674, 678, 680, 689, 694, 704, 706, 718, 721, 722, 723, 725, 726, 727, 728, 729, 745, 753, 763, 765, 770, 773, 774, 775, 776, 777, 779, 781, 784, 788, 795, 805, 811, 813, 816, 822, 825, 829, 831, 847, 864, 887, 888, 914, 916, 917, 920, 923, 928, 935, 936, 942, 966, 998, 999, 1019, 1022, 1025, 1036, 1068, 1125, 1131, 1150, 1152, 1153, 1178, 1179, 1246, 1247, 1267, 1271, 1297, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1353, 1368], "intoexprcolumn": [234, 248, 282, 354, 390, 391, 398, 423, 424, 433, 479, 507, 510, 561, 564, 573, 578, 636, 640, 677, 680, 701, 707, 710, 720, 731, 735, 740, 752, 753, 767, 772, 786, 787, 789, 790, 801, 802, 806, 834, 835, 837, 847, 884, 911, 920, 966, 1002, 1003, 1010, 1050, 1095, 1100, 1113, 1131, 1186, 1189, 1198, 1203, 1234, 1245, 1292, 1298, 1301, 1311, 1322, 1326, 1331, 1368], "introduc": [56, 98, 730, 732, 733, 1321, 1323, 1324], "introduct": 1395, "intuit": [514, 847, 972], "invalid": [38, 48, 121, 150, 151, 165, 214, 354, 425, 709, 710, 735, 754, 847, 966, 1020, 1037, 1300, 1301, 1326, 1368], "invalid_valu": 1020, "invalidoperationerror": [650, 847, 1247, 1368, 1394], "invari": [898, 966], "invers": [371, 372, 373, 374, 375, 376, 847, 983, 984, 985, 986, 987, 988, 1348, 1368, 1393], "invert": 972, "invok": [205, 593, 847], "involv": [234, 282, 354, 884, 911, 966], "io": [36, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 148, 150, 156, 157, 158, 159, 160, 163, 164, 165, 167, 168, 169, 222, 294, 354, 446, 516, 608, 847, 875, 918, 966], "io_sourc": 145, "iobas": [45, 159, 160, 222, 294, 354, 446, 608, 612, 847, 875, 918, 966], "ipc": [43, 44, 49, 156, 157, 158, 168, 171, 354, 859, 966], "ipccompress": [43, 44, 49, 354, 966], "ir": [921, 966], "is_between": [847, 1368], "is_dupl": [354, 847, 1368], "is_elementwis": [147, 593, 847], "is_empti": [354, 1368], "is_finit": [847, 1368], "is_first_distinct": [847, 1368], "is_in": [107, 234, 354, 847, 1368], "is_infinit": [847, 1368], "is_last_distinct": [847, 1368], "is_nan": [225, 354, 847, 877, 966, 1368], "is_not_nan": [847, 1368], "is_not_nul": [282, 354, 847, 911, 966, 1368], "is_nul": [226, 354, 847, 878, 966, 1368], "is_numer": 1399, "is_odd": [292, 354, 916, 966, 972], "is_selector": 972, "is_sort": 1368, "is_uniqu": [354, 847, 1368], "isn": [96, 145, 837], "iso": [465, 484, 493, 494, 1082, 1105, 1114, 1115, 1391], "iso8601": [150, 151, 165, 484, 1105], "iso_lang": 1391, "iso_year": 496, "isodow": 1392, "isoweek": 1392, "isoyear": 1392, "issu": [100, 101, 104, 105, 108, 115, 117, 128, 150, 151, 152, 165, 354, 441, 442, 747, 847, 1059, 1060, 1338, 1368, 1396], "ital": [41, 354], "item": [14, 65, 151, 241, 287, 290, 354, 386, 390, 391, 447, 506, 553, 555, 562, 564, 573, 677, 723, 847, 862, 998, 1002, 1003, 1064, 1129, 1178, 1180, 1187, 1189, 1198, 1265, 1314, 1368], "iter": [52, 53, 54, 57, 63, 64, 65, 75, 130, 131, 134, 145, 147, 152, 184, 186, 213, 223, 234, 242, 243, 254, 255, 256, 259, 282, 286, 287, 288, 289, 292, 293, 300, 317, 318, 328, 329, 332, 333, 354, 424, 443, 451, 463, 510, 635, 689, 745, 753, 763, 765, 770, 772, 773, 774, 775, 776, 784, 811, 813, 816, 825, 829, 831, 837, 843, 847, 864, 876, 884, 887, 888, 894, 911, 914, 916, 917, 923, 928, 935, 936, 942, 966, 971, 972, 1036, 1061, 1068, 1080, 1134, 1266, 1353, 1368, 1399], "iter_batch": 152, "iter_column": 354, "iter_row": [256, 287, 288, 289, 354], "iter_slic": 354, "its": [76, 138, 173, 229, 312, 354, 455, 479, 492, 501, 593, 653, 689, 744, 758, 837, 847, 862, 872, 879, 934, 966, 970, 1044, 1072, 1100, 1113, 1123, 1125, 1250, 1348, 1368, 1398], "itself": [179, 354, 357, 358, 594, 656, 658, 660, 662, 664, 666, 668, 669, 671, 673, 771, 823, 824, 847, 896, 966, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1368, 1373, 1377, 1378, 1396], "ix": [278, 354], "j": [318, 354, 1387], "jax": [311, 354, 1346, 1368], "jax_enable_x64": [311, 354], "jaxexporttyp": [311, 354], "jjk": 972, "jkl": [702, 1293], "jklmn": 1391, "job": [865, 966], "join": [56, 57, 63, 65, 98, 234, 258, 259, 282, 323, 354, 510, 529, 635, 692, 826, 847, 869, 880, 884, 893, 894, 908, 911, 921, 932, 937, 966, 1283, 1378, 1380, 1386, 1395, 1396], "join_asof": [257, 354, 892, 966], "join_nul": [257, 354, 892, 966], "join_wher": [354, 966], "joinstrategi": [57, 257, 354, 892, 966], "joinvalid": [257, 354, 892, 966], "jpy": 1399, "json": [2, 3, 5, 6, 45, 46, 146, 147, 159, 160, 167, 169, 198, 222, 294, 354, 446, 516, 608, 612, 709, 710, 742, 847, 859, 875, 918, 966, 1300, 1301, 1334], "json_path": [710, 1301], "json_path_match": [709, 1300], "json_stat": 5, "json_str": [159, 160], "json_val": [710, 1301], "jsonencod": 146, "jsonpath": [709, 710, 1300, 1301], "jst": [138, 972], "jul": [730, 1321, 1391], "juli": [1105, 1391, 1392], "just": [41, 136, 152, 165, 269, 321, 354, 903, 931, 966, 972], "k": [213, 289, 317, 318, 354, 423, 424, 438, 543, 752, 753, 847, 864, 928, 966, 1035, 1036, 1056, 1168, 1352, 1353, 1368], "k_2": [686, 847, 1278, 1368], "k_3": [686, 847, 1278, 1368], "kadokawa": [713, 1304], "kanji": 972, "karen": [278, 354], "kathmandu": [1074, 1075, 1103], "kb": [229, 354, 412, 1024, 1123, 1368], "kde": [1368, 1373], "keep": [57, 150, 151, 160, 165, 168, 169, 234, 319, 323, 324, 354, 516, 593, 611, 619, 649, 773, 837, 847, 929, 932, 966, 1246, 1368], "kei": [38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 57, 62, 65, 143, 144, 154, 160, 162, 165, 166, 167, 168, 169, 170, 195, 210, 211, 243, 255, 257, 258, 270, 276, 283, 285, 288, 289, 323, 354, 510, 594, 649, 650, 718, 786, 789, 829, 847, 888, 892, 893, 904, 910, 912, 913, 932, 966, 972, 976, 1246, 1247, 1309, 1368, 1384], "kept": [319, 354, 929, 966], "keyedpartit": 144, "keyedpartitioncontext": [52, 54, 143], "keyerror": 17, "keystrok": 843, "keyword": [40, 154, 162, 166, 181, 185, 195, 219, 242, 277, 287, 292, 293, 313, 328, 329, 333, 354, 451, 510, 639, 734, 745, 772, 825, 829, 837, 847, 887, 907, 916, 917, 935, 936, 942, 966, 1068, 1325, 1349, 1368, 1381], "kl": 717, "kleen": [366, 368, 762, 763, 764, 765, 847, 979, 980, 1368], "klmnoopqrstuvwxyz": [256, 354], "knight": 1377, "know": [57, 152, 278, 321, 354, 585, 593, 847, 862, 931, 966], "known": [156, 199, 403, 585, 675, 847, 949, 1015, 1210, 1263, 1368], "kurtosi": [656, 847, 1252, 1368], "kuzu_db_conn": 152, "kwarg": [32, 33, 37, 56, 67, 68, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 147, 149, 152, 153, 181, 183, 185, 198, 202, 219, 234, 277, 282, 313, 354, 357, 639, 847, 884, 907, 911, 941, 966, 1349, 1368, 1373, 1381, 1396], "k\u00f9zudb": 152, "l": [805, 806], "l1": 65, "l2": 65, "label": [243, 311, 316, 354, 357, 358, 444, 642, 656, 657, 658, 660, 662, 664, 666, 668, 669, 671, 673, 847, 888, 908, 966, 1062, 1239, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1368, 1373], "label_column": [316, 354], "labelangl": [354, 357, 1368, 1373], "lag": [297, 354, 398, 578, 680, 775, 847, 920, 966, 1010, 1203, 1271, 1368], "lake": [40, 154, 166, 354, 859], "lambda": [52, 96, 165, 236, 262, 277, 278, 283, 340, 354, 403, 502, 503, 585, 593, 594, 619, 620, 781, 782, 795, 808, 809, 821, 847, 898, 907, 912, 949, 966, 1015, 1126, 1127, 1210, 1218, 1368], "land": [451, 463, 1068, 1080], "languag": [165, 243, 258, 286, 324, 354, 474, 479, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1113, 1125, 1368], "larg": [11, 12, 15, 57, 152, 155, 161, 170], "large_str": [256, 306, 313, 354], "larger": [11, 48, 49, 50, 51, 514, 777, 847, 966], "largest": [213, 317, 354, 424, 752, 753, 847, 864, 928, 966, 1036, 1352, 1353, 1368], "last": [40, 160, 165, 168, 169, 174, 175, 176, 177, 245, 258, 261, 278, 289, 300, 305, 312, 319, 348, 354, 379, 390, 399, 443, 459, 471, 475, 493, 515, 537, 562, 580, 583, 585, 618, 619, 621, 623, 625, 626, 635, 650, 688, 689, 707, 723, 731, 748, 770, 832, 843, 847, 893, 923, 927, 929, 957, 966, 972, 991, 1002, 1011, 1061, 1076, 1092, 1096, 1114, 1138, 1147, 1160, 1172, 1187, 1205, 1208, 1247, 1280, 1298, 1314, 1322, 1339, 1348, 1368, 1389, 1391], "last_column": [41, 354], "later": [258, 294, 354, 608, 893, 918, 966], "latest": [33, 132, 154, 166, 209, 477, 478, 606, 730, 733, 788, 1098, 1099, 1321, 1324], "latt": 972, "latter": [41, 132, 231, 354, 1130, 1368], "lazi": [1, 48, 49, 50, 51, 52, 65, 150, 156, 160, 162, 165, 181, 258, 277, 278, 301, 354, 594, 797, 819, 822, 838, 847, 874, 892, 893, 937, 942, 943, 945, 947, 949, 950, 951, 952, 953, 954, 955, 956, 966, 972, 1377, 1378, 1379, 1380, 1381, 1383, 1396, 1399], "lazili": [150, 151, 156, 160, 162, 165, 166, 167, 168, 169, 170, 870, 966], "lazy_fram": [63, 64, 130], "lazyfram": [0, 1, 10, 57, 58, 59, 60, 61, 63, 64, 65, 96, 130, 141, 145, 150, 156, 160, 162, 165, 166, 167, 168, 169, 170, 171, 174, 175, 181, 195, 217, 222, 260, 263, 277, 278, 294, 301, 354, 446, 510, 585, 608, 825, 826, 837, 847, 859, 963, 964, 965, 971, 972, 1377, 1378, 1381, 1383, 1396, 1397, 1399], "lazyframeext": [910, 966], "lazygroupbi": [887, 888, 914, 966], "lbl": [311, 316, 354], "ldf": [1, 942, 943, 945, 947, 950, 951, 952, 953, 954, 955, 956], "ldot": [501, 847, 1125, 1368], "le": [698, 847, 1368], "lead": [15, 47, 96, 138, 145, 171, 267, 295, 297, 304, 354, 398, 517, 520, 578, 585, 593, 594, 679, 680, 725, 727, 777, 813, 831, 847, 898, 919, 920, 949, 966, 1010, 1203, 1218, 1269, 1271, 1316, 1318, 1368], "leap": [464, 474, 1081, 1095], "leap_year": 464, "learn": [316, 354], "least": [65, 111, 278, 354, 420, 421, 636, 701, 703, 773, 777, 779, 847, 1032, 1033, 1234, 1292, 1294, 1368, 1389], "leav": [6, 269, 321, 354, 585, 903, 931, 966], "left": [16, 17, 41, 57, 174, 175, 176, 177, 243, 257, 258, 286, 323, 354, 444, 500, 501, 502, 503, 529, 531, 642, 655, 659, 661, 663, 665, 667, 670, 672, 674, 678, 751, 773, 781, 782, 786, 787, 789, 790, 795, 805, 806, 821, 834, 835, 837, 847, 888, 892, 893, 914, 932, 966, 1062, 1124, 1125, 1126, 1127, 1153, 1239, 1267, 1350, 1368, 1380, 1384, 1389], "left_clos": [444, 642, 847, 1062, 1239, 1368], "left_on": [257, 258, 323, 354, 892, 893, 932, 966], "left_right": [257, 323, 354, 892, 932, 966], "leftmost": [678, 847, 1267, 1368, 1391], "len": [13, 181, 185, 217, 256, 278, 331, 335, 340, 354, 437, 594, 605, 607, 645, 653, 778, 801, 805, 847, 871, 934, 939, 944, 949, 966, 971, 1055, 1250, 1368], "len_byt": [13, 429, 712, 713, 1042, 1303], "len_char": [428, 711, 1041, 1302], "length": [65, 66, 84, 147, 155, 161, 165, 179, 183, 241, 243, 286, 299, 354, 357, 428, 443, 479, 579, 585, 606, 645, 649, 650, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 687, 707, 711, 712, 714, 715, 718, 720, 731, 740, 774, 805, 806, 819, 822, 823, 824, 838, 847, 862, 888, 908, 914, 922, 966, 1041, 1048, 1061, 1072, 1100, 1204, 1210, 1231, 1246, 1247, 1250, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1279, 1298, 1302, 1303, 1305, 1306, 1309, 1311, 1322, 1331, 1368, 1385, 1386, 1389], "leq": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "less": [54, 165, 258, 354, 514, 545, 592, 593, 723, 837, 847, 893, 966, 1314, 1399], "letter": [230, 337, 348, 354, 504, 694, 702, 704, 706, 718, 738, 793, 847, 881, 946, 957, 966, 972, 1285, 1293, 1295, 1297, 1309, 1329, 1391], "level": [11, 41, 43, 44, 47, 49, 51, 146, 163, 165, 168, 169, 170, 236, 262, 274, 301, 306, 354, 358, 510, 847, 859, 924, 966, 1342, 1368, 1396], "lexic": [69, 972, 1045], "lf": [10, 48, 49, 50, 51, 60, 96, 141, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 918, 920, 921, 922, 923, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 937, 938, 939, 944, 948, 966, 1385, 1396, 1399], "lf1": [826, 924, 966, 1381, 1383, 1397], "lf2": [826, 924, 966, 1381, 1383, 1397], "lf3": [966, 1381], "lf4": [966, 1381], "lf5": 966, "lf6": 966, "lf_other": [937, 966], "lib": [847, 1342, 1368], "librari": [1, 113, 147, 152, 155, 593, 847, 970, 1399], "life": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "lifetim": [205, 858, 1383], "light": [41, 354], "like": [36, 38, 40, 43, 44, 45, 46, 47, 64, 132, 147, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 211, 222, 243, 250, 252, 257, 289, 294, 311, 312, 354, 357, 446, 452, 516, 557, 593, 611, 645, 701, 726, 727, 758, 843, 847, 865, 870, 875, 888, 966, 1069, 1182, 1241, 1292, 1357, 1368, 1373], "limit": [11, 12, 51, 52, 152, 153, 187, 233, 354, 406, 509, 515, 847, 883, 966, 1018, 1133, 1138, 1368, 1386, 1395], "line": [11, 21, 41, 150, 151, 155, 165, 241, 250, 252, 354, 357, 701, 1292, 1368, 1373], "line_termin": [38, 48, 354, 966], "linear": [221, 249, 280, 346, 354, 529, 530, 552, 597, 643, 666, 667, 775, 776, 820, 847, 874, 891, 909, 955, 966, 1063, 1151, 1152, 1177, 1240, 1258, 1368], "linearli": 806, "lineitem": [140, 151, 153], "link": 970, "list": [1, 14, 34, 40, 41, 57, 58, 60, 63, 64, 66, 72, 88, 105, 130, 131, 133, 134, 135, 137, 138, 140, 141, 144, 145, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 179, 180, 181, 185, 192, 193, 194, 200, 211, 218, 223, 227, 229, 230, 234, 240, 242, 243, 247, 255, 273, 276, 282, 286, 287, 288, 289, 292, 300, 307, 308, 316, 318, 319, 320, 322, 328, 333, 334, 354, 364, 391, 402, 403, 404, 444, 451, 463, 506, 512, 517, 526, 535, 593, 594, 606, 607, 635, 642, 648, 651, 657, 658, 660, 662, 664, 666, 669, 671, 673, 688, 689, 700, 702, 704, 706, 721, 741, 743, 744, 751, 770, 772, 775, 786, 787, 789, 790, 792, 800, 802, 806, 807, 809, 827, 829, 835, 843, 847, 872, 879, 881, 884, 887, 888, 911, 916, 923, 929, 930, 935, 937, 942, 943, 966, 971, 972, 1003, 1014, 1015, 1016, 1048, 1062, 1068, 1080, 1123, 1129, 1139, 1142, 1148, 1149, 1158, 1218, 1239, 1245, 1248, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1285, 1291, 1293, 1295, 1297, 1309, 1312, 1347, 1350, 1368, 1377, 1382, 1386, 1388, 1391, 1398, 1399], "list_catalog": 203, "list_namespac": 203, "list_of_seri": 809, "list_tabl": 203, "listitem": 141, "listtostructwidthstrategi": [585, 1210], "lit": [1, 365, 407, 531, 602, 618, 705, 774, 775, 781, 795, 819, 822, 837, 838, 847, 1133, 1368], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 48, 49, 50, 51, 55, 152, 154, 160, 162, 165, 166, 167, 168, 169, 170, 184, 185, 186, 195, 198, 202, 263, 273, 292, 293, 297, 323, 328, 329, 354, 365, 407, 426, 430, 433, 455, 477, 498, 499, 507, 514, 519, 521, 531, 545, 592, 602, 614, 616, 629, 630, 640, 649, 650, 693, 694, 695, 704, 705, 706, 716, 717, 718, 745, 746, 754, 763, 765, 767, 773, 774, 775, 776, 784, 785, 788, 801, 805, 807, 811, 813, 816, 825, 829, 831, 833, 837, 847, 883, 899, 916, 917, 920, 932, 935, 936, 966, 972, 1019, 1050, 1072, 1098, 1121, 1131, 1153, 1230, 1246, 1247, 1266, 1268, 1271, 1284, 1285, 1286, 1295, 1296, 1297, 1307, 1308, 1309, 1368, 1391], "littl": [288, 354, 411, 1023], "lmn": 972, "ln": [500, 501, 502, 503, 847, 1124, 1125, 1126, 1127, 1368, 1389], "ln_a": 1390, "load": [3, 5, 6, 134, 136, 147, 152, 154, 155, 161, 166, 167, 184, 186, 354, 847, 859, 966, 1399], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 155, "load_tabl": 155, "load_workbook": 155, "loader": [316, 354], "lobster": [705, 1296], "loc": [354, 358], "local": [4, 40, 152, 154, 166, 167, 170, 354, 492, 637, 638, 847, 1040, 1044, 1074, 1075, 1100, 1103, 1113, 1235, 1236, 1368, 1378], "localhost": 152, "localis": [479, 492, 1113], "locat": [41, 162, 165, 168, 170, 211, 231, 284, 314, 320, 354, 678, 847, 930, 966, 1130, 1139, 1266, 1267, 1368], "lock": 187, "log": [30, 59, 424, 497, 590, 616, 640, 753, 847, 1036, 1119, 1353, 1368, 1389], "log10": [847, 1368, 1389], "log10_a": 1390, "log16_a": 1390, "log1p": [847, 1368, 1389], "log1p_a": 1390, "log2": 1389, "logarithm": [588, 589, 590, 847, 1213, 1214, 1215, 1368, 1390], "logic": [65, 262, 340, 354, 357, 358, 366, 368, 446, 594, 751, 762, 763, 764, 765, 809, 837, 847, 875, 880, 892, 910, 918, 949, 966, 979, 980, 1218, 1348, 1350, 1368, 1373], "london": [456, 460, 478, 1073, 1077, 1099], "london_timezon": [478, 1099], "london_to_amsterdam": [478, 1099], "long": [230, 269, 278, 321, 322, 354, 411, 881, 903, 931, 966, 1023], "longer": [150, 151, 165], "longest": 585, "look": [11, 243, 354, 407, 585, 888, 966, 1019], "lookup": 843, "loop": [152, 594, 847], "lose": [453, 1070], "lossi": [150, 151, 165], "lossless": 55, "lot": 54, "love": [694, 718, 1285, 1309], "low": [18, 152, 433, 642, 847, 1239, 1368], "low_memori": [150, 151, 160, 162, 165, 169, 170], "lower": [55, 165, 221, 243, 280, 346, 354, 433, 531, 591, 619, 643, 647, 666, 667, 767, 786, 787, 789, 790, 805, 806, 820, 834, 835, 847, 874, 888, 909, 955, 966, 1050, 1063, 1153, 1216, 1240, 1243, 1258, 1356, 1368, 1386, 1389], "lower_bound": [243, 354, 433, 531, 847, 888, 966, 1050, 1153, 1356, 1368], "lowercas": [625, 736, 738, 1327, 1329, 1391], "lowest": [591, 847], "lru_cach": [262, 354, 594, 847, 1218, 1368], "lst": 180, "lt": [173, 510, 760, 847, 1368], "ltrim": 1389, "lyric": [694, 718, 1285, 1309], "lz4": [43, 44, 47, 49, 51, 354, 966], "lzo": [47, 51, 354, 966], "m": [72, 74, 257, 354, 452, 453, 455, 460, 461, 481, 483, 484, 495, 701, 730, 732, 733, 737, 788, 789, 790, 791, 797, 805, 892, 966, 972, 1069, 1070, 1072, 1077, 1078, 1102, 1104, 1105, 1116, 1292, 1321, 1323, 1324, 1328, 1381, 1391, 1392], "m_2": [686, 847, 1278, 1368], "m_3": [686, 847, 1278, 1368], "m_i": [686, 847, 1278, 1368], "machin": 1399, "maco": 173, "made": [41, 152, 354, 484, 1105], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 65, 73, 79, 130, 131, 132, 133, 134, 135, 137, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 176, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 205, 221, 222, 229, 231, 243, 257, 258, 259, 262, 263, 286, 294, 301, 311, 313, 316, 323, 324, 354, 357, 358, 428, 443, 444, 446, 451, 452, 453, 463, 465, 474, 479, 481, 492, 504, 525, 560, 585, 593, 594, 605, 608, 642, 655, 656, 657, 659, 661, 663, 665, 667, 668, 670, 672, 674, 704, 706, 709, 711, 717, 772, 774, 781, 782, 786, 787, 789, 790, 795, 805, 806, 821, 834, 835, 847, 862, 869, 870, 874, 875, 880, 888, 892, 893, 894, 898, 899, 908, 914, 918, 924, 932, 938, 939, 940, 949, 966, 1041, 1044, 1045, 1061, 1062, 1063, 1068, 1069, 1070, 1080, 1082, 1095, 1100, 1102, 1113, 1123, 1130, 1148, 1185, 1218, 1239, 1252, 1253, 1256, 1258, 1259, 1295, 1297, 1300, 1302, 1346, 1349, 1351, 1368, 1373, 1399], "main": [173, 870, 966], "maintain": [48, 49, 50, 51, 300, 354, 404, 586, 678, 689, 755, 770, 847, 874, 923, 966, 1016, 1211, 1267, 1354, 1368], "maintain_ord": [48, 49, 50, 51, 242, 257, 276, 278, 300, 319, 323, 324, 334, 336, 338, 341, 342, 343, 344, 345, 346, 347, 354, 364, 404, 414, 419, 422, 424, 517, 520, 586, 594, 689, 753, 755, 770, 847, 870, 880, 887, 892, 908, 921, 923, 929, 932, 943, 945, 947, 950, 951, 952, 953, 954, 955, 956, 966, 1016, 1211, 1354, 1368], "maintainorderjoin": [257, 323, 354, 892, 932, 966], "major": [155, 311, 354], "make": [41, 65, 88, 131, 132, 136, 147, 150, 151, 154, 155, 156, 158, 162, 166, 270, 274, 281, 312, 324, 354, 357, 502, 503, 625, 626, 635, 648, 722, 847, 904, 966, 1126, 1127, 1245, 1313, 1348, 1368], "man": [719, 1310], "manag": [56, 97, 98, 202, 858, 859, 1383, 1396], "managed_shallow_clon": 202, "mandatori": [41, 354], "mango": [426, 430, 698, 724, 1038, 1043, 1289, 1315], "mani": [152, 153, 170, 231, 257, 354, 704, 706, 718, 892, 966, 1130, 1295, 1309, 1368, 1372], "manner": 152, "map": [51, 52, 54, 88, 133, 134, 141, 150, 151, 152, 153, 156, 157, 162, 164, 165, 168, 181, 214, 217, 235, 255, 262, 263, 283, 287, 288, 289, 291, 307, 354, 365, 479, 492, 593, 594, 618, 620, 621, 623, 625, 626, 649, 650, 718, 758, 808, 847, 866, 899, 912, 915, 966, 971, 972, 1063, 1100, 1113, 1218, 1246, 1247, 1309, 1357, 1368, 1378, 1380, 1381, 1396], "map_": 117, "map_batch": [847, 966], "map_el": [108, 262, 354, 593, 761, 847, 1368], "map_field": [622, 624], "map_row": 354, "mapelementsstrategi": [594, 847], "mapping_strategi": [635, 847], "march": [481, 1102], "mariadb": 153, "mark": [41, 146, 354, 425, 847, 1037, 1368], "mark_area": [1368, 1373], "mark_attr": [354, 357, 1368, 1373], "mark_bar": [354, 357, 1368, 1373], "mark_lin": [354, 357], "mark_point": [354, 357], "markdown": [7, 21, 205], "marker": [41, 354], "mask": [170, 181, 185, 250, 252, 354, 408, 532, 534, 537, 542, 637, 638, 693, 696, 705, 847, 1020, 1134, 1153, 1154, 1157, 1160, 1166, 1235, 1236, 1268, 1284, 1287, 1296, 1359, 1368], "mass": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "massag": [269, 321, 354, 903, 931, 966], "match": [40, 41, 55, 65, 72, 96, 119, 131, 133, 134, 135, 137, 145, 150, 152, 159, 160, 162, 165, 169, 170, 174, 175, 176, 177, 211, 214, 233, 234, 257, 258, 263, 282, 287, 323, 354, 426, 430, 601, 602, 603, 649, 650, 668, 693, 694, 695, 698, 701, 702, 704, 705, 706, 709, 710, 716, 717, 718, 724, 730, 732, 733, 837, 843, 847, 866, 883, 892, 893, 899, 911, 932, 966, 972, 1038, 1043, 1122, 1246, 1247, 1259, 1284, 1285, 1286, 1289, 1292, 1293, 1295, 1296, 1297, 1300, 1301, 1307, 1308, 1309, 1315, 1321, 1323, 1324, 1368, 1391], "match_to_schema": [354, 966], "matches_overlap": [704, 706, 1297], "matches_supertyp": [233, 354, 883, 966], "materi": [145, 150, 156, 160, 162, 262, 289, 340, 354, 869, 908, 949, 959, 966, 972, 1218, 1368], "materialis": [255, 256, 287, 288, 354], "materialized_view": 202, "math": [1, 11, 61, 278, 354, 445, 847, 1052, 1054, 1276, 1340, 1368, 1389, 1393, 1395], "mathemat": [754, 792, 847, 1389], "mathshortcut": [1, 61], "matplotlib": [173, 609, 908, 921, 966], "matter": [243, 255, 286, 288, 289, 308, 354, 655, 726, 727, 847, 888, 914, 966], "max": [10, 26, 41, 47, 51, 146, 221, 233, 242, 265, 278, 286, 354, 358, 439, 509, 585, 593, 635, 645, 649, 650, 655, 658, 659, 679, 723, 774, 786, 789, 811, 827, 847, 874, 883, 887, 914, 966, 1057, 1063, 1133, 1210, 1241, 1254, 1269, 1314, 1368, 1377, 1386, 1389], "max_a": [286, 354, 655, 847, 914, 966], "max_binary_s": 152, "max_col": [179, 181], "max_colname_length": [241, 354], "max_color": [41, 354], "max_data_s": 185, "max_elem": 1386, "max_horizont": [354, 810], "max_items_per_column": [241, 354], "max_level": 146, "max_siz": [53, 180, 181, 183, 185, 1399], "max_text_s": 152, "max_valu": 1399, "max_width": [585, 1210], "maxim": [341, 377, 847, 950, 989, 1368], "maximum": [11, 27, 38, 47, 48, 51, 53, 73, 134, 137, 150, 151, 152, 155, 159, 160, 161, 165, 169, 171, 179, 180, 181, 183, 185, 241, 243, 264, 265, 354, 384, 429, 550, 595, 627, 637, 645, 707, 709, 712, 720, 731, 810, 811, 847, 888, 900, 966, 996, 1042, 1083, 1175, 1219, 1227, 1235, 1241, 1298, 1300, 1303, 1311, 1322, 1368, 1385], "mb": [229, 354, 412, 1123, 1368], "md": 141, "md2": 141, "me": [694, 718, 738, 1285, 1309, 1329], "mean": [47, 51, 63, 130, 150, 151, 156, 162, 165, 168, 205, 221, 233, 242, 243, 258, 267, 278, 286, 324, 333, 354, 474, 479, 492, 506, 509, 514, 655, 659, 660, 661, 663, 665, 667, 670, 672, 674, 686, 692, 701, 708, 786, 787, 789, 790, 791, 813, 834, 835, 837, 847, 874, 883, 887, 888, 893, 898, 914, 942, 966, 1063, 1095, 1100, 1113, 1129, 1133, 1255, 1278, 1283, 1292, 1299, 1368, 1385, 1386], "mean_horizont": [354, 812], "measur": [269, 321, 354, 358, 903, 931, 966], "measure_a": [354, 358], "measure_b": [354, 358], "median": [221, 278, 354, 509, 662, 663, 847, 874, 937, 966, 1063, 1256, 1368, 1389], "mediat": 1396, "medium": [41, 354], "megan": [270, 354, 904, 966], "melt": [321, 354, 931, 966], "member": [243, 354, 888, 966, 1158, 1368], "membership": [386, 553, 998, 1178], "memori": [10, 15, 47, 51, 52, 53, 54, 63, 64, 65, 131, 132, 135, 136, 137, 150, 151, 152, 154, 155, 156, 160, 162, 165, 166, 168, 169, 170, 209, 231, 262, 288, 289, 298, 312, 340, 354, 635, 646, 681, 847, 869, 870, 880, 908, 921, 941, 966, 1130, 1218, 1242, 1272, 1273, 1348, 1368], "memory_map": [156, 162, 168], "memory_resourc": 941, "merg": [40, 257, 258, 270, 354, 892, 893, 904, 966], "merge_sort": [354, 966], "messi": [701, 703, 1292, 1294], "met": 837, "meta": [99, 446, 699, 847, 1290], "metadata": [0, 47, 48, 49, 50, 51, 141, 163, 167, 191, 195, 354, 859, 966], "metastor": 196, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 52, 53, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 129, 132, 141, 142, 143, 144, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171, 178, 181, 185, 190, 196, 197, 199, 200, 205, 207, 212, 217, 221, 222, 225, 226, 231, 238, 242, 249, 255, 262, 269, 274, 280, 287, 288, 289, 297, 319, 328, 330, 335, 340, 346, 354, 363, 366, 367, 398, 433, 446, 458, 481, 484, 498, 499, 507, 514, 516, 519, 521, 529, 545, 578, 592, 594, 612, 614, 616, 618, 619, 621, 623, 625, 626, 629, 630, 631, 634, 640, 643, 645, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 680, 694, 700, 704, 706, 718, 726, 727, 728, 729, 734, 740, 746, 754, 756, 760, 761, 777, 809, 820, 839, 840, 842, 843, 847, 848, 849, 852, 853, 854, 855, 856, 859, 862, 870, 874, 875, 877, 878, 891, 903, 909, 920, 929, 935, 938, 940, 941, 944, 949, 955, 966, 971, 974, 981, 1010, 1050, 1063, 1084, 1085, 1102, 1105, 1120, 1121, 1130, 1131, 1141, 1143, 1145, 1151, 1170, 1203, 1217, 1218, 1229, 1230, 1240, 1241, 1258, 1271, 1285, 1291, 1295, 1297, 1309, 1325, 1331, 1350, 1360, 1362, 1364, 1368, 1369, 1372, 1374, 1375, 1376, 1378, 1382], "metric": [52, 53, 54, 152], "micro": [480, 1101], "microsecond": [72, 74, 243, 255, 258, 286, 288, 289, 308, 324, 354, 474, 477, 479, 484, 487, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 788, 789, 790, 791, 833, 834, 835, 847, 888, 893, 908, 914, 966, 972, 1095, 1098, 1100, 1108, 1113, 1125, 1368, 1392], "microsoft": [34, 41, 354], "mid_color": [41, 354], "midnight": 89, "midpoint": [221, 280, 346, 354, 643, 666, 667, 820, 847, 874, 909, 955, 966, 1063, 1240, 1258, 1368], "might": [52, 53, 54, 150, 151, 165, 187, 257, 278, 312, 321, 354, 594, 756, 847, 892, 923, 931, 966], "millennia": 1392, "millennium": 1392, "milli": [480, 1101], "millisecond": [243, 258, 286, 324, 354, 462, 469, 474, 479, 488, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 789, 790, 791, 805, 834, 835, 847, 888, 893, 914, 966, 972, 1095, 1100, 1109, 1113, 1125, 1368, 1392], "milliseconds_diff": [487, 488, 490], "mimic": 775, "min": [41, 47, 51, 147, 221, 233, 272, 278, 286, 354, 440, 509, 594, 635, 645, 655, 664, 665, 786, 789, 816, 825, 847, 874, 883, 914, 966, 1058, 1063, 1133, 1241, 1257, 1368, 1386, 1389, 1392, 1399], "min_a": [286, 354, 655, 847, 914, 966], "min_col": [179, 181], "min_color": [41, 354], "min_elem": 1386, "min_horizont": [354, 815, 825], "min_period": [443, 500, 502, 503, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 823, 824, 847, 1061, 1124, 1126, 1127, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1368], "min_sampl": [443, 500, 502, 503, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 823, 824, 847, 1061, 1124, 1126, 1127, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1368], "min_siz": [180, 181, 183, 185, 1399], "min_valu": 1399, "mincol": 179, "minim": [344, 378, 385, 551, 681, 689, 847, 953, 990, 997, 1176, 1222, 1272, 1368], "minimum": [47, 51, 179, 180, 181, 183, 185, 236, 271, 272, 354, 500, 502, 503, 613, 628, 638, 645, 815, 816, 847, 905, 966, 1089, 1124, 1126, 1127, 1228, 1236, 1241, 1368, 1385, 1399], "minu": [474, 631, 847, 1095], "minut": [243, 258, 286, 324, 354, 462, 466, 468, 473, 474, 477, 479, 480, 489, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 788, 789, 790, 791, 833, 834, 835, 847, 888, 893, 914, 966, 972, 1095, 1098, 1100, 1110, 1113, 1125, 1368, 1392], "minutes_diff": 489, "misc": 1383, "miscellan": 859, "mismatch": [65, 122, 160, 169, 174, 176], "miss": [55, 65, 150, 151, 165, 238, 263, 354, 406, 500, 502, 503, 515, 538, 539, 585, 847, 899, 966, 1018, 1124, 1126, 1127, 1138, 1368], "missing_column": [263, 354, 899, 966], "missing_struct_field": [55, 263, 354, 899, 966], "missing_utf8_is_empty_str": [150, 151, 165], "mix": [12, 258, 312, 354, 774, 826, 893, 924, 966, 972, 1063, 1368], "mixin": 1, "mkdir": [48, 49, 50, 51, 52, 54, 966], "mlnm": 467, "mm": [41, 354], "mn": 1391, "mno": [17, 21], "mnop": 1391, "mo": 791, "mocha": 972, "mod": [847, 1389], "mode": [39, 40, 41, 42, 48, 49, 50, 51, 174, 176, 278, 301, 354, 675, 702, 819, 822, 838, 847, 869, 880, 908, 921, 966, 1263, 1293, 1368, 1377, 1378, 1396], "model": [316, 354], "modifi": [52, 53, 54, 150, 151, 165, 187, 205, 211, 231, 247, 254, 255, 326, 354, 380, 478, 495, 693, 701, 702, 705, 716, 717, 736, 738, 739, 847, 981, 1099, 1116, 1130, 1284, 1292, 1293, 1296, 1307, 1308, 1327, 1329, 1330, 1368], "modul": [101, 109, 155, 846, 970, 972, 1399], "modulu": [614, 847], "moment": [47, 48, 49, 50, 51, 63, 64, 219, 354, 543, 686, 847, 869, 870, 880, 908, 921, 966, 1168, 1278, 1368], "mon": [354, 357, 1392], "mondai": [243, 354, 451, 463, 492, 494, 772, 888, 966, 1068, 1080, 1113, 1115], "monkei": [714, 715, 1305, 1306], "month": [243, 258, 286, 324, 354, 459, 471, 472, 474, 477, 479, 481, 484, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 785, 786, 787, 788, 789, 790, 791, 834, 835, 847, 888, 893, 914, 966, 1076, 1092, 1093, 1095, 1098, 1100, 1102, 1105, 1113, 1125, 1368, 1392], "month_nam": [481, 484], "monthbegin": [472, 1093], "monthend": [471, 1092], "moos": 972, "more": [21, 41, 47, 51, 57, 65, 97, 98, 127, 131, 132, 133, 134, 135, 136, 137, 145, 147, 152, 153, 154, 155, 159, 160, 161, 162, 166, 167, 169, 174, 176, 181, 205, 207, 219, 221, 225, 226, 234, 254, 255, 262, 269, 274, 282, 287, 288, 290, 301, 311, 312, 316, 319, 321, 340, 354, 358, 367, 404, 428, 510, 514, 522, 543, 573, 586, 590, 593, 594, 634, 635, 677, 686, 702, 711, 730, 732, 733, 755, 766, 778, 794, 800, 803, 812, 814, 817, 818, 827, 837, 843, 847, 874, 877, 878, 884, 903, 910, 911, 924, 929, 931, 941, 966, 970, 972, 974, 1016, 1041, 1044, 1063, 1144, 1145, 1168, 1198, 1211, 1218, 1265, 1278, 1293, 1302, 1321, 1323, 1324, 1346, 1348, 1354, 1368, 1383, 1384, 1394, 1397, 1398, 1399], "more_bi": [276, 300, 354, 689, 847, 923, 966], "more_column": [230, 320, 354, 504, 793, 847, 881, 930, 966, 972], "more_expr": [635, 770, 773, 774, 775, 776, 847], "more_nam": [741, 843], "most": [41, 131, 150, 151, 153, 165, 174, 175, 176, 177, 312, 354, 417, 418, 606, 615, 636, 650, 723, 847, 1029, 1030, 1223, 1234, 1247, 1314, 1348, 1368, 1380, 1396], "mostli": [306, 354, 510, 847], "move": [278, 289, 354, 451, 500, 501, 502, 503, 658, 660, 664, 671, 837, 847, 1068, 1124, 1125, 1126, 1127, 1254, 1255, 1257, 1261, 1368], "mr": 941, "mssql": [39, 354], "much": [262, 322, 340, 354, 428, 429, 443, 560, 594, 711, 712, 809, 847, 949, 1041, 1042, 1061, 1185, 1218, 1302, 1303, 1368], "mul": 847, "multi": [8, 41, 150, 151, 316, 354, 504, 701, 847, 1292], "multi_fram": [41, 354], "multicolselector": 210, "multiindexselector": [210, 976], "multipl": [41, 54, 63, 64, 65, 114, 130, 150, 151, 155, 156, 160, 161, 162, 165, 168, 169, 170, 179, 181, 185, 211, 223, 229, 231, 234, 242, 243, 247, 256, 259, 276, 278, 282, 289, 292, 300, 323, 328, 333, 354, 424, 560, 593, 599, 606, 615, 616, 635, 649, 651, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 689, 741, 753, 770, 778, 795, 808, 810, 815, 821, 827, 830, 837, 843, 847, 859, 869, 870, 876, 880, 884, 887, 888, 894, 908, 911, 916, 921, 923, 932, 935, 942, 949, 966, 981, 1011, 1123, 1130, 1185, 1205, 1223, 1246, 1248, 1280, 1368, 1381, 1386], "multipli": [593, 657, 658, 660, 662, 664, 666, 669, 671, 673, 745, 847, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1368], "multithread": [300, 354, 689, 770, 847, 923, 966, 1011, 1205, 1280, 1368], "must": [34, 41, 75, 96, 133, 145, 147, 150, 154, 162, 165, 166, 167, 170, 171, 211, 221, 230, 243, 258, 259, 270, 278, 286, 287, 354, 444, 585, 594, 609, 642, 649, 650, 655, 718, 774, 786, 787, 795, 806, 837, 847, 874, 881, 888, 893, 894, 898, 904, 914, 921, 941, 966, 1062, 1063, 1239, 1246, 1247, 1309, 1368], "mutual": [287, 354], "my": [167, 171, 354, 357, 1368, 1373], "my_bucket": [910, 966], "my_column": 949, "my_column_": [318, 354], "my_column_0": [318, 354], "my_column_1": [318, 354], "my_column_2": [318, 354], "my_custom_aggreg": 809, "my_fil": 156, "my_holidai": [451, 463, 772, 1068, 1080], "my_larger_than_ram_fil": [48, 49, 50, 51, 966], "my_long_fil": 165, "my_struct": 829, "mydf": 165, "myrol": 153, "mysql": 153, "n": [1, 13, 14, 18, 26, 27, 38, 46, 48, 58, 59, 60, 61, 72, 74, 140, 145, 150, 151, 155, 160, 165, 181, 215, 231, 237, 243, 245, 255, 256, 261, 262, 288, 289, 290, 297, 302, 305, 308, 310, 325, 337, 339, 348, 354, 370, 398, 403, 412, 414, 419, 422, 423, 424, 428, 429, 443, 447, 451, 453, 455, 461, 483, 495, 501, 507, 510, 518, 524, 547, 555, 561, 563, 573, 574, 578, 581, 583, 585, 587, 636, 639, 648, 669, 670, 673, 674, 677, 680, 686, 691, 707, 711, 712, 716, 717, 722, 723, 725, 726, 731, 733, 748, 752, 753, 754, 759, 761, 779, 788, 789, 790, 791, 797, 799, 819, 822, 823, 824, 825, 828, 832, 836, 838, 847, 867, 886, 888, 889, 897, 920, 925, 927, 933, 946, 948, 957, 966, 972, 1010, 1015, 1024, 1035, 1036, 1041, 1042, 1049, 1061, 1064, 1068, 1070, 1072, 1078, 1104, 1116, 1125, 1130, 1131, 1140, 1147, 1172, 1180, 1186, 1188, 1198, 1199, 1203, 1208, 1210, 1234, 1260, 1262, 1265, 1271, 1278, 1282, 1298, 1302, 1303, 1307, 1308, 1313, 1314, 1322, 1324, 1339, 1345, 1352, 1353, 1357, 1358, 1368, 1380, 1381, 1388, 1391, 1392, 1394, 1396, 1399], "n0": [403, 585], "n00": [1015, 1210], "n01": [1015, 1210], "n02": [1015, 1210], "n1": [403, 585], "n2": [1, 403], "n3": 1, "n_1": [510, 847], "n_2": [510, 847], "n_3": [510, 847], "n_bar": 1385, "n_bit": 1391, "n_byte": [412, 428, 429, 711, 712, 1391], "n_char": [428, 429, 711, 712, 1391], "n_chunk": [354, 981, 1130, 1242, 1368], "n_column": 211, "n_elem": 1386, "n_even": 972, "n_field_strategi": [585, 1210], "n_film": 1377, "n_foo_uniqu": 1385, "n_kilobyt": 412, "n_row": [145, 148, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 211, 256, 354, 966], "n_thread": [150, 151], "n_uniqu": [354, 370, 847, 1368], "na": [313, 354, 724, 1349, 1368], "naiv": [455, 456, 733, 1072, 1073, 1324], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 48, 58, 59, 60, 61, 76, 88, 106, 131, 133, 134, 135, 136, 137, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 176, 177, 178, 179, 181, 184, 185, 186, 191, 193, 194, 195, 196, 197, 199, 200, 211, 213, 214, 217, 218, 223, 224, 225, 226, 230, 234, 235, 238, 239, 241, 242, 253, 254, 255, 257, 258, 259, 262, 265, 267, 269, 270, 272, 276, 278, 282, 283, 287, 288, 289, 291, 292, 293, 300, 301, 304, 307, 309, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 339, 354, 358, 365, 403, 407, 408, 410, 413, 424, 433, 444, 481, 484, 504, 510, 531, 538, 539, 540, 541, 585, 594, 599, 603, 605, 607, 611, 635, 642, 652, 675, 689, 702, 703, 716, 717, 718, 741, 743, 745, 753, 758, 762, 763, 764, 765, 766, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 793, 794, 799, 800, 803, 810, 811, 812, 813, 814, 815, 816, 817, 820, 823, 824, 825, 826, 828, 829, 830, 831, 832, 836, 837, 843, 847, 864, 866, 871, 872, 876, 877, 878, 881, 884, 887, 892, 893, 894, 903, 904, 911, 912, 915, 916, 917, 923, 924, 928, 929, 930, 931, 932, 935, 936, 937, 938, 939, 942, 948, 966, 971, 972, 978, 1015, 1036, 1049, 1062, 1102, 1105, 1122, 1210, 1239, 1244, 1292, 1293, 1294, 1307, 1308, 1332, 1335, 1343, 1344, 1349, 1353, 1357, 1368, 1373, 1378, 1379, 1380, 1381, 1382, 1383, 1395, 1396, 1399], "name_gener": [318, 354], "named_agg": [333, 942], "named_bi": [242, 354, 887, 966], "named_expr": [292, 293, 328, 329, 354, 745, 825, 829, 916, 917, 935, 936, 966], "named_fram": [1381, 1396], "nameless": 136, "namespac": [1, 152, 191, 193, 194, 195, 199, 353, 354, 357, 741, 826, 846, 859, 964, 965, 970, 1368, 1373, 1399], "namespaceinfo": [193, 203], "nan": [136, 181, 209, 225, 226, 232, 233, 312, 313, 354, 449, 450, 498, 499, 508, 509, 519, 521, 529, 538, 539, 540, 541, 545, 592, 595, 613, 627, 628, 629, 630, 657, 683, 754, 777, 847, 877, 878, 882, 883, 966, 984, 988, 1066, 1067, 1132, 1133, 1161, 1162, 1227, 1228, 1253, 1275, 1348, 1349, 1368, 1399], "nan_as_nul": 209, "nan_max": [847, 1368], "nan_min": [847, 1368], "nan_to_nul": [136, 354, 966, 1368], "nana": 1391, "nanmax": [627, 628, 847, 1227, 1228, 1368], "nanosecond": [55, 89, 243, 258, 286, 324, 354, 474, 479, 480, 490, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 789, 790, 791, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1101, 1111, 1113, 1125, 1368, 1392], "nansum": [657, 847, 1253, 1368], "nativ": [11, 39, 150, 152, 155, 156, 158, 162, 167, 201, 255, 262, 288, 289, 308, 312, 340, 354, 594, 809, 826, 847, 853, 924, 949, 966, 970, 1218, 1348, 1368, 1372, 1396, 1399], "natur": [590, 847, 1215, 1368, 1384, 1390], "ndarrai": [135, 207, 234, 282, 312, 354, 517, 678, 847, 884, 911, 966, 974, 1139, 1266, 1267, 1348, 1368], "ndjson": [50, 160, 966], "ne": [630, 847, 1230, 1368], "ne_miss": [234, 282, 354, 847, 884, 911, 966, 1121, 1368], "nearest": [59, 221, 258, 280, 346, 354, 432, 513, 529, 643, 666, 667, 675, 820, 847, 874, 893, 909, 955, 966, 1047, 1063, 1137, 1151, 1240, 1258, 1368, 1390], "nearest_pow2": 59, "necessari": [38, 39, 48, 56, 98, 155, 167, 312, 354, 966, 1348, 1368], "need": [52, 53, 54, 65, 100, 109, 138, 150, 151, 153, 162, 165, 168, 170, 205, 243, 286, 289, 298, 354, 357, 585, 655, 681, 716, 717, 718, 734, 791, 819, 822, 838, 847, 888, 914, 966, 1272, 1307, 1308, 1309, 1325, 1368, 1373, 1399], "neg": [14, 71, 72, 73, 74, 150, 151, 156, 158, 162, 172, 245, 261, 286, 297, 299, 305, 331, 354, 398, 578, 579, 639, 640, 655, 680, 687, 707, 720, 731, 847, 862, 914, 920, 922, 938, 939, 966, 972, 1010, 1147, 1172, 1203, 1204, 1237, 1271, 1279, 1298, 1311, 1322, 1339, 1368], "negat": [632, 847, 1232, 1368], "neither": [138, 155, 161, 290, 354, 403, 585, 1015, 1210], "nest": [56, 138, 146, 182, 183, 229, 354, 859, 1123, 1368, 1396, 1399], "nesting_level": 182, "net": [702, 1293], "netherland": [258, 354, 893, 966], "netsuite_format": 198, "never": [38, 48, 152, 257, 258, 287, 354, 892, 893, 966], "new": [39, 40, 41, 42, 53, 54, 165, 205, 210, 211, 237, 247, 248, 262, 274, 275, 278, 283, 318, 320, 322, 323, 328, 329, 354, 365, 455, 506, 516, 518, 529, 619, 620, 635, 649, 650, 654, 713, 716, 717, 722, 723, 741, 743, 843, 847, 859, 862, 886, 912, 930, 932, 935, 936, 949, 966, 976, 978, 1072, 1129, 1140, 1231, 1244, 1246, 1247, 1251, 1307, 1308, 1313, 1314, 1332, 1335, 1344, 1368, 1396, 1398], "new_column": [150, 151, 155, 165], "new_dai": 477, "new_dat": 474, "new_df": [323, 354, 932, 966], "new_fil": [36, 38, 43, 44, 47, 354], "new_from_index": 1368, "new_id": [318, 354], "new_lf": [932, 966], "new_tabl": 1398, "new_valu": [781, 782, 795, 821], "new_york": 789, "newli": 57, "newlin": [46, 150, 160, 165, 169, 354], "next": [19, 59, 243, 258, 286, 324, 354, 406, 451, 474, 479, 492, 645, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1018, 1068, 1095, 1100, 1113, 1241, 1368], "next_batch": 151, "next_pow2": 59, "nfc": [713, 1304, 1391], "nfd": [713, 1304, 1391], "nfkc": [713, 1304, 1391], "nfkd": [713, 1304, 1391], "nfruit": 731, "nl": [451, 463, 772, 1068, 1080], "nnel_id": 138, "no1": 972, "no_default": [238, 354, 649, 650, 718, 847, 1246, 1247, 1309, 1368], "no_optim": [63, 869, 898, 908, 966], "nodataerror": [150, 151, 155, 161, 165], "nodd": [701, 1292], "node": [865, 869, 890, 898, 903, 908, 912, 966], "nodefault": [238, 354, 649, 650, 718, 847, 1246, 1247, 1309, 1368], "non": [4, 5, 38, 40, 41, 48, 57, 72, 73, 136, 147, 172, 213, 220, 256, 269, 286, 292, 293, 297, 317, 318, 321, 323, 328, 329, 354, 406, 423, 424, 428, 433, 437, 438, 451, 478, 515, 531, 585, 593, 594, 600, 635, 636, 645, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 695, 702, 711, 716, 717, 718, 738, 740, 745, 752, 753, 758, 763, 765, 773, 774, 775, 776, 778, 780, 784, 791, 811, 813, 816, 823, 824, 825, 829, 831, 847, 864, 873, 903, 914, 916, 917, 920, 928, 931, 932, 935, 936, 966, 972, 1018, 1035, 1036, 1041, 1050, 1055, 1056, 1063, 1068, 1099, 1138, 1153, 1210, 1218, 1234, 1246, 1247, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1271, 1286, 1293, 1302, 1307, 1308, 1329, 1331, 1348, 1352, 1353, 1357, 1368, 1388, 1396], "non_exist": [478, 1099], "non_numer": [38, 48, 354, 966], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 66, 69, 72, 73, 74, 75, 76, 84, 88, 98, 131, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 195, 196, 197, 199, 200, 201, 205, 207, 208, 211, 215, 220, 221, 225, 226, 232, 233, 234, 236, 238, 241, 243, 244, 249, 253, 257, 258, 260, 262, 266, 269, 274, 275, 278, 282, 286, 287, 290, 294, 297, 299, 300, 306, 307, 309, 311, 312, 313, 316, 318, 319, 320, 321, 322, 323, 324, 335, 339, 354, 366, 368, 369, 381, 382, 383, 390, 391, 403, 406, 426, 428, 429, 430, 433, 437, 438, 439, 442, 444, 449, 450, 458, 474, 477, 478, 484, 499, 500, 501, 502, 503, 504, 507, 508, 509, 515, 522, 523, 525, 527, 529, 530, 531, 538, 539, 540, 541, 546, 548, 549, 556, 562, 564, 566, 573, 574, 575, 576, 577, 579, 585, 593, 594, 605, 606, 608, 609, 610, 612, 617, 630, 631, 632, 633, 635, 636, 642, 645, 646, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 680, 681, 682, 683, 687, 688, 692, 693, 695, 697, 698, 699, 702, 705, 707, 708, 709, 710, 711, 712, 714, 715, 720, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 735, 737, 740, 741, 742, 743, 744, 751, 758, 763, 764, 765, 767, 773, 774, 775, 776, 777, 778, 780, 784, 786, 787, 788, 789, 790, 791, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 816, 822, 823, 824, 829, 831, 833, 834, 835, 837, 847, 867, 868, 870, 873, 874, 877, 878, 880, 882, 883, 884, 888, 891, 892, 893, 896, 898, 903, 906, 910, 911, 914, 918, 920, 921, 922, 923, 929, 930, 931, 932, 937, 940, 941, 944, 948, 949, 958, 959, 966, 971, 972, 974, 975, 979, 980, 982, 989, 990, 994, 995, 1002, 1003, 1015, 1018, 1026, 1031, 1034, 1038, 1041, 1042, 1043, 1049, 1050, 1055, 1056, 1062, 1063, 1065, 1066, 1067, 1075, 1083, 1084, 1085, 1089, 1098, 1099, 1105, 1119, 1121, 1124, 1125, 1126, 1127, 1131, 1132, 1133, 1135, 1138, 1144, 1146, 1148, 1150, 1151, 1152, 1153, 1158, 1163, 1164, 1167, 1168, 1169, 1171, 1173, 1174, 1177, 1181, 1187, 1189, 1191, 1198, 1199, 1200, 1201, 1202, 1204, 1210, 1218, 1219, 1220, 1221, 1222, 1230, 1233, 1239, 1240, 1241, 1246, 1247, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1266, 1267, 1268, 1271, 1274, 1275, 1278, 1279, 1282, 1283, 1284, 1286, 1288, 1289, 1290, 1293, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1305, 1306, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1321, 1322, 1323, 1324, 1326, 1328, 1331, 1334, 1342, 1344, 1345, 1346, 1348, 1349, 1350, 1357, 1358, 1368, 1377, 1379, 1380, 1381, 1383, 1386, 1388, 1391, 1392, 1396], "nonexist": [478, 1099], "nor": [155, 161, 290, 354], "normal": [40, 146, 243, 354, 497, 543, 656, 686, 758, 847, 888, 966, 1119, 1168, 1252, 1278, 1357, 1368, 1389], "normalised_scor": 152, "norowsreturnederror": [287, 354], "north": 75, "not_": [328, 354, 837, 847, 935, 966, 972, 1368], "not_c": [328, 354, 935, 966], "notabl": 152, "notat": [12, 41, 354], "note": [4, 11, 21, 40, 41, 47, 52, 53, 54, 56, 57, 64, 65, 71, 72, 74, 89, 97, 98, 131, 132, 133, 135, 137, 138, 146, 150, 152, 153, 154, 155, 159, 160, 161, 165, 166, 167, 169, 171, 174, 176, 179, 181, 185, 187, 205, 209, 217, 219, 221, 222, 225, 226, 229, 232, 233, 234, 243, 244, 253, 254, 255, 257, 258, 262, 270, 274, 277, 278, 282, 283, 286, 287, 288, 289, 294, 297, 301, 308, 311, 313, 316, 318, 319, 321, 323, 324, 328, 330, 331, 354, 398, 411, 426, 428, 429, 430, 433, 441, 442, 446, 449, 450, 456, 471, 472, 474, 479, 484, 492, 501, 508, 509, 514, 516, 523, 531, 538, 539, 557, 560, 578, 585, 594, 608, 609, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 649, 650, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 682, 686, 692, 693, 694, 700, 701, 702, 703, 704, 705, 706, 707, 711, 712, 716, 717, 718, 720, 725, 726, 727, 730, 731, 738, 740, 741, 747, 754, 763, 765, 772, 781, 786, 787, 789, 790, 791, 795, 805, 807, 819, 821, 822, 826, 834, 835, 837, 838, 843, 847, 858, 862, 870, 874, 875, 877, 878, 882, 883, 884, 888, 893, 904, 911, 912, 914, 918, 920, 921, 923, 924, 929, 931, 932, 935, 938, 939, 966, 970, 972, 1010, 1023, 1041, 1042, 1050, 1059, 1060, 1063, 1066, 1067, 1073, 1092, 1093, 1095, 1100, 1105, 1113, 1123, 1125, 1132, 1133, 1146, 1153, 1182, 1185, 1203, 1218, 1246, 1247, 1251, 1259, 1266, 1268, 1271, 1273, 1278, 1283, 1284, 1285, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1302, 1303, 1307, 1308, 1309, 1311, 1316, 1317, 1318, 1321, 1322, 1329, 1331, 1338, 1349, 1351, 1368, 1377, 1378, 1382, 1383, 1391, 1394, 1396], "noth": [21, 701, 710, 1292, 1301], "notic": [152, 234, 354, 884, 966, 1368], "notimplementederror": [10, 209], "now": [57, 150, 155, 286, 312, 354, 451, 602, 734, 772, 914, 966, 1068, 1325, 1348, 1368], "np": [96, 135, 207, 211, 234, 282, 312, 354, 517, 593, 678, 847, 884, 911, 966, 974, 1139, 1156, 1159, 1161, 1162, 1266, 1267, 1368], "npt": [207, 974], "nr": [337, 348, 946, 957], "nth": [237, 354, 518, 723, 843, 847, 886, 966, 1140, 1314, 1368], "nthe": [701, 1292], "nthose": [701, 1292], "nu": 698, "null": [17, 38, 40, 47, 48, 51, 57, 65, 72, 133, 134, 137, 146, 150, 151, 160, 162, 165, 169, 170, 171, 178, 181, 185, 209, 213, 214, 215, 220, 221, 225, 226, 228, 232, 233, 234, 236, 249, 257, 263, 266, 267, 268, 275, 278, 280, 282, 297, 300, 302, 303, 304, 307, 312, 313, 317, 320, 323, 325, 328, 335, 354, 366, 368, 369, 379, 382, 383, 386, 390, 391, 398, 399, 406, 408, 411, 423, 424, 425, 426, 428, 429, 430, 433, 437, 438, 439, 442, 447, 449, 450, 474, 477, 478, 485, 486, 487, 488, 489, 490, 491, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 515, 522, 527, 529, 530, 535, 538, 539, 540, 541, 546, 548, 549, 553, 555, 556, 559, 560, 562, 564, 565, 566, 574, 575, 576, 577, 578, 580, 585, 593, 594, 617, 630, 631, 632, 633, 635, 636, 645, 646, 650, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 681, 683, 688, 689, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 712, 714, 715, 720, 722, 723, 724, 730, 731, 733, 735, 740, 741, 742, 743, 744, 751, 752, 753, 762, 763, 764, 765, 770, 773, 774, 775, 776, 778, 780, 784, 788, 793, 804, 807, 811, 813, 816, 823, 824, 829, 831, 837, 847, 864, 867, 873, 874, 877, 878, 882, 883, 884, 891, 892, 899, 906, 911, 920, 923, 928, 930, 932, 935, 937, 944, 966, 972, 979, 980, 991, 994, 995, 998, 1002, 1003, 1010, 1011, 1018, 1020, 1023, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1049, 1050, 1055, 1056, 1064, 1066, 1067, 1098, 1099, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1121, 1122, 1124, 1125, 1126, 1127, 1131, 1132, 1133, 1134, 1138, 1144, 1145, 1150, 1151, 1152, 1158, 1163, 1164, 1165, 1171, 1173, 1174, 1177, 1178, 1180, 1181, 1184, 1185, 1187, 1189, 1190, 1191, 1200, 1202, 1203, 1205, 1210, 1218, 1230, 1233, 1234, 1247, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1271, 1275, 1280, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1305, 1306, 1311, 1313, 1314, 1315, 1321, 1322, 1324, 1326, 1331, 1334, 1345, 1348, 1349, 1350, 1352, 1353, 1368, 1380, 1384, 1386, 1388, 1391, 1392, 1394, 1396, 1397, 1399], "null_behavior": [447, 555, 847, 1064, 1180, 1368], "null_count": [47, 51, 221, 226, 354, 443, 847, 874, 966, 1061, 1063, 1368], "null_equ": [228, 354, 1122, 1368], "null_on_oob": [390, 560, 562, 1002, 1185, 1187], "null_prob": [178, 181, 185], "null_valu": [38, 48, 150, 151, 165, 354, 966], "nullabl": [40, 354], "nullbehavior": [447, 555, 847, 1064, 1180, 1368], "nullif": 1389, "nulls_equ": [257, 354, 386, 535, 553, 847, 892, 966, 998, 1158, 1178, 1368], "nulls_last": [300, 354, 379, 399, 580, 635, 688, 689, 770, 847, 923, 966, 991, 1011, 1165, 1205, 1280, 1368], "num": [14, 41, 315, 354, 531, 847, 1153, 1368], "num_row": 209, "num_sampl": [805, 806], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 48, 49, 50, 51, 56, 57, 71, 72, 73, 89, 98, 119, 131, 133, 134, 135, 137, 140, 146, 150, 151, 152, 153, 155, 159, 160, 161, 162, 165, 168, 169, 170, 172, 179, 181, 184, 186, 187, 188, 195, 211, 213, 215, 220, 229, 230, 233, 241, 245, 246, 255, 256, 261, 273, 274, 286, 290, 297, 302, 305, 317, 322, 325, 327, 335, 337, 339, 348, 354, 380, 396, 398, 403, 406, 415, 416, 417, 418, 420, 421, 423, 424, 429, 437, 443, 444, 447, 451, 454, 462, 465, 467, 469, 470, 480, 493, 494, 496, 500, 501, 502, 503, 507, 509, 515, 524, 538, 539, 546, 547, 555, 563, 566, 571, 573, 578, 581, 583, 585, 587, 635, 639, 642, 645, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 682, 691, 707, 709, 711, 712, 716, 720, 722, 723, 731, 734, 748, 752, 753, 759, 772, 777, 778, 779, 791, 799, 804, 805, 806, 823, 824, 828, 832, 836, 847, 864, 867, 873, 881, 883, 889, 897, 908, 920, 925, 927, 928, 933, 934, 944, 946, 948, 957, 966, 971, 1008, 1010, 1015, 1018, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1042, 1049, 1055, 1061, 1062, 1064, 1068, 1071, 1079, 1082, 1087, 1090, 1091, 1101, 1114, 1115, 1117, 1123, 1124, 1125, 1126, 1127, 1131, 1133, 1138, 1147, 1171, 1172, 1180, 1188, 1191, 1196, 1198, 1203, 1208, 1210, 1224, 1225, 1239, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1271, 1274, 1282, 1298, 1300, 1302, 1303, 1307, 1311, 1313, 1314, 1322, 1325, 1339, 1352, 1353, 1358, 1368, 1384, 1387, 1390, 1399], "number_of_two": [387, 554], "numbers_decim": 734, "numer": [11, 17, 38, 41, 48, 154, 166, 214, 223, 258, 312, 313, 321, 322, 354, 363, 411, 425, 433, 514, 531, 590, 614, 616, 640, 648, 681, 683, 703, 740, 746, 754, 805, 847, 859, 866, 876, 893, 931, 966, 972, 1023, 1037, 1050, 1063, 1153, 1245, 1272, 1275, 1294, 1331, 1348, 1368, 1390, 1399], "numeric_dtyp": 1399, "numericliter": [433, 805, 806, 847, 1050, 1368], "numpi": [96, 104, 135, 173, 207, 211, 219, 255, 288, 289, 308, 312, 313, 354, 593, 627, 628, 657, 847, 966, 974, 1156, 1159, 1161, 1162, 1227, 1228, 1253, 1348, 1349, 1368], "nworld": 725, "o": [156, 168, 412, 423, 424, 443, 700, 752, 753, 847, 1024, 1035, 1036, 1061, 1291, 1316, 1352, 1353, 1368, 1381], "oauth": 167, "obj": 972, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 65, 88, 107, 131, 132, 133, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 179, 181, 182, 208, 209, 211, 217, 222, 229, 242, 243, 258, 260, 276, 286, 289, 294, 301, 311, 312, 313, 354, 446, 608, 786, 787, 789, 790, 807, 826, 834, 835, 847, 859, 869, 875, 880, 888, 893, 896, 908, 914, 921, 924, 963, 966, 972, 975, 1123, 1342, 1368, 1378, 1380, 1383, 1396, 1398], "observ": [257, 354, 444, 500, 501, 502, 503, 642, 847, 892, 966, 1062, 1124, 1125, 1126, 1127, 1239, 1368], "obtain": 585, "obvious": 743, "occur": [41, 63, 105, 114, 120, 259, 354, 387, 554, 615, 645, 847, 869, 880, 894, 908, 921, 966, 999, 1179, 1223, 1241, 1348, 1368], "occurr": [525, 527, 534, 537, 758, 847, 1148, 1150, 1157, 1160, 1357, 1368], "oct": 1391, "octet_length": 1389, "octob": [484, 1105, 1391], "od": [161, 859], "odbc": [39, 152, 354], "odd": 701, "odi": [704, 706, 1297], "off": [63, 64, 150, 151, 165, 257, 258, 354, 451, 463, 772, 869, 870, 880, 892, 893, 898, 908, 921, 966, 1068, 1080], "offer": [277, 354, 639, 847, 907, 966, 1392, 1396], "offic": [41, 354], "offset": [74, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 237, 243, 286, 299, 330, 331, 354, 451, 452, 460, 471, 472, 474, 479, 492, 518, 561, 579, 655, 687, 705, 706, 720, 733, 847, 886, 888, 914, 922, 938, 939, 966, 1068, 1069, 1077, 1092, 1093, 1095, 1100, 1113, 1140, 1186, 1204, 1279, 1296, 1297, 1311, 1324, 1368, 1395], "offset_bi": 791, "often": [153, 205, 243, 286, 354, 387, 554, 648, 655, 847, 888, 914, 966, 999, 1179, 1245, 1368, 1383, 1396], "ok": 585, "old": [40, 283, 354, 649, 650, 847, 912, 966, 1246, 1247, 1368], "old_tabl": 1398, "older": [47, 51, 354, 966], "oldw": 726, "omit": [28, 134, 138, 155, 161, 179, 205, 274, 289, 311, 316, 354, 786, 789, 801, 802, 834, 835, 972, 1397, 1398], "onc": [63, 130, 150, 151, 187, 211, 262, 288, 290, 333, 354, 573, 593, 594, 677, 728, 729, 847, 865, 942, 966, 1198, 1218, 1265, 1319, 1320, 1368, 1381], "one": [21, 38, 39, 41, 48, 57, 65, 111, 131, 133, 134, 135, 136, 137, 150, 151, 155, 159, 160, 161, 165, 169, 184, 186, 205, 214, 222, 225, 226, 233, 241, 242, 243, 255, 257, 259, 260, 269, 278, 286, 287, 288, 294, 297, 312, 315, 321, 334, 354, 364, 398, 444, 446, 509, 510, 514, 517, 520, 522, 578, 585, 590, 608, 618, 619, 621, 623, 625, 626, 635, 654, 655, 680, 688, 701, 702, 703, 718, 741, 773, 777, 779, 786, 789, 809, 827, 837, 843, 847, 866, 875, 877, 878, 883, 884, 887, 888, 892, 894, 903, 910, 914, 918, 920, 931, 937, 943, 966, 981, 1010, 1015, 1062, 1133, 1144, 1145, 1203, 1210, 1215, 1239, 1251, 1271, 1292, 1293, 1294, 1309, 1332, 1348, 1368, 1383, 1384, 1386, 1390, 1391, 1398], "oneormoredatatyp": [41, 179, 354], "ones": [659, 661, 663, 665, 667, 670, 672, 674, 847, 972], "onf": [720, 1311], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 48, 56, 57, 62, 63, 65, 98, 130, 132, 145, 147, 150, 151, 152, 155, 156, 158, 160, 162, 165, 168, 169, 170, 171, 174, 175, 176, 177, 181, 185, 195, 205, 225, 226, 229, 231, 234, 243, 244, 255, 258, 259, 262, 278, 286, 288, 289, 308, 310, 311, 312, 323, 324, 340, 354, 364, 366, 368, 380, 432, 433, 446, 451, 463, 474, 482, 484, 504, 513, 523, 593, 594, 601, 602, 618, 619, 620, 621, 622, 623, 624, 625, 626, 635, 647, 694, 704, 706, 718, 756, 772, 809, 847, 872, 875, 877, 878, 879, 888, 893, 894, 914, 915, 921, 932, 934, 949, 966, 972, 979, 980, 981, 1047, 1050, 1068, 1080, 1095, 1105, 1123, 1130, 1137, 1146, 1218, 1243, 1285, 1295, 1297, 1309, 1342, 1345, 1348, 1368, 1377, 1380, 1396, 1397, 1399], "onlin": [231, 354, 1130, 1368], "ont": [704, 706, 1295, 1297], "onto": 181, "oof": [719, 1310, 1386, 1391], "op": [21, 150, 151, 185, 283, 354, 601, 648, 847, 896, 912, 966, 1245, 1368], "opac": [354, 357, 1368, 1373], "opaqu": 949, "open": [41, 53, 148, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 222, 354, 446, 847, 875, 966], "openoffic": 161, "openpyxl": [155, 173], "oper": [4, 41, 56, 65, 98, 107, 110, 117, 124, 131, 133, 134, 135, 136, 137, 147, 152, 216, 231, 234, 236, 242, 248, 260, 262, 270, 274, 276, 277, 278, 281, 282, 284, 286, 289, 290, 295, 297, 306, 312, 313, 318, 321, 322, 332, 333, 354, 363, 364, 367, 398, 438, 439, 440, 441, 442, 443, 498, 499, 514, 516, 519, 521, 545, 573, 574, 575, 576, 577, 578, 585, 592, 611, 614, 616, 617, 618, 619, 621, 623, 625, 626, 629, 630, 631, 634, 635, 640, 647, 677, 680, 746, 754, 761, 762, 764, 775, 776, 780, 792, 826, 847, 859, 868, 872, 874, 879, 884, 887, 892, 903, 904, 911, 915, 919, 920, 924, 931, 934, 942, 966, 1010, 1051, 1056, 1057, 1058, 1059, 1060, 1061, 1120, 1121, 1130, 1141, 1143, 1170, 1198, 1199, 1200, 1201, 1202, 1203, 1217, 1229, 1230, 1243, 1265, 1271, 1307, 1342, 1347, 1348, 1349, 1368, 1387, 1395, 1396], "operand": [754, 847], "opp": 972, "oppos": 772, "opposit": [297, 354, 398, 578, 680, 847, 920, 966, 1010, 1203, 1271, 1368], "opt": [316, 354], "optim": [48, 49, 50, 51, 63, 64, 130, 150, 156, 160, 162, 165, 167, 168, 169, 170, 255, 260, 277, 281, 288, 319, 354, 865, 869, 870, 880, 898, 908, 921, 929, 938, 939, 940, 949, 966, 1046, 1266, 1368], "optimis": [152, 262, 289, 340, 354, 966, 970, 1218, 1268, 1368, 1399], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 57, 63, 64, 73, 75, 141, 150, 152, 153, 154, 155, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 171, 173, 178, 179, 180, 181, 184, 185, 186, 195, 196, 222, 238, 243, 253, 258, 263, 269, 294, 301, 307, 318, 321, 323, 354, 411, 446, 451, 543, 601, 602, 608, 635, 656, 657, 658, 660, 662, 664, 666, 669, 671, 673, 686, 694, 704, 706, 718, 720, 758, 829, 837, 847, 859, 869, 870, 875, 880, 888, 892, 893, 899, 903, 908, 918, 921, 924, 931, 932, 941, 966, 972, 1023, 1068, 1168, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1278, 1285, 1295, 1297, 1309, 1311, 1344, 1357, 1368, 1386, 1391, 1398], "optional_memb": [535, 847, 1158, 1368], "or_": 847, "oracl": 153, "orang": [218, 335, 336, 338, 339, 341, 342, 344, 346, 347, 354, 424, 753, 847, 944, 945, 947, 948, 950, 951, 953, 955, 956, 1391], "orc": 198, "order": [11, 41, 48, 49, 50, 51, 54, 57, 63, 69, 134, 150, 152, 165, 172, 174, 175, 176, 177, 213, 217, 218, 225, 226, 227, 234, 242, 243, 257, 259, 270, 276, 277, 278, 282, 286, 288, 290, 291, 295, 300, 311, 312, 317, 319, 323, 324, 354, 379, 399, 404, 423, 424, 449, 450, 510, 556, 573, 580, 586, 635, 640, 645, 655, 677, 678, 679, 688, 689, 719, 726, 727, 728, 729, 743, 752, 753, 755, 756, 758, 770, 826, 837, 847, 858, 864, 872, 877, 878, 879, 884, 887, 888, 892, 894, 903, 904, 911, 914, 915, 919, 923, 924, 928, 929, 932, 966, 970, 971, 972, 991, 1011, 1016, 1035, 1036, 1045, 1066, 1067, 1134, 1165, 1181, 1198, 1205, 1211, 1237, 1241, 1249, 1265, 1267, 1269, 1280, 1310, 1335, 1352, 1353, 1354, 1355, 1357, 1368, 1377, 1380, 1386, 1395, 1396, 1399], "order_bi": [635, 847], "ordin": [475, 645, 847, 1096, 1241, 1368, 1397], "ordinal_dai": [459, 494], "org": [21, 43, 44, 132, 152, 153, 156, 158, 207, 208, 209, 219, 354, 609, 713, 921, 966, 974, 975, 1304], "orient": [58, 60, 105, 135, 137, 274, 354, 966, 1377], "origin": [57, 150, 151, 165, 225, 226, 234, 282, 319, 354, 449, 450, 478, 479, 492, 510, 556, 594, 618, 635, 647, 648, 649, 650, 651, 653, 695, 701, 710, 768, 769, 847, 877, 878, 884, 911, 929, 966, 1066, 1067, 1099, 1100, 1113, 1134, 1181, 1245, 1246, 1247, 1248, 1250, 1286, 1292, 1301, 1368], "orjson": 146, "orld": 1317, "orson": 146, "other": [1, 21, 37, 41, 47, 64, 65, 131, 149, 150, 151, 152, 155, 165, 170, 174, 175, 176, 177, 226, 228, 231, 234, 257, 258, 259, 269, 270, 278, 282, 287, 289, 292, 293, 316, 321, 323, 326, 328, 329, 352, 354, 357, 363, 367, 369, 379, 380, 433, 448, 484, 492, 498, 499, 510, 514, 519, 521, 531, 535, 545, 552, 574, 575, 576, 577, 592, 598, 604, 614, 616, 629, 630, 634, 649, 650, 682, 689, 718, 745, 746, 751, 754, 761, 763, 765, 770, 773, 774, 775, 776, 784, 791, 811, 813, 816, 825, 829, 831, 847, 859, 862, 870, 884, 892, 893, 894, 903, 904, 910, 911, 916, 917, 921, 931, 932, 935, 936, 937, 966, 972, 981, 1050, 1065, 1105, 1113, 1120, 1121, 1122, 1130, 1141, 1143, 1158, 1170, 1177, 1199, 1200, 1201, 1202, 1217, 1229, 1230, 1246, 1247, 1350, 1359, 1367, 1368, 1373, 1383, 1396], "other_df": [257, 354], "other_lf": [892, 966], "otherwis": [39, 152, 155, 162, 168, 180, 183, 187, 238, 262, 270, 289, 292, 311, 316, 340, 354, 403, 408, 429, 433, 444, 500, 501, 502, 503, 585, 594, 605, 635, 639, 640, 642, 647, 683, 693, 696, 700, 705, 707, 712, 716, 717, 720, 731, 758, 762, 791, 794, 803, 809, 837, 847, 904, 916, 949, 966, 971, 1015, 1020, 1042, 1050, 1062, 1124, 1125, 1126, 1127, 1210, 1218, 1237, 1239, 1243, 1266, 1268, 1275, 1284, 1287, 1291, 1296, 1298, 1303, 1307, 1308, 1311, 1322, 1357, 1368, 1388], "our": 210, "out": [8, 15, 39, 48, 49, 50, 51, 52, 53, 54, 112, 138, 141, 170, 173, 181, 185, 234, 286, 289, 354, 390, 408, 560, 562, 693, 696, 705, 837, 884, 914, 966, 1002, 1020, 1185, 1187, 1284, 1287, 1296, 1394], "outcom": [635, 847], "outer": [57, 323, 354, 932, 966], "outermost": 56, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 213, 221, 255, 262, 267, 270, 276, 278, 288, 292, 294, 304, 317, 324, 328, 354, 366, 368, 391, 423, 424, 429, 444, 484, 564, 585, 593, 594, 605, 608, 619, 642, 649, 692, 708, 712, 752, 753, 758, 762, 763, 764, 765, 775, 776, 777, 795, 805, 806, 808, 809, 813, 831, 837, 847, 859, 864, 874, 880, 898, 903, 904, 916, 918, 928, 935, 949, 966, 979, 980, 1003, 1035, 1036, 1042, 1062, 1105, 1189, 1218, 1239, 1283, 1299, 1303, 1352, 1353, 1357, 1368], "output_path": [609, 921, 966], "outsid": [55, 167, 170, 433, 847, 1050, 1368], "over": [51, 52, 53, 54, 65, 140, 150, 151, 152, 155, 161, 165, 170, 181, 182, 213, 231, 254, 255, 256, 262, 270, 287, 288, 289, 301, 317, 318, 332, 340, 354, 358, 423, 424, 443, 446, 501, 509, 593, 594, 605, 607, 608, 609, 610, 611, 619, 620, 645, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 752, 753, 781, 782, 795, 808, 809, 821, 826, 847, 864, 869, 880, 904, 908, 921, 924, 928, 941, 949, 963, 966, 972, 1035, 1036, 1061, 1125, 1130, 1218, 1254, 1255, 1257, 1261, 1352, 1353, 1368, 1396], "overflow": [425, 441, 442, 735, 747, 847, 866, 966, 1037, 1059, 1060, 1326, 1338, 1368], "overhead": [54, 56, 98, 165, 168, 169, 170], "overlap": [695, 702, 704, 706, 1286, 1293, 1295, 1297], "overrid": [1, 41, 131, 133, 134, 135, 136, 137, 150, 152, 153, 155, 159, 160, 161, 167, 169, 178, 179, 185, 187, 354, 966], "overridden": [41, 131, 133, 135, 137, 159, 160, 169, 187, 354, 966], "overview": [354, 847, 859, 966, 1368, 1395, 1399], "overwrit": [15, 39, 40, 42, 51, 54, 131, 133, 134, 135, 137, 141, 146, 150, 151, 159, 160, 165, 169, 209, 323, 354, 365, 745, 847, 932, 966], "overwrite_schema": [40, 354], "ow": 725, "own": [837, 862, 1348, 1368, 1399], "p": [59, 277, 354, 639, 829, 847, 907, 966, 972, 1296, 1298, 1381], "p13dt14h0": 484, "p1dt42": 484, "pa": [40, 131, 171, 354, 826], "pa_tabl": 826, "pacif": [452, 1069], "pack": [274, 354], "packag": [33, 34, 35, 147, 152, 354, 358, 451, 463, 772, 1068, 1080], "pad": [714, 715, 740, 1305, 1306, 1331], "pad_end": [715, 1306], "pad_start": [714, 740, 1305, 1331], "page": [47, 51, 156, 162, 168, 170, 354, 847, 859, 966, 1368, 1395], "pair": [131, 133, 134, 135, 137, 143, 159, 160, 169, 283, 354, 912, 966, 1399], "pairwis": [219, 354], "panda": [39, 132, 136, 146, 173, 234, 243, 282, 313, 319, 321, 354, 471, 472, 751, 826, 847, 884, 888, 911, 929, 931, 966, 1092, 1093, 1349, 1350, 1368, 1378, 1380, 1396], "pandas_df": 1396, "pane": [41, 354], "panic": 113, "pap": 1298, "papa": 707, "papai": [707, 1298], "papaya": [707, 720, 731, 1298, 1311, 1322], "parallel": [63, 65, 140, 153, 162, 170, 243, 258, 260, 277, 293, 329, 354, 443, 557, 758, 837, 847, 888, 892, 893, 917, 936, 949, 966, 1061, 1182, 1357, 1368], "parallelis": [262, 340, 354, 1218, 1368], "parallelstrategi": [162, 170], "param": [41, 131, 133, 134, 135, 137, 150, 151, 159, 160, 165, 169, 180, 181, 185, 287, 354, 966], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 84, 88, 96, 99, 105, 114, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 193, 194, 195, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 253, 255, 256, 257, 258, 259, 261, 262, 263, 267, 269, 270, 273, 274, 276, 277, 278, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 337, 339, 340, 346, 348, 354, 363, 365, 366, 367, 368, 369, 379, 386, 387, 390, 391, 398, 399, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 423, 424, 425, 426, 430, 433, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 451, 453, 455, 456, 461, 463, 474, 477, 478, 479, 480, 481, 483, 484, 492, 495, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 529, 530, 531, 535, 543, 545, 547, 552, 553, 554, 555, 557, 560, 561, 562, 563, 564, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 592, 593, 594, 601, 602, 608, 609, 610, 614, 616, 619, 620, 621, 622, 623, 624, 629, 630, 634, 635, 636, 639, 640, 642, 643, 645, 647, 648, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 740, 741, 743, 745, 746, 748, 752, 753, 754, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 843, 847, 864, 866, 867, 869, 870, 874, 875, 876, 877, 880, 881, 882, 883, 884, 886, 887, 888, 889, 892, 893, 894, 897, 898, 899, 903, 904, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 941, 942, 946, 948, 949, 955, 957, 966, 971, 972, 976, 978, 979, 980, 981, 991, 998, 999, 1002, 1003, 1010, 1011, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1035, 1036, 1037, 1038, 1043, 1049, 1050, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1068, 1070, 1072, 1073, 1078, 1080, 1095, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1113, 1116, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1130, 1131, 1132, 1133, 1134, 1138, 1139, 1140, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1158, 1165, 1168, 1172, 1177, 1178, 1179, 1180, 1182, 1185, 1186, 1187, 1188, 1189, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1209, 1210, 1211, 1218, 1230, 1234, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1274, 1278, 1279, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1304, 1305, 1306, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1328, 1331, 1332, 1335, 1339, 1342, 1343, 1344, 1345, 1346, 1348, 1349, 1352, 1353, 1354, 1357, 1358, 1359, 1368, 1377, 1378, 1379, 1380, 1381, 1383, 1388, 1391, 1396], "parameteris": 152, "parametr": 859, "paramount": [898, 966], "parent": [41, 76, 236, 354], "parenthes": 19, "parquet": [47, 51, 52, 53, 54, 162, 163, 164, 170, 198, 354, 859, 966], "parquetcompress": [47, 354], "parquetfieldoverwrit": [51, 966], "parquetmetadata": [47, 51, 354, 966], "pars": [38, 48, 149, 150, 151, 153, 155, 160, 161, 162, 165, 168, 169, 170, 213, 242, 292, 293, 297, 300, 317, 328, 329, 333, 354, 424, 433, 531, 635, 649, 650, 689, 709, 718, 734, 735, 745, 753, 763, 765, 770, 773, 774, 775, 776, 784, 797, 811, 813, 816, 825, 827, 829, 831, 837, 847, 864, 887, 916, 917, 920, 923, 928, 935, 936, 942, 966, 1036, 1050, 1153, 1246, 1247, 1271, 1300, 1325, 1326, 1353, 1368, 1377], "parseerror": [735, 1326], "parser": [150, 155], "part": [54, 131, 155, 205, 210, 311, 316, 354, 635, 702, 722, 723, 847, 937, 966, 976, 1293, 1313, 1314, 1391, 1392], "part_idx": 144, "parti": [593, 847], "partial": [134, 150, 165, 354, 966], "particip": [41, 354], "particular": [40, 150, 155, 156, 158, 213, 229, 317, 354, 423, 424, 752, 753, 847, 864, 928, 966, 1035, 1036, 1123, 1352, 1353, 1368], "partit": [47, 52, 53, 54, 153, 162, 166, 168, 170, 171, 256, 276, 354, 635, 847, 859], "partition_bi": [47, 151, 256, 354, 635, 847], "partition_chunk_size_byt": [47, 354], "partition_col": [47, 153, 354], "partition_df": 151, "partition_index": 197, "partition_num": 153, "partition_on": 153, "partition_rang": 153, "partitionbykei": [53, 54, 143, 144], "partitioned_object": [47, 354], "partitioningschem": [48, 49, 50, 51, 966], "partitionmax": 53, "partitionmaxs": [52, 54, 142], "partitionpart": [52, 53, 143, 144], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 48, 49, 50, 51, 57, 63, 64, 105, 130, 133, 146, 147, 149, 152, 153, 155, 162, 165, 168, 171, 174, 176, 179, 181, 183, 185, 213, 219, 223, 242, 243, 245, 258, 261, 276, 277, 278, 283, 286, 292, 297, 300, 305, 313, 316, 317, 324, 328, 333, 354, 398, 424, 451, 461, 463, 474, 478, 484, 507, 528, 578, 593, 594, 609, 635, 639, 649, 650, 655, 680, 689, 718, 725, 726, 727, 734, 753, 762, 770, 772, 797, 829, 837, 843, 847, 864, 869, 870, 876, 880, 887, 888, 890, 893, 898, 907, 908, 912, 914, 916, 920, 921, 923, 928, 935, 941, 942, 949, 966, 971, 1010, 1036, 1068, 1078, 1080, 1099, 1105, 1131, 1147, 1172, 1203, 1218, 1246, 1247, 1271, 1309, 1316, 1317, 1318, 1325, 1339, 1349, 1353, 1368, 1381, 1396], "pass_nam": [594, 847], "pass_name_to_appli": [147, 847], "password": [150, 153, 156, 158], "past": [37, 354, 898, 966], "pat": [705, 1296], "patch": 75, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 142, 144, 147, 148, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 222, 294, 354, 446, 608, 609, 612, 679, 847, 875, 918, 921, 966, 970, 1269, 1301, 1368, 1399], "pathlib": [36, 38, 43, 44, 47, 165, 354], "pattern": [101, 150, 151, 155, 156, 160, 162, 165, 168, 169, 170, 255, 354, 426, 430, 603, 693, 694, 695, 698, 701, 702, 703, 704, 705, 706, 716, 717, 718, 724, 862, 949, 972, 1038, 1043, 1266, 1268, 1284, 1285, 1286, 1289, 1292, 1293, 1294, 1295, 1296, 1297, 1307, 1308, 1309, 1315, 1368, 1391], "paya": 731, "pc": [910, 966], "pct": [181, 645, 847], "pct_chang": [847, 1368], "pct_valid": [645, 847], "pd": [132, 136, 751, 826, 847, 1349, 1350, 1368, 1378, 1396], "pd_df": 136, "pd_frame": 826, "pd_seri": 136, "pdsh": [140, 151], "pea": 707, "peak": [288, 354, 637, 638, 847, 1235, 1236, 1368], "peak_max": [847, 1368], "peak_min": [847, 1368], "pear": [707, 720, 731, 1298, 1311, 1322], "pearson": [219, 354, 543, 656, 686, 777, 847, 1168, 1252, 1278, 1368, 1385], "penalti": [730, 732, 733, 1321, 1323, 1324], "per": [15, 38, 41, 48, 147, 155, 179, 181, 213, 241, 263, 274, 275, 278, 293, 300, 317, 329, 343, 345, 346, 354, 390, 424, 557, 560, 562, 593, 594, 618, 619, 621, 623, 625, 626, 689, 753, 758, 770, 847, 864, 899, 917, 923, 928, 936, 952, 954, 955, 966, 1002, 1036, 1182, 1185, 1187, 1353, 1357, 1368], "per_partition_sort_bi": [52, 53, 54], "percent": [636, 847, 1234, 1368], "percentag": [178, 181, 185, 636, 847, 1234, 1368], "percentil": [221, 354, 645, 847, 874, 966, 1063, 1368], "perform": [39, 47, 49, 51, 57, 103, 108, 110, 115, 117, 124, 132, 150, 151, 152, 156, 160, 162, 165, 167, 168, 169, 170, 209, 234, 242, 243, 257, 258, 259, 262, 281, 282, 286, 288, 289, 312, 340, 354, 414, 419, 422, 428, 429, 514, 585, 593, 594, 635, 655, 694, 704, 706, 711, 712, 718, 730, 732, 733, 847, 884, 888, 892, 893, 894, 911, 914, 923, 938, 939, 966, 1026, 1031, 1034, 1041, 1042, 1218, 1285, 1295, 1297, 1302, 1303, 1309, 1321, 1323, 1324, 1348, 1368], "perhap": [318, 354], "period": [150, 151, 165, 243, 286, 354, 479, 500, 502, 503, 636, 655, 786, 787, 789, 790, 834, 835, 847, 888, 914, 966, 1100, 1124, 1126, 1127, 1234, 1368], "persist": 1383, "phase": [39, 322, 354], "philadelphia": [716, 717], "phone": [738, 1329], "physic": [56, 69, 98, 150, 151, 258, 278, 354, 751, 847, 865, 892, 893, 921, 966, 1044, 1350, 1368], "pi": [11, 445, 847, 1052, 1054, 1276, 1340, 1368, 1389, 1393], "pick": [182, 837], "pickl": [446, 847, 875, 966], "pip": [451, 463, 772, 1068, 1080], "pipe": [354, 847, 966], "pipelin": [155, 316, 354], "pitfal": 115, "pivot": [322, 354, 972], "pivot_long": [321, 354, 931, 966], "pivot_wid": [278, 354], "pivotagg": [278, 354], "pixel": [41, 354], "pk": [497, 847, 1119, 1368], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 98, 102, 105, 106, 107, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 187, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 843, 847, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 966, 971, 972, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1368, 1373, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1399], "pl_frame": 826, "place": [11, 12, 38, 48, 205, 211, 224, 231, 247, 248, 278, 284, 289, 300, 326, 354, 358, 379, 391, 399, 564, 580, 688, 689, 770, 847, 923, 966, 981, 991, 1003, 1011, 1130, 1189, 1205, 1242, 1280, 1368], "placehold": 796, "plai": [13, 776], "plain": [880, 910, 966], "plan": [63, 130, 258, 260, 354, 446, 847, 865, 869, 875, 880, 892, 893, 910, 918, 921, 966, 1398], "plan_stag": [921, 966], "plan_typ": [910, 966], "plane": [768, 769], "planstag": [921, 966], "plantypeprefer": [910, 966], "platform": 173, "ple": 1391, "pleas": [136, 152, 153, 234, 243, 282, 354, 358, 501, 778, 791, 847, 884, 888, 911, 966, 1125, 1368], "plenti": 972, "plot": [354, 908, 921, 966, 1368], "plu": [444, 590, 847, 1062, 1215, 1239, 1368, 1390], "plugin": [0, 847, 859], "plugin_path": 147, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 77, 78, 79, 130, 141, 142, 143, 144, 145, 146, 154, 160, 162, 163, 165, 166, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 225, 232, 243, 259, 260, 263, 301, 311, 316, 323, 354, 357, 358, 432, 443, 444, 449, 451, 463, 479, 480, 508, 513, 514, 525, 538, 539, 573, 594, 642, 656, 657, 659, 661, 663, 665, 667, 668, 670, 672, 674, 675, 677, 772, 774, 805, 806, 847, 869, 870, 877, 880, 882, 888, 894, 898, 899, 908, 912, 924, 932, 940, 966, 1045, 1047, 1061, 1062, 1066, 1068, 1080, 1100, 1101, 1132, 1137, 1148, 1198, 1239, 1252, 1253, 1256, 1258, 1259, 1263, 1265, 1346, 1351, 1368, 1373, 1396], "pointer": [229, 354, 1123, 1368], "poison": [627, 628, 847, 1227, 1228, 1368], "pola": 354, "polar": [1, 203, 354, 357, 358, 846, 847, 853, 859, 966, 970, 971, 972, 1368, 1372, 1373, 1395, 1396, 1398], "polars_df": 1396, "polars_engine_affin": [48, 49, 50, 51, 63, 64, 869, 870, 880, 908, 921, 966], "polars_file_cache_ttl": [160, 165, 168, 169], "polars_hypothesis_profil": [184, 186], "polars_max_thread": 187, "polars_seri": 1396, "polars_verbos": [869, 880, 908, 921, 966], "polarsdatafram": 209, "polarsdataset": [316, 354], "polarsdatatyp": [66, 76, 84, 150, 151, 165, 178, 179, 180, 181, 182, 185, 214, 262, 311, 316, 354, 411, 425, 504, 593, 594, 649, 650, 709, 793, 795, 807, 808, 809, 819, 822, 838, 843, 847, 866, 966, 972, 1023, 1037, 1218, 1246, 1247, 1300, 1368], "polarsintegertyp": [767, 801, 802], "polarstemporaltyp": [730, 1321], "polarstyp": 65, "pool": [15, 64, 187, 188, 870, 966], "poor": 152, "pop2": [258, 354, 893, 966], "popul": [258, 354, 893, 966], "port": [39, 150, 152, 153, 156, 158, 354], "pos_a": 1391, "posit": [41, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197, 210, 223, 230, 242, 276, 292, 293, 297, 300, 320, 328, 329, 333, 354, 398, 500, 502, 503, 504, 578, 635, 640, 642, 680, 689, 703, 716, 717, 735, 745, 768, 769, 770, 773, 774, 775, 776, 793, 825, 829, 843, 847, 876, 881, 887, 916, 917, 920, 923, 930, 935, 936, 942, 966, 972, 1010, 1124, 1126, 1127, 1203, 1237, 1239, 1271, 1294, 1326, 1368, 1397], "position": 1368, "possibl": [41, 47, 51, 105, 107, 133, 134, 137, 150, 155, 178, 181, 185, 242, 255, 262, 288, 319, 340, 354, 591, 594, 605, 657, 723, 757, 847, 869, 880, 887, 908, 921, 923, 929, 966, 1218, 1253, 1314, 1368], "post": [57, 75, 910, 966], "postgresql": [39, 152, 153, 354, 635, 847, 1394], "potenti": [115, 117, 147, 165, 168, 169, 255, 287, 289, 354, 618, 716, 717, 872, 874, 879, 915, 934, 966, 1307, 1308], "pow": [847, 1368, 1389], "pow_n": 59, "power": [827, 1237, 1368, 1390], "powersofn": 59, "pre": [54, 585, 594, 642, 819, 822, 838, 847, 1239, 1368], "preced": [181, 972], "precis": [11, 12, 38, 41, 48, 55, 73, 152, 255, 288, 289, 308, 311, 316, 354, 453, 734, 805, 966, 972, 1070, 1325], "pred1": 837, "pred2": 837, "predefin": [278, 354], "predic": [40, 63, 145, 165, 168, 169, 170, 171, 214, 234, 253, 258, 259, 282, 287, 354, 425, 510, 760, 795, 837, 847, 869, 880, 884, 893, 894, 898, 908, 911, 912, 921, 938, 939, 966, 1134, 1266, 1268, 1368], "predicate_pushdown": [63, 869, 880, 898, 908, 921, 940, 966], "predict": [281, 324, 354], "prefer": [150, 151, 155, 156, 160, 162, 165, 186, 213, 231, 255, 262, 287, 288, 317, 340, 354, 423, 424, 504, 594, 752, 753, 837, 847, 864, 928, 966, 970, 1035, 1036, 1130, 1218, 1352, 1353, 1368, 1378, 1399], "prefilt": 170, "prefix": [40, 150, 151, 165, 205, 354, 365, 413, 430, 484, 603, 619, 622, 623, 625, 626, 724, 727, 728, 740, 847, 972, 1025, 1043, 1315, 1319, 1331], "prefix_": 622, "prefix_a": 622, "prefix_b": 622, "prefix_field": [620, 624], "presenc": [794, 803, 972], "present": [134, 181, 238, 354, 535, 609, 726, 727, 837, 847, 921, 966], "preserv": [225, 226, 234, 242, 257, 259, 262, 282, 312, 313, 323, 354, 449, 450, 451, 471, 472, 510, 556, 635, 649, 683, 700, 847, 877, 878, 884, 892, 894, 911, 932, 966, 1066, 1067, 1068, 1134, 1181, 1246, 1275, 1291, 1349, 1368], "pressur": [51, 150, 151, 160, 162, 165, 169, 170, 681, 847, 966, 1272, 1368], "presum": [593, 847], "prev_pow2": 59, "prevent": [312, 354, 365, 441, 442, 618, 747, 847, 966, 1059, 1060, 1338, 1368], "preview": [241, 354], "previou": [54, 59, 205, 354, 357, 451, 618, 619, 621, 623, 625, 626, 636, 743, 847, 1068, 1234, 1368, 1373], "previous": [2, 3], "price": [354, 357, 1399], "primari": [155, 970, 1396, 1399], "primarili": [1, 862], "primit": [40, 354, 535, 847], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 151, 173, 174, 176, 227, 241, 242, 256, 260, 310, 332, 354, 528, 610, 786, 789, 847, 869, 890, 966, 972, 1158, 1345, 1368, 1399], "prior": [136, 354, 357, 1368, 1373], "prioriti": 182, "probabl": [497, 642, 847, 1119, 1239, 1368], "process": [15, 38, 48, 49, 50, 51, 63, 64, 150, 151, 152, 165, 187, 288, 354, 869, 870, 880, 908, 921, 966], "process_index": [311, 354], "produc": [2, 3, 96, 145, 181, 185, 214, 257, 354, 387, 425, 554, 605, 805, 808, 847, 892, 898, 966, 999, 1179], "product": [57, 219, 257, 354, 441, 448, 847, 892, 966, 1059, 1065, 1368], "profil": [33, 184, 186, 869, 966], "profile_nam": 33, "programmat": [221, 354, 874, 966], "progress": [73, 79], "project": [63, 145, 165, 167, 168, 169, 170, 688, 689, 847, 869, 880, 898, 908, 912, 921, 966], "projection_pushdown": [63, 869, 880, 898, 908, 921, 940, 966], "prompt": 138, "propag": [386, 391, 499, 535, 553, 564, 627, 628, 630, 692, 708, 775, 776, 847, 998, 1003, 1121, 1158, 1178, 1189, 1227, 1228, 1230, 1283, 1299, 1368], "propagate_nan": 777, "proper": [259, 354, 894, 966], "properti": [40, 41, 51, 196, 199, 200, 209, 217, 218, 227, 235, 246, 291, 296, 327, 331, 354, 357, 358, 871, 872, 879, 915, 934, 939, 966, 971, 972, 1118, 1136, 1226, 1270, 1368, 1373, 1399], "proport": [758, 847, 1357, 1368], "protocol": [40, 132, 152, 153, 209, 354], "prototyp": 843, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 150, 151, 153, 154, 155, 160, 162, 165, 166, 167, 168, 169, 170, 181, 185, 195, 211, 234, 238, 253, 258, 282, 301, 311, 354, 357, 408, 409, 484, 504, 525, 585, 593, 594, 696, 697, 701, 709, 710, 726, 727, 728, 729, 797, 829, 847, 859, 869, 880, 884, 893, 908, 911, 921, 924, 941, 963, 966, 1020, 1021, 1105, 1148, 1167, 1218, 1287, 1288, 1292, 1300, 1301, 1346, 1368, 1381, 1388, 1391, 1396, 1399], "provis": 860, "prune": [162, 168, 170, 898, 966], "pt0": 484, "public": [153, 354, 847, 859, 966, 1368, 1395], "pulp": 1377, "pure": [41, 354], "purpos": [617, 847, 966], "push": [150, 156, 160, 162, 165, 168, 169, 170, 171, 214, 354, 425, 847], "pushdown": [63, 145, 869, 880, 898, 908, 912, 921, 938, 939, 966, 1266, 1268, 1368], "put": [38, 48, 75, 354, 358, 966], "pwd": 152, "py": 167, "pyarrow": [40, 47, 55, 131, 136, 150, 153, 154, 156, 158, 162, 166, 171, 173, 306, 312, 313, 354, 826, 859, 1342, 1348, 1349, 1368, 1378, 1380, 1396], "pyarrow_opt": [47, 154, 162, 166, 354], "pyarrow_t": 1396, "pycapsul": [131, 132, 208, 975], "pycapsuleinterfac": [132, 208, 975], "pydant": 173, "pyiceberg": [42, 167, 173, 354], "pyodbc": [39, 354], "pyodbc_uri": [39, 354], "pyspark": 187, "pytest": [174, 176], "python": [0, 33, 34, 35, 43, 44, 75, 86, 101, 132, 150, 151, 156, 158, 173, 174, 176, 209, 255, 262, 288, 289, 308, 340, 354, 446, 451, 455, 463, 514, 593, 594, 703, 772, 786, 787, 789, 790, 834, 835, 847, 853, 875, 949, 966, 970, 971, 1068, 1072, 1080, 1083, 1084, 1085, 1089, 1218, 1294, 1347, 1368, 1372, 1395], "pythondatatyp": [66, 84, 214, 354, 843, 866, 966, 972], "pythonliter": [982, 1026, 1031, 1034, 1135, 1169, 1219, 1220, 1221, 1222, 1266, 1368], "pytorch": [316, 354, 1351, 1368], "q": [289, 354, 829, 1368, 1373, 1381], "q1": [41, 354], "q2": [41, 354], "q3": [41, 354], "q4": [41, 354], "qcut": [444, 847, 1062, 1368], "qhoo": 1399, "qmark": 152, "qqr": 972, "quad": [501, 847, 1125, 1368], "qualifi": [39, 354], "quantifi": [702, 1293], "quantil": [354, 642, 666, 667, 847, 966, 1239, 1258, 1368, 1385], "quantile_cont": 1389, "quantile_disc": 1389, "quantilemethod": [221, 280, 346, 354, 643, 666, 667, 820, 847, 874, 909, 955, 966, 1063, 1240, 1258, 1368], "quarter": [243, 258, 286, 324, 354, 474, 479, 492, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1113, 1392], "queri": [10, 48, 49, 50, 51, 52, 53, 54, 63, 64, 96, 130, 152, 153, 156, 165, 168, 169, 170, 231, 260, 277, 301, 354, 585, 593, 594, 710, 826, 847, 859, 869, 870, 880, 908, 910, 921, 924, 938, 939, 940, 941, 949, 958, 966, 1130, 1218, 1301, 1368, 1377, 1378, 1380, 1384, 1395, 1397, 1398], "queryoptflag": [48, 49, 50, 51, 63, 64, 130, 869, 870, 880, 908, 921, 966], "quick": [843, 1063, 1368, 1399], "quit": [258, 354, 893, 966], "quot": [38, 39, 48, 150, 151, 153, 165, 354, 738, 966, 1329], "quota_project_id": 35, "quote_char": [38, 48, 150, 151, 165, 354, 966], "quote_plu": 153, "quote_styl": [38, 48, 354, 966], "quotes_titl": 738, "quotient": 1390, "r": [150, 151, 165, 354, 600, 639, 695, 700, 701, 702, 703, 716, 717, 847, 972, 1286, 1291, 1292, 1293, 1294, 1307, 1308, 1322, 1381, 1391], "r1": 65, "r2": 65, "r3": 65, "rab": [693, 719, 1284, 1310, 1386], "rad": 1393, "radian": [445, 768, 847, 1389], "radix": [735, 1326], "rai": [768, 769], "raini": [716, 717, 1307, 1308], "rais": [1, 10, 16, 17, 21, 40, 55, 65, 102, 103, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 150, 151, 155, 161, 162, 165, 170, 174, 176, 209, 211, 214, 238, 263, 278, 287, 312, 354, 390, 408, 425, 451, 477, 478, 560, 562, 605, 640, 642, 650, 693, 696, 705, 730, 732, 733, 735, 737, 788, 807, 847, 899, 941, 966, 1002, 1020, 1068, 1098, 1099, 1185, 1187, 1237, 1239, 1247, 1284, 1287, 1296, 1321, 1323, 1324, 1326, 1328, 1348, 1368], "raise_if_empti": [150, 151, 155, 161, 165], "raise_if_undetermin": 605, "raise_on_fail": 941, "raker": 146, "ram": [48, 49, 50, 51, 966], "ran": [147, 847], "randn": 96, "random": [41, 43, 96, 156, 172, 179, 244, 290, 354, 523, 573, 645, 677, 682, 847, 859, 1146, 1198, 1241, 1265, 1274, 1368], "randomli": 180, "rang": [18, 41, 152, 153, 221, 229, 243, 256, 354, 370, 445, 451, 459, 463, 470, 475, 476, 477, 479, 492, 493, 529, 767, 772, 775, 785, 786, 787, 788, 789, 790, 801, 802, 805, 806, 833, 834, 835, 847, 874, 888, 966, 972, 1063, 1068, 1076, 1080, 1091, 1096, 1097, 1098, 1100, 1113, 1114, 1123, 1234, 1368, 1391], "rank": [379, 557, 770, 777, 792, 847, 991, 1182, 1368], "rankmethod": [645, 847, 1241, 1368], "rare": [452, 1069], "rather": [258, 354, 516, 593, 610, 642, 654, 740, 847, 893, 966, 1239, 1251, 1331, 1368], "raw": 153, "raw_output": [609, 921, 966], "raw_valu": 143, "re": [238, 243, 254, 319, 321, 354, 471, 472, 481, 484, 888, 929, 931, 966, 1092, 1093, 1102, 1105, 1396], "reach": [53, 714, 715, 740, 1305, 1306, 1331], "read": [37, 140, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 195, 222, 231, 354, 357, 446, 516, 847, 875, 910, 966, 1130, 1368, 1373], "read_arrow_batches_from_odbc": 152, "read_clipboard": [37, 354], "read_csv": [149, 155, 165], "read_csv_batch": 140, "read_csv_opt": 155, "read_databas": [96, 153], "read_database_uri": 152, "read_excel": 161, "read_ndjson": 159, "read_od": 155, "read_opt": 155, "read_parquet": 170, "read_tabl": 162, "readabl": 843, "reader": [47, 51, 140, 145, 150, 151, 156, 158, 160, 162, 167, 354, 966], "reader_overrid": 167, "readi": 959, "readthedoc": [41, 354], "real": [702, 1293], "realli": [443, 694, 718, 847, 1061, 1285, 1309, 1368], "realloc": [160, 165, 168, 169, 231, 354, 1130, 1368], "rearrang": [262, 354], "reason": [187, 221, 354, 585, 593, 847, 874, 966], "receiv": [57, 152, 165, 262, 277, 340, 354, 594, 639, 847, 907, 966, 1399], "recent": [174, 175, 176, 177, 312, 354, 636, 650, 847, 1234, 1247, 1348, 1368, 1380, 1396], "rechunk": [65, 131, 132, 136, 150, 151, 154, 156, 158, 160, 162, 165, 166, 168, 169, 170, 231, 354, 847, 1048, 1130, 1142, 1224, 1368], "recognis": [10, 16, 17, 21, 972], "recommend": [41, 187, 221, 255, 260, 277, 354, 585, 865, 874, 966, 972], "record": [38, 44, 48, 146, 158, 171, 354, 966], "record_batch": [256, 354], "recordbatch": [131, 256, 354, 826, 1378, 1380, 1396], "recurs": [48, 49, 50, 51, 500, 502, 503, 847, 966, 1124, 1126, 1127, 1368], "red": [56, 97, 98, 340, 758, 847, 949, 1357, 1368], "redempt": 1377, "redshift": 153, "redshift_format": 198, "reduc": [51, 150, 151, 160, 162, 165, 168, 169, 170, 288, 341, 342, 344, 347, 354, 681, 782, 795, 847, 950, 951, 953, 956, 966, 1220, 1238, 1272, 1338, 1368], "reduct": [236, 354, 594, 847], "ref": [701, 703, 1292, 1294], "refer": [0, 33, 41, 101, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 219, 222, 354, 358, 446, 481, 484, 645, 701, 716, 717, 730, 732, 733, 737, 847, 875, 966, 1102, 1105, 1241, 1307, 1308, 1321, 1323, 1324, 1328, 1368], "referenc": [41, 354, 593, 716, 717, 743, 847, 1307, 1308, 1378, 1396], "reg": 146, "regard": [150, 777], "regardless": [136, 213, 242, 258, 317, 354, 424, 456, 710, 753, 837, 847, 864, 893, 928, 966, 1036, 1073, 1301, 1353, 1368], "regex": [99, 504, 600, 601, 603, 693, 695, 701, 702, 703, 705, 716, 717, 741, 793, 847, 972, 1284, 1286, 1292, 1293, 1294, 1296, 1307, 1308], "regexp_lik": 1389, "region": [41, 167, 354], "region_nam": 33, "regist": [1, 52, 53, 54, 58, 59, 60, 61, 145, 147, 184, 186, 301, 354, 847, 924, 966, 970, 1377, 1378, 1380, 1381, 1382, 1383, 1396, 1398], "register_dataframe_namespac": [1, 59, 60, 61], "register_expr_namespac": [1, 58, 60, 61], "register_glob": [1379, 1381, 1383, 1396], "register_io_sourc": 970, "register_lazyframe_namespac": [1, 58, 59, 61], "register_mani": [1379, 1380, 1383], "register_plugin": 847, "register_plugin_funct": 847, "register_series_namespac": [1, 58, 59, 60], "registr": [301, 354, 826, 859, 924, 966, 1383, 1396], "regrid": [529, 847], "regular": [139, 255, 287, 288, 324, 331, 354, 504, 693, 694, 695, 699, 701, 702, 703, 704, 705, 706, 716, 717, 718, 772, 793, 837, 843, 847, 939, 966, 972, 1284, 1285, 1286, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1307, 1308, 1309, 1394], "reinterpret": [847, 1368], "rel": [41, 52, 53, 54, 147, 153, 154, 166, 167, 174, 175, 176, 177, 354, 474, 500, 502, 503, 758, 847, 1095, 1124, 1126, 1127, 1357, 1368], "relat": [138, 152, 205, 716, 717, 972, 1307, 1308, 1384], "releas": [64, 257, 354, 594, 847, 870, 892, 966, 1399], "release_year": 1377, "relev": 65, "reli": [257, 354, 892, 966], "reliabl": [97, 98], "remain": [52, 150, 151, 165, 225, 226, 229, 234, 249, 278, 282, 354, 449, 450, 510, 529, 530, 556, 649, 722, 723, 847, 877, 878, 884, 891, 898, 911, 966, 1066, 1067, 1123, 1134, 1151, 1152, 1181, 1246, 1313, 1314, 1368, 1383], "remaind": [411, 723, 1023, 1314, 1390], "remap": 100, "remot": [96, 150, 151, 156, 158, 966], "remov": [4, 47, 51, 150, 151, 163, 165, 209, 223, 234, 263, 309, 354, 504, 619, 725, 726, 727, 728, 729, 793, 847, 876, 884, 899, 966, 1316, 1317, 1318, 1319, 1320, 1343, 1368, 1398], "removes_pronoun": 718, "removesuffix": 619, "renam": [1, 43, 44, 134, 138, 150, 151, 155, 156, 158, 162, 165, 168, 169, 170, 174, 175, 176, 177, 188, 213, 242, 243, 257, 278, 286, 292, 293, 306, 317, 324, 328, 329, 333, 335, 354, 365, 424, 443, 500, 502, 503, 516, 611, 612, 618, 619, 620, 621, 623, 625, 626, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 743, 745, 753, 823, 824, 825, 829, 847, 864, 887, 888, 892, 914, 916, 917, 928, 935, 936, 942, 944, 966, 978, 1061, 1122, 1124, 1126, 1127, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1296, 1335, 1342, 1344, 1368, 1396], "rename_field": [722, 723, 1313, 1314], "render": [609, 921, 966], "render_as_str": 152, "reoconstruct": [289, 354], "reorder": [263, 354, 899, 966], "repeat": [54, 156, 168, 646, 648, 819, 838, 847, 1245, 1368], "repeat_bi": [847, 1368], "replac": [39, 40, 42, 150, 151, 165, 232, 233, 284, 318, 321, 328, 329, 354, 357, 455, 478, 593, 594, 650, 717, 718, 733, 847, 931, 935, 936, 966, 1072, 1099, 1247, 1266, 1268, 1308, 1309, 1324, 1368, 1373, 1389], "replace_al": [650, 716, 847, 1246, 1247, 1307, 1368], "replace_column": 354, "replace_strict": [649, 847, 1246, 1368], "replace_time_zon": [452, 458, 460, 1074, 1075, 1103], "replace_with": [718, 1309], "replic": [751, 847, 1350, 1368], "report": [152, 229, 354, 713, 1123, 1304, 1368], "repr": [138, 426, 430, 484, 1038, 1043, 1105], "repres": [38, 41, 42, 48, 71, 72, 74, 85, 89, 94, 131, 133, 135, 136, 137, 152, 278, 301, 302, 311, 312, 325, 332, 354, 429, 514, 538, 539, 581, 587, 593, 691, 707, 712, 716, 717, 720, 731, 759, 762, 779, 791, 793, 807, 808, 809, 818, 823, 824, 828, 836, 843, 847, 924, 925, 933, 966, 972, 1042, 1266, 1282, 1298, 1303, 1307, 1308, 1311, 1322, 1348, 1358, 1368, 1396], "represent": [11, 45, 46, 71, 72, 74, 89, 138, 294, 310, 354, 426, 428, 429, 430, 454, 459, 462, 465, 466, 467, 468, 469, 470, 473, 475, 476, 480, 493, 494, 496, 608, 751, 847, 880, 896, 918, 966, 1038, 1041, 1042, 1043, 1044, 1071, 1076, 1079, 1081, 1082, 1086, 1087, 1088, 1090, 1091, 1094, 1096, 1097, 1101, 1114, 1115, 1117, 1345, 1350, 1368, 1387], "request": 35, "requested_schema": [208, 975], "requir": [1, 33, 34, 35, 40, 41, 57, 65, 136, 152, 153, 174, 175, 176, 177, 190, 219, 225, 287, 311, 312, 313, 316, 354, 404, 426, 430, 500, 502, 503, 586, 594, 635, 659, 661, 663, 665, 667, 670, 672, 674, 678, 681, 730, 732, 733, 755, 771, 773, 777, 779, 822, 847, 862, 872, 877, 878, 879, 923, 934, 966, 1016, 1122, 1124, 1126, 1127, 1211, 1267, 1272, 1307, 1321, 1323, 1324, 1348, 1349, 1354, 1368], "require_al": 972, "require_http": 190, "rerais": [64, 870, 966], "rerun": [231, 354, 1130, 1368], "resampl": [243, 354, 888, 966], "reset": [4, 205], "reset_index": [136, 243, 354, 888, 966], "reshap": [278, 312, 354, 558, 774, 847, 1183, 1368], "resolv": [147, 234, 354, 455, 585, 871, 872, 879, 915, 934, 966], "resourc": [941, 970], "respect": [41, 150, 165, 263, 354, 694, 704, 706, 718, 899, 966, 972, 1285, 1295, 1297, 1309, 1351, 1368], "respons": [153, 270, 354, 904, 966], "rest": [738, 1329, 1391], "restor": [205, 354, 357, 1368, 1373], "restore_default": 205, "restrict": [31, 723, 1314], "result": [14, 38, 45, 46, 47, 48, 49, 50, 51, 57, 65, 135, 136, 137, 152, 153, 155, 165, 168, 170, 171, 185, 231, 234, 243, 244, 257, 258, 259, 274, 278, 282, 286, 289, 294, 295, 297, 311, 312, 313, 324, 331, 333, 339, 354, 451, 479, 481, 484, 492, 500, 501, 502, 503, 507, 514, 523, 531, 543, 584, 585, 593, 594, 608, 635, 640, 642, 649, 650, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 700, 717, 721, 722, 733, 754, 758, 781, 782, 786, 788, 789, 790, 791, 806, 807, 808, 819, 822, 823, 824, 826, 837, 838, 847, 865, 869, 874, 884, 888, 892, 893, 894, 898, 908, 911, 914, 918, 919, 920, 939, 942, 948, 959, 960, 966, 972, 981, 1100, 1102, 1105, 1113, 1124, 1126, 1127, 1130, 1131, 1146, 1153, 1168, 1209, 1218, 1237, 1239, 1246, 1247, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1269, 1271, 1291, 1312, 1313, 1324, 1348, 1349, 1357, 1368, 1378, 1384, 1391, 1396, 1397, 1399], "resultset": 152, "retain": [234, 282, 354, 884, 911, 966], "retri": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 168, 169, 170, 195, 354, 966], "retriev": [190, 191, 195, 238, 311, 354, 384, 385, 550, 551, 741, 818, 996, 997, 1175, 1176, 1332, 1346, 1368, 1384], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 96, 108, 111, 119, 127, 130, 131, 133, 134, 135, 136, 137, 139, 140, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 187, 188, 195, 207, 210, 213, 215, 218, 219, 220, 224, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 241, 242, 243, 245, 246, 247, 251, 253, 254, 255, 256, 257, 260, 261, 262, 263, 265, 267, 272, 273, 274, 276, 277, 278, 283, 286, 287, 288, 289, 290, 294, 301, 304, 305, 311, 312, 313, 316, 317, 318, 319, 324, 327, 328, 329, 335, 337, 339, 340, 343, 348, 354, 366, 368, 371, 372, 373, 374, 375, 376, 379, 380, 384, 385, 386, 388, 390, 391, 402, 407, 408, 409, 410, 411, 412, 413, 423, 424, 428, 429, 434, 435, 436, 437, 438, 444, 445, 451, 452, 454, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 501, 506, 514, 517, 518, 520, 524, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 550, 551, 553, 558, 560, 562, 563, 564, 566, 573, 583, 584, 591, 593, 594, 606, 608, 609, 610, 615, 639, 642, 644, 648, 649, 650, 651, 653, 654, 677, 678, 683, 684, 685, 692, 693, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 731, 735, 740, 748, 749, 750, 752, 753, 754, 756, 757, 758, 761, 762, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 785, 786, 787, 788, 789, 790, 791, 794, 795, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 819, 822, 825, 826, 829, 832, 833, 834, 835, 837, 838, 847, 862, 864, 867, 869, 870, 872, 873, 874, 879, 880, 886, 888, 889, 892, 896, 897, 898, 899, 907, 908, 912, 914, 918, 921, 927, 928, 929, 934, 935, 936, 944, 946, 948, 952, 957, 959, 966, 971, 972, 974, 976, 979, 980, 981, 989, 990, 992, 993, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1014, 1016, 1019, 1020, 1021, 1023, 1024, 1035, 1036, 1040, 1041, 1042, 1049, 1055, 1056, 1062, 1063, 1068, 1069, 1071, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1117, 1123, 1125, 1129, 1130, 1135, 1140, 1147, 1148, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1183, 1185, 1187, 1188, 1189, 1191, 1198, 1208, 1209, 1216, 1218, 1223, 1232, 1239, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1265, 1267, 1275, 1283, 1284, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1310, 1311, 1312, 1313, 1314, 1322, 1326, 1331, 1339, 1342, 1349, 1352, 1353, 1355, 1356, 1357, 1359, 1368, 1377, 1378, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1394, 1396, 1397, 1398, 1399], "return_as_str": [241, 354, 610], "return_dtyp": [41, 262, 354, 593, 594, 649, 650, 761, 795, 808, 809, 847, 1218, 1246, 1247, 1368], "return_typ": [311, 316, 354], "returns_scalar": [147, 593, 594, 795, 809, 847], "reus": [63, 205, 869, 880, 908, 921, 966], "reusabl": 205, "rev": [259, 354, 894, 966], "revers": [213, 229, 317, 354, 424, 438, 439, 440, 441, 442, 619, 621, 623, 753, 774, 780, 847, 864, 928, 966, 1036, 1056, 1057, 1058, 1059, 1060, 1353, 1368, 1386, 1389], "reverse_": 621, "reverse_a": 621, "reverse_b": 621, "revert": [7, 9, 11], "rhap": [704, 706, 1297], "rhapsodi": [704, 706, 1297], "right": [9, 11, 16, 17, 19, 28, 41, 73, 150, 151, 174, 175, 176, 177, 243, 257, 258, 286, 323, 354, 444, 500, 501, 502, 503, 531, 574, 575, 576, 577, 642, 655, 659, 661, 663, 665, 667, 670, 672, 674, 678, 686, 773, 786, 787, 789, 790, 805, 806, 834, 835, 837, 847, 888, 892, 893, 914, 932, 966, 1062, 1124, 1125, 1126, 1127, 1153, 1199, 1200, 1201, 1202, 1239, 1267, 1278, 1368, 1384, 1389], "right_left": [257, 323, 354, 892, 932, 966], "right_on": [257, 258, 323, 354, 892, 893, 932, 966], "rightmost": [678, 847, 1267, 1368, 1391], "rld": [725, 727, 1318], "rle": [654, 847, 1251, 1368], "rle_id": [653, 847, 1368], "rle_id_a": [654, 847], "rle_id_ab": [654, 847], "rmm": 941, "rn": [150, 151, 165], "role": [33, 153], "roll": [243, 354, 451, 471, 472, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 775, 823, 824, 847, 888, 966, 1068, 1092, 1093, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1368], "rollback": [472, 1093], "rolled_forward": 451, "rollforward": [471, 1092], "rolling_kurtosi": [847, 1368], "rolling_map": [847, 1368], "rolling_max": [847, 1368], "rolling_max_bi": 847, "rolling_mean": [847, 1368], "rolling_mean_bi": 847, "rolling_median": [847, 1368], "rolling_median_bi": 847, "rolling_min": [847, 1368], "rolling_min_bi": 847, "rolling_quantil": [847, 1368], "rolling_quantile_bi": 847, "rolling_row_max": [659, 847], "rolling_row_mean": [661, 847], "rolling_row_median": [663, 847], "rolling_row_min": [665, 847], "rolling_row_quantil": [667, 847], "rolling_row_std": [670, 847], "rolling_row_sum": [672, 847], "rolling_row_var": [674, 847], "rolling_skew": [847, 1368], "rolling_std": [847, 1368], "rolling_std_bi": 847, "rolling_sum": [657, 847, 1253, 1368], "rolling_sum_bi": 847, "rolling_var": [847, 1368], "rolling_var_bi": 847, "rollinggroupbi": [286, 354], "ronaldo": [701, 1292], "root": [154, 166, 431, 607, 618, 619, 621, 623, 625, 626, 690, 846, 847, 1046, 1281, 1368, 1390], "rotat": [354, 357, 1368, 1373], "round": [21, 41, 59, 138, 152, 354, 432, 436, 513, 676, 749, 847, 1047, 1137, 1264, 1368, 1389], "round_sig_fig": [847, 1368], "round_str": 1100, "round_td": 1100, "rounded_corn": 21, "roundmod": [675, 847, 1263, 1368], "row": [15, 21, 26, 38, 39, 41, 47, 48, 51, 53, 57, 58, 60, 65, 105, 111, 119, 127, 134, 135, 136, 137, 138, 145, 146, 150, 151, 152, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 174, 175, 181, 210, 211, 213, 214, 215, 225, 226, 231, 234, 236, 237, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 269, 270, 274, 278, 282, 286, 289, 290, 299, 305, 308, 310, 311, 316, 317, 319, 321, 322, 323, 330, 331, 335, 337, 339, 340, 348, 354, 358, 379, 380, 388, 403, 424, 425, 506, 514, 518, 524, 547, 558, 585, 635, 636, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 687, 689, 700, 709, 748, 753, 767, 770, 776, 778, 795, 799, 801, 802, 804, 806, 821, 823, 824, 832, 847, 864, 867, 877, 878, 884, 885, 886, 888, 889, 892, 893, 894, 895, 897, 898, 903, 904, 911, 922, 927, 928, 929, 931, 932, 938, 939, 944, 946, 948, 949, 957, 966, 976, 991, 1000, 1129, 1130, 1140, 1147, 1172, 1183, 1234, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1279, 1291, 1300, 1339, 1368, 1377, 1384, 1386, 1397, 1398, 1399], "row_count_nam": [150, 151, 156, 158, 162, 165, 168, 169, 170], "row_count_offset": [150, 151, 156, 158, 162, 165, 168, 169, 170], "row_group": [162, 170], "row_group_s": [47, 51, 354, 966], "row_height": [41, 354], "row_idx": 211, "row_index": [41, 354], "row_index_nam": [150, 151, 156, 158, 160, 162, 165, 168, 169, 170], "row_index_offset": [150, 151, 156, 158, 160, 162, 165, 168, 169, 170], "row_nr": [330, 354, 938, 966], "row_tot": [41, 354], "rowname_col": [354, 358], "rows_by_kei": [255, 288, 307, 354], "rowserror": [287, 354], "rowtotalsdefinit": [41, 354], "rtol": [174, 175, 176, 177], "rtrim": 1389, "ru": 1391, "rule": [150, 162, 165, 170, 236, 263, 354, 694, 718, 733, 899, 966, 1285, 1309, 1324], "run": [48, 49, 50, 51, 63, 64, 72, 96, 130, 152, 181, 184, 185, 186, 242, 257, 260, 262, 293, 319, 329, 340, 354, 429, 443, 557, 593, 594, 653, 654, 712, 825, 847, 869, 870, 880, 887, 892, 898, 903, 908, 910, 917, 921, 929, 936, 941, 966, 970, 972, 1042, 1061, 1182, 1218, 1250, 1251, 1303, 1368, 1396, 1399], "runtim": 970, "runtimeerror": [312, 354, 1348, 1368], "rust": [38, 47, 48, 101, 113, 147, 155, 156, 158, 162, 262, 340, 354, 703, 966, 970, 1218, 1294, 1368], "s1": [56, 97, 98, 176, 177, 236, 354, 773, 777, 779, 1015, 1121, 1122, 1142, 1167, 1177, 1210, 1230, 1242, 1359, 1368], "s2": [1, 56, 97, 98, 176, 177, 236, 354, 773, 777, 779, 1015, 1048, 1065, 1121, 1122, 1142, 1158, 1167, 1177, 1210, 1224, 1230, 1242, 1359, 1368], "s3": [1, 40, 154, 166, 167, 170, 171, 354, 910, 966, 1015, 1210, 1368], "s_": 484, "s_bar": 1386, "s_dt": [484, 1391, 1392], "s_dt1": 1391, "s_dt2": 1391, "s_dtm": 484, "s_foo": 1386, "s_from_str_repr": [1345, 1368], "s_head_5": 707, "s_head_n": 707, "s_tail_5": 731, "s_tail_n": 731, "s_td": 484, "s_tm": [484, 1391, 1392], "safe": [647, 847, 1243, 1368], "sale": [635, 847], "salesforce_format": 198, "sam": 13, "same": [21, 40, 41, 54, 56, 57, 63, 64, 65, 97, 98, 114, 156, 165, 174, 175, 176, 177, 179, 205, 211, 225, 226, 232, 233, 234, 242, 258, 262, 278, 282, 288, 289, 300, 319, 328, 329, 333, 340, 354, 362, 369, 402, 428, 449, 450, 484, 508, 509, 510, 514, 516, 517, 520, 584, 598, 604, 635, 649, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 682, 689, 700, 711, 743, 837, 843, 847, 869, 870, 877, 878, 882, 883, 884, 887, 893, 896, 898, 911, 921, 923, 929, 935, 936, 942, 966, 972, 977, 1014, 1041, 1066, 1067, 1072, 1105, 1132, 1133, 1209, 1218, 1246, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1291, 1302, 1359, 1368, 1382, 1384, 1392], "samoa": [452, 1069], "sampl": [150, 151, 340, 354, 682, 686, 805, 806, 847, 949, 1278, 1368, 1385], "sample_s": [150, 151], "sampled_from": 1399, "sandwich": [239, 354], "sat": [354, 357], "satisfi": [531, 847, 1153, 1368], "saturdai": [243, 354, 888, 966], "save": [2, 3, 6, 243, 258, 286, 324, 354, 452, 460, 474, 479, 492, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 791, 834, 835, 843, 847, 859, 888, 893, 914, 966, 1077, 1095, 1100, 1113], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [147, 210, 211, 253, 262, 287, 297, 354, 429, 593, 678, 680, 707, 712, 720, 731, 795, 807, 809, 847, 920, 966, 976, 1042, 1167, 1267, 1271, 1298, 1303, 1311, 1322, 1368], "scale": [29, 73, 229, 354, 412, 594, 639, 675, 734, 847, 972, 1123, 1325, 1368], "scale_negative_even": [639, 847], "scan": [55, 134, 137, 150, 151, 152, 155, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 195, 354, 709, 859, 966, 1300], "scan_csv": [48, 49, 50, 51, 150, 151, 966], "scan_ipc": 156, "scan_ndjson": 160, "scan_parquet": [52, 53, 54, 162, 171, 910, 966], "scan_pyarrow_dataset": [162, 170], "scan_tabl": 203, "scancastopt": 170, "scatter": [354, 357, 1368, 1373], "scenario": 1368, "schedul": [64, 870, 966], "schema": [0, 1, 15, 29, 36, 39, 40, 55, 58, 59, 60, 65, 96, 105, 122, 123, 131, 133, 134, 135, 137, 145, 146, 150, 151, 152, 153, 155, 157, 159, 160, 161, 162, 164, 165, 168, 169, 170, 191, 193, 194, 195, 199, 201, 215, 216, 217, 223, 227, 229, 256, 260, 262, 263, 270, 274, 283, 312, 316, 354, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 458, 584, 585, 594, 605, 606, 609, 610, 620, 622, 624, 709, 761, 829, 847, 859, 867, 868, 871, 872, 876, 879, 898, 899, 904, 912, 934, 949, 966, 972, 1051, 1300, 1368, 1377], "schema_mod": [40, 354], "schema_overrid": [131, 133, 134, 135, 136, 137, 150, 151, 152, 153, 155, 159, 160, 161, 165, 169, 256, 312, 354, 675, 847, 966, 972], "schemadefinit": [131, 133, 134, 135, 137, 159, 160, 169, 354, 966], "schemadict": [88, 96, 131, 133, 134, 135, 136, 137, 145, 150, 152, 153, 155, 161, 162, 165, 168, 170, 263, 354, 606, 609, 610, 829, 898, 899, 949, 966], "schemaerror": [263, 354, 899, 966], "schemainitdatatyp": 971, "scheme": [52, 53, 54], "schindler": 1377, "scientif": [12, 38, 48, 354, 966], "scikit": [316, 354], "scipi": [543, 686, 847, 1168, 1278, 1368], "scope": [34, 35, 205, 858, 972, 1380, 1383, 1396], "score": [41, 278, 354], "script": [354, 357, 1368, 1373], "scroll": [41, 354], "sdiff": 576, "sdk": 190, "search": [258, 354, 585, 694, 704, 706, 718, 893, 923, 966, 1150, 1285, 1295, 1297, 1309, 1368], "search_sort": [847, 1368], "searchsortedsid": [678, 847, 1267, 1368], "searchstrategi": [178, 180, 181, 182, 183, 185], "season": [716, 717], "sec": [1392, 1399], "second": [38, 48, 160, 165, 168, 169, 174, 175, 176, 177, 243, 258, 286, 324, 354, 462, 466, 468, 469, 473, 474, 477, 479, 484, 491, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 716, 717, 730, 733, 788, 789, 790, 791, 833, 834, 835, 847, 888, 893, 914, 966, 972, 1095, 1098, 1100, 1112, 1113, 1125, 1307, 1308, 1321, 1324, 1368, 1391, 1392, 1397, 1399], "second_part": [722, 723, 1313, 1314], "seconds_diff": 491, "secret": [167, 170], "section": [278, 354, 693, 701, 702, 705, 716, 717, 786, 787, 789, 790, 834, 835, 970, 1284, 1292, 1293, 1296, 1307, 1308], "secur": [446, 847, 875, 966], "see": [38, 40, 41, 43, 44, 47, 48, 49, 50, 51, 72, 145, 147, 152, 153, 154, 155, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 181, 185, 195, 207, 219, 234, 243, 257, 277, 278, 282, 323, 354, 358, 417, 418, 420, 421, 433, 484, 509, 543, 593, 686, 693, 701, 702, 705, 707, 716, 717, 731, 786, 787, 789, 790, 821, 834, 835, 843, 847, 884, 888, 911, 932, 941, 966, 970, 972, 974, 1029, 1030, 1032, 1033, 1044, 1050, 1105, 1168, 1278, 1284, 1292, 1293, 1296, 1298, 1307, 1308, 1322, 1368, 1399], "seed": [96, 172, 244, 290, 354, 523, 573, 645, 677, 682, 847, 1146, 1198, 1241, 1265, 1274, 1368], "seed_1": [244, 354, 523, 847, 1146, 1368], "seed_2": [244, 354, 523, 847, 1146, 1368], "seed_3": [244, 354, 523, 847, 1146, 1368], "seen": [484, 1105], "seen_group": 151, "select": [1, 8, 39, 48, 49, 50, 51, 57, 58, 59, 60, 63, 64, 96, 102, 148, 150, 151, 152, 153, 154, 156, 158, 162, 165, 167, 171, 180, 210, 212, 253, 254, 258, 262, 274, 277, 287, 293, 299, 301, 314, 320, 324, 331, 354, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 388, 393, 394, 395, 400, 401, 402, 403, 404, 405, 407, 410, 413, 414, 419, 422, 423, 424, 427, 431, 432, 434, 435, 436, 437, 443, 445, 447, 448, 449, 450, 453, 455, 456, 465, 471, 472, 474, 478, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 497, 500, 502, 503, 504, 505, 506, 507, 511, 513, 518, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 536, 542, 543, 544, 546, 547, 557, 558, 585, 588, 589, 590, 591, 593, 594, 595, 596, 597, 601, 613, 615, 617, 618, 620, 622, 624, 627, 628, 632, 633, 634, 635, 637, 638, 641, 643, 644, 645, 646, 647, 648, 651, 652, 653, 656, 657, 668, 675, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 700, 701, 702, 703, 704, 705, 706, 708, 713, 730, 741, 743, 744, 747, 748, 749, 750, 752, 753, 755, 756, 757, 758, 759, 762, 764, 766, 769, 770, 771, 774, 775, 777, 778, 779, 780, 783, 790, 791, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 810, 812, 814, 815, 817, 818, 821, 822, 826, 827, 828, 829, 830, 832, 836, 843, 847, 862, 863, 869, 870, 872, 880, 893, 907, 908, 917, 921, 922, 924, 930, 937, 939, 941, 966, 972, 976, 1099, 1139, 1182, 1266, 1268, 1279, 1297, 1301, 1321, 1368, 1377, 1378, 1379, 1380, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398], "select_from": [180, 183, 185], "select_seq": [354, 966], "selector": [0, 41, 214, 223, 225, 226, 230, 269, 276, 278, 300, 309, 311, 316, 319, 321, 322, 354, 358, 484, 504, 601, 847, 859, 866, 876, 877, 878, 881, 903, 923, 929, 931, 966], "selectortyp": [41, 354, 972], "self": [1, 58, 59, 60, 61, 63, 301, 332, 354, 826, 847, 869, 880, 908, 921, 924, 937, 966, 981, 1027, 1028, 1029, 1030, 1032, 1033, 1037, 1051, 1056, 1130, 1134, 1149, 1216, 1218, 1231, 1235, 1236, 1242, 1245, 1246, 1247, 1266, 1268, 1269, 1280, 1356, 1359, 1368, 1379, 1380, 1381, 1383, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1396], "semi": [146, 257, 354, 892, 966, 1384], "semigraph": 21, "sens": [150, 156, 158, 270, 324, 354, 635, 847, 904, 966], "sensit": [693, 702, 705, 716, 717, 1284, 1293, 1296, 1307, 1308], "sep": 146, "separ": [9, 11, 25, 28, 37, 38, 48, 140, 146, 149, 150, 151, 155, 165, 276, 278, 309, 318, 320, 354, 388, 391, 484, 558, 564, 594, 700, 776, 781, 782, 847, 921, 930, 966, 1000, 1003, 1105, 1183, 1189, 1291, 1337, 1343, 1368, 1391], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 51, 52, 54, 57, 88, 131, 133, 134, 135, 137, 141, 146, 150, 151, 152, 155, 159, 160, 161, 165, 169, 179, 180, 181, 182, 183, 211, 213, 221, 230, 231, 257, 258, 269, 274, 276, 277, 278, 289, 300, 309, 311, 316, 317, 321, 322, 323, 324, 354, 403, 424, 444, 517, 535, 585, 593, 639, 642, 649, 650, 689, 718, 728, 729, 743, 753, 770, 781, 782, 795, 797, 805, 806, 808, 809, 818, 821, 827, 847, 864, 874, 881, 892, 893, 903, 907, 923, 928, 931, 932, 966, 972, 1015, 1036, 1062, 1063, 1130, 1210, 1239, 1246, 1247, 1309, 1335, 1353, 1368], "sequenti": [63, 293, 329, 354, 869, 880, 908, 917, 921, 936, 966], "ser": [1074, 1075, 1103], "seri": [0, 1, 12, 26, 41, 56, 58, 59, 60, 61, 65, 66, 75, 88, 97, 98, 107, 131, 133, 136, 138, 147, 176, 177, 181, 210, 211, 224, 234, 236, 238, 240, 243, 244, 247, 248, 249, 250, 252, 254, 265, 267, 272, 282, 284, 286, 290, 304, 307, 310, 312, 314, 315, 334, 354, 369, 380, 403, 407, 426, 427, 428, 429, 430, 432, 478, 507, 510, 513, 517, 518, 528, 529, 530, 533, 535, 536, 538, 539, 540, 541, 552, 558, 560, 585, 591, 593, 594, 645, 646, 647, 648, 649, 650, 655, 657, 668, 679, 681, 707, 718, 730, 731, 732, 733, 737, 741, 752, 757, 767, 771, 773, 774, 777, 779, 781, 782, 786, 787, 789, 790, 795, 797, 801, 802, 805, 806, 807, 808, 809, 819, 821, 822, 825, 826, 829, 834, 835, 838, 847, 859, 884, 888, 891, 911, 914, 943, 966, 1360, 1362, 1364, 1367, 1369, 1372, 1373, 1374, 1375, 1376, 1378, 1380, 1391, 1396, 1399], "serial": [45, 46, 222, 354, 446, 612, 847, 875, 966], "serializ": [147, 847], "serializationformat": [222, 294, 354, 446, 608, 847, 875, 918, 966], "seriesplot": [1368, 1373], "server": [39, 152, 153, 354], "servic": 33, "service_account": [154, 166], "service_account_json_absolute_path": [154, 166], "session": 152, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 58, 63, 64, 69, 72, 73, 75, 132, 133, 134, 137, 147, 150, 151, 152, 155, 156, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 195, 205, 209, 218, 225, 226, 235, 238, 242, 244, 255, 257, 258, 267, 269, 288, 290, 292, 294, 299, 304, 309, 311, 312, 316, 318, 319, 321, 322, 323, 328, 354, 357, 366, 368, 390, 391, 403, 415, 417, 418, 420, 421, 433, 444, 477, 478, 495, 523, 535, 560, 562, 564, 573, 574, 575, 576, 577, 579, 585, 593, 594, 601, 602, 608, 639, 642, 649, 650, 656, 657, 658, 660, 662, 664, 666, 668, 669, 671, 673, 677, 682, 686, 687, 692, 708, 709, 716, 717, 720, 725, 726, 727, 728, 729, 730, 732, 733, 737, 758, 762, 764, 767, 771, 773, 776, 777, 779, 786, 787, 788, 789, 790, 791, 795, 801, 802, 805, 806, 807, 813, 819, 822, 823, 824, 825, 829, 831, 834, 835, 837, 838, 847, 859, 869, 870, 877, 880, 887, 892, 893, 898, 903, 908, 916, 918, 921, 922, 929, 931, 932, 935, 940, 949, 966, 979, 980, 1002, 1003, 1015, 1020, 1027, 1029, 1030, 1032, 1033, 1050, 1062, 1098, 1099, 1116, 1136, 1146, 1158, 1165, 1185, 1187, 1189, 1198, 1199, 1200, 1201, 1202, 1204, 1210, 1218, 1239, 1246, 1247, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1266, 1267, 1274, 1278, 1279, 1283, 1299, 1300, 1307, 1308, 1311, 1316, 1317, 1318, 1321, 1323, 1324, 1328, 1348, 1357, 1368, 1387, 1395, 1399], "set_": 205, "set_auto_structifi": [292, 328, 354, 916, 935, 966], "set_decimal_separ": 28, "set_environ": 184, "set_except": [64, 870, 966], "set_fmt_float": 31, "set_fmt_str_length": [694, 704, 706, 718, 1285, 1297, 1309], "set_index": [243, 354, 888, 966], "set_legend": [41, 354], "set_sort": [286, 324, 354, 655, 847, 914, 966, 1368], "set_stat": 31, "set_streaming_chunk_s": [869, 966], "set_styl": [41, 354], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 57], "set_tbl_row": 205, "set_tbl_width_char": 718, "set_thousands_separ": 9, "set_titl": [41, 354], "set_verbos": 205, "setosa": [354, 357], "setup": 1399, "seventeen": [527, 847], "sever": [131, 133, 134, 135, 137, 159, 160, 169, 354, 910, 966, 1399], "sfu": 153, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 56, 57, 58, 59, 60, 61, 65, 66, 84, 88, 96, 97, 98, 105, 124, 131, 132, 133, 134, 135, 136, 137, 138, 146, 150, 159, 160, 165, 171, 178, 181, 185, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 240, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 290, 292, 294, 297, 299, 300, 301, 302, 303, 304, 305, 307, 309, 310, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 613, 614, 615, 616, 617, 618, 619, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 843, 847, 862, 863, 864, 866, 867, 869, 870, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 966, 971, 972, 976, 977, 978, 981, 983, 984, 985, 986, 987, 988, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1121, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1139, 1140, 1142, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1223, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1239, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1272, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1334, 1337, 1339, 1340, 1341, 1343, 1344, 1345, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1359, 1368, 1377, 1378, 1379, 1380, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1397], "share": [174, 175, 176, 177, 229, 354, 1123, 1368], "shawshank": 1377, "sheet": [41, 155, 161, 354], "sheet1": [41, 354], "sheet_id": [155, 161], "sheet_nam": [155, 161], "sheet_zoom": [41, 354], "sheetnam": [155, 161], "shift": [243, 354, 406, 447, 515, 555, 636, 775, 847, 888, 966, 1018, 1064, 1138, 1180, 1234, 1368], "short": [174, 176, 411, 1023], "shorten": [174, 176], "shorter": [150, 151, 165, 585, 801, 802], "shorthand": [354, 357, 837, 1368, 1373], "should": [11, 39, 41, 47, 48, 49, 50, 51, 65, 96, 131, 133, 135, 137, 145, 146, 155, 159, 160, 165, 167, 169, 171, 178, 179, 181, 185, 211, 223, 255, 257, 258, 262, 287, 288, 289, 300, 308, 309, 320, 340, 354, 364, 443, 446, 451, 495, 501, 504, 538, 539, 557, 594, 608, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 686, 689, 716, 717, 734, 758, 770, 772, 791, 793, 807, 809, 823, 824, 843, 847, 869, 875, 876, 880, 892, 893, 898, 908, 918, 921, 923, 930, 966, 972, 1061, 1068, 1116, 1125, 1182, 1218, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1267, 1278, 1307, 1308, 1325, 1357, 1368, 1378], "show": [31, 41, 221, 226, 241, 260, 275, 354, 525, 609, 847, 874, 908, 921, 966, 1148, 1368, 1382, 1395], "show_graph": [260, 354, 966], "show_plot": [908, 966], "shrink": [298, 354, 681, 847, 1272, 1273, 1368], "shrink_dtyp": [847, 1368], "shrink_to_fit": [354, 1368], "shuffl": [172, 290, 316, 340, 354, 573, 677, 847, 949, 1198, 1265, 1368], "side": [41, 147, 243, 286, 354, 531, 574, 575, 576, 577, 655, 659, 661, 663, 665, 667, 670, 672, 674, 678, 786, 787, 789, 790, 805, 806, 834, 835, 847, 888, 914, 966, 1153, 1199, 1200, 1201, 1202, 1267, 1368], "sign": [71, 72, 74, 79, 80, 81, 82, 83, 89, 474, 647, 716, 717, 740, 847, 972, 1095, 1243, 1307, 1308, 1331, 1368, 1389], "sign_x": 1390, "signed_integ": 972, "signific": [170, 255, 262, 354, 417, 418, 420, 421, 594, 676, 847, 1029, 1030, 1032, 1033, 1218, 1264, 1368], "significantli": [155, 262, 340, 354, 1218, 1368, 1399], "silenc": 105, "silent": [55, 170, 735, 1326], "similar": [37, 47, 55, 149, 187, 211, 236, 258, 297, 319, 321, 354, 398, 481, 484, 578, 635, 680, 745, 804, 837, 847, 884, 893, 920, 929, 931, 966, 1010, 1102, 1105, 1203, 1271, 1368], "similarli": [41, 134, 243, 258, 286, 324, 354, 474, 479, 492, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 834, 835, 847, 888, 893, 914, 966, 1095, 1100, 1113], "simpl": [41, 274, 354], "simpler": [972, 1307], "simpli": [165, 781, 795], "simplifi": [63, 869, 880, 908, 921, 966], "simplify_express": [63, 869, 880, 908, 921, 940, 966], "sin": [847, 1368, 1389], "sinc": [40, 63, 66, 71, 72, 89, 150, 151, 152, 154, 160, 165, 166, 168, 169, 178, 179, 180, 181, 185, 188, 212, 269, 312, 330, 335, 354, 458, 461, 495, 516, 593, 612, 649, 692, 700, 760, 769, 777, 797, 847, 863, 869, 880, 903, 908, 921, 923, 937, 938, 944, 966, 1075, 1078, 1084, 1085, 1116, 1145, 1246, 1283, 1291, 1348, 1368], "sind": 1389, "sine": [373, 374, 593, 684, 685, 847, 985, 986, 1276, 1277, 1368, 1393], "singl": [41, 47, 57, 64, 65, 76, 149, 150, 151, 152, 153, 154, 155, 162, 165, 166, 168, 179, 211, 214, 223, 224, 225, 226, 231, 238, 244, 253, 262, 276, 287, 289, 300, 311, 312, 354, 387, 429, 433, 451, 474, 517, 520, 523, 554, 560, 593, 594, 646, 649, 651, 653, 689, 692, 707, 708, 712, 720, 731, 760, 770, 774, 775, 776, 802, 806, 808, 809, 827, 835, 837, 843, 847, 866, 876, 877, 878, 923, 966, 972, 999, 1042, 1050, 1068, 1095, 1130, 1146, 1179, 1185, 1242, 1246, 1248, 1250, 1283, 1298, 1299, 1303, 1311, 1322, 1342, 1348, 1368, 1379], "singlecolselector": 210, "singleindexselector": [210, 976], "sinh": [847, 1368], "sink": 860, "sink_": [52, 54], "sink_csv": [52, 53, 54, 966], "sink_ipc": 966, "sink_ndjson": 966, "sink_parquet": [52, 141, 966], "site_id": [354, 358], "six": [678, 847], "size": [15, 47, 51, 53, 145, 150, 151, 152, 178, 179, 180, 181, 185, 187, 229, 322, 354, 492, 585, 651, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 767, 801, 802, 823, 824, 847, 869, 966, 1113, 1123, 1248, 1252, 1259, 1368, 1399], "sizeunit": [229, 354, 412, 1024, 1123, 1368], "skew": [668, 847, 1259, 1368], "skewtest": [686, 847, 1278, 1368], "skip": [150, 151, 155, 162, 165, 170, 258, 322, 354, 893, 966, 1218, 1368, 1384], "skip_empty_lin": 155, "skip_lin": [150, 165], "skip_nul": [594, 847, 1218, 1368], "skip_row": [150, 151, 165], "skip_rows_after_head": [150, 151, 165], "sklearn": [316, 354], "slice": [58, 63, 147, 229, 245, 256, 305, 354, 563, 583, 594, 605, 607, 657, 658, 660, 662, 664, 666, 669, 671, 673, 707, 731, 847, 862, 869, 880, 898, 908, 921, 966, 1123, 1147, 1188, 1208, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1298, 1322, 1339, 1368, 1391], "slice_pushdown": [63, 869, 880, 898, 908, 921, 940, 966], "slide": [443, 847, 1061, 1368], "slightli": [48, 49, 50, 51, 101, 514, 847, 966, 1392], "slot": [443, 447, 555, 847, 1061, 1064, 1180, 1368], "slow": [117, 134, 137, 150, 151, 152, 155, 159, 160, 161, 165, 169, 170, 354, 443, 594, 657, 709, 847, 949, 966, 1061, 1253, 1300, 1368], "slower": [135, 137, 155, 242, 262, 276, 324, 340, 354, 594, 809, 847, 887, 949, 966, 1218, 1368], "small": [12, 153, 479, 966, 1399], "smaller": [47, 51, 53, 229, 354, 966, 1123, 1368], "smallest": [213, 317, 354, 423, 424, 753, 847, 864, 928, 966, 1035, 1036, 1353, 1368, 1385, 1388], "smooth": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "snappi": [36, 47, 51, 354, 966], "snapshot": 167, "snapshot_id": 167, "snowflak": [152, 153], "snowflake_format": 198, "snowi": [716, 717], "so": [1, 41, 153, 155, 165, 187, 205, 241, 243, 259, 278, 286, 354, 380, 390, 446, 514, 531, 562, 585, 594, 655, 716, 717, 718, 725, 726, 727, 741, 847, 862, 875, 888, 894, 914, 966, 972, 1002, 1187, 1307, 1308, 1309, 1316, 1317, 1318], "softwar": [37, 149, 354], "solut": [39, 354], "solv": [96, 145], "some": [15, 31, 41, 47, 51, 56, 65, 98, 134, 150, 151, 152, 165, 209, 226, 278, 289, 312, 354, 358, 716, 717, 843, 910, 966, 1158, 1307, 1308, 1368, 1399], "some_account": [702, 1293], "some_t": 1398, "someth": [593, 847], "sometim": [791, 846], "somewher": [702, 1293], "sort": [52, 53, 54, 57, 58, 213, 243, 258, 270, 277, 278, 286, 295, 317, 324, 337, 348, 354, 379, 423, 424, 501, 510, 594, 635, 655, 678, 679, 689, 752, 753, 758, 760, 770, 786, 789, 809, 847, 864, 880, 888, 893, 904, 907, 908, 914, 919, 921, 928, 946, 957, 966, 972, 991, 1035, 1036, 1125, 1165, 1267, 1269, 1352, 1353, 1354, 1357, 1368, 1384, 1397, 1399], "sort_bi": 847, "sort_column": [278, 354], "sorted": [258, 354, 893, 966], "sorted_asc": [1136, 1368], "sorted_desc": [1136, 1368], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 843, 847, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 966, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1368, 1373, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1396], "source_ac": 138, "source_actor_id": 138, "source_alia": [40, 354], "source_cha": 138, "source_channel_id": 138, "south": 75, "space": [21, 243, 354, 484, 805, 806, 888, 966, 972, 1105], "spam": [266, 354, 702, 1293], "span": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "spanner": [354, 358], "spark": [47, 354], "sparklin": [41, 354], "speak": [686, 847, 1278, 1368], "spearman": 777, "speci": [354, 357], "special": [39, 54, 150, 151, 153, 165, 316, 331, 354, 657, 702, 716, 717, 847, 939, 966, 1218, 1253, 1293, 1307, 1308, 1368], "specif": [1, 31, 40, 41, 43, 44, 49, 101, 131, 133, 135, 137, 146, 150, 153, 154, 155, 159, 160, 161, 166, 167, 169, 211, 214, 255, 257, 263, 306, 311, 354, 481, 484, 730, 732, 733, 737, 758, 847, 866, 892, 899, 966, 971, 972, 1102, 1105, 1321, 1323, 1324, 1328, 1342, 1346, 1357, 1368, 1384, 1396, 1398, 1399], "specifi": [10, 38, 39, 40, 41, 47, 48, 57, 102, 105, 108, 123, 126, 150, 155, 161, 162, 165, 170, 182, 191, 193, 194, 195, 211, 213, 214, 229, 230, 233, 238, 242, 243, 257, 258, 276, 278, 286, 287, 289, 292, 293, 297, 300, 311, 317, 320, 328, 329, 333, 354, 424, 433, 477, 484, 500, 502, 503, 504, 509, 635, 648, 650, 658, 660, 662, 664, 666, 669, 671, 673, 680, 689, 745, 753, 770, 773, 774, 775, 776, 786, 787, 789, 790, 791, 793, 825, 829, 834, 835, 843, 847, 864, 866, 881, 883, 887, 888, 892, 893, 914, 916, 917, 920, 923, 928, 930, 935, 936, 942, 966, 972, 1036, 1050, 1098, 1105, 1123, 1124, 1126, 1127, 1133, 1245, 1247, 1271, 1346, 1353, 1368, 1384, 1391, 1398], "speed": [51, 295, 354, 594, 847, 919, 966, 970, 1399], "speedup": [57, 170, 255, 262, 354, 594, 847, 1218, 1368], "split": [1, 41, 47, 52, 53, 54, 58, 256, 354, 700, 722, 723, 1291, 1313, 1314, 1391], "split_by_column_dtyp": 60, "split_inclus": 721, "split_part": 1389, "splitfram": [1, 58], "spreadsheet": [37, 149, 155, 161, 278, 354], "spring": [716, 717], "sql": [0, 39, 120, 121, 129, 152, 153, 257, 297, 354, 398, 578, 680, 804, 827, 847, 859, 920, 966, 1010, 1203, 1271, 1368, 1377, 1378, 1380, 1382, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1394, 1397, 1398], "sql_expr": 1396, "sqlalchemi": [39, 152, 173, 354], "sqlcontext": [301, 354, 826, 924, 966, 1395], "sqldw_format": 198, "sqlite": [39, 152, 354], "sqrt": [594, 686, 745, 847, 1218, 1278, 1368, 1389], "sqrt_x": 1390, "squar": [1, 61, 340, 543, 651, 690, 847, 949, 1168, 1248, 1281, 1368, 1390], "st": [33, 1399], "stabil": [244, 354, 523, 847, 1146, 1368], "stabl": [162, 207, 219, 221, 222, 244, 290, 294, 301, 354, 446, 523, 590, 608, 751, 847, 874, 875, 903, 918, 923, 924, 966, 974, 1146, 1350, 1368], "stack": [65, 247, 326, 354, 357, 1378], "stage": [921, 966], "stai": [593, 682, 847], "standalon": [179, 972], "standard": [7, 11, 41, 152, 302, 311, 316, 354, 465, 502, 669, 670, 686, 691, 710, 713, 828, 843, 847, 862, 925, 966, 1082, 1121, 1126, 1230, 1278, 1282, 1301, 1304, 1368, 1385, 1399], "standardis": [41, 354], "start": [41, 48, 49, 50, 51, 54, 148, 150, 151, 153, 155, 156, 158, 160, 161, 162, 165, 168, 169, 170, 187, 237, 242, 243, 260, 299, 324, 330, 331, 354, 407, 410, 413, 426, 430, 451, 459, 463, 470, 475, 479, 492, 493, 504, 518, 561, 579, 654, 659, 661, 663, 665, 667, 670, 672, 674, 687, 693, 698, 702, 706, 715, 720, 724, 725, 727, 728, 731, 740, 767, 772, 781, 785, 786, 787, 788, 789, 790, 793, 795, 801, 802, 805, 806, 834, 835, 837, 843, 847, 886, 887, 888, 908, 922, 938, 939, 966, 972, 1025, 1038, 1043, 1068, 1070, 1073, 1076, 1078, 1079, 1086, 1088, 1090, 1091, 1094, 1096, 1100, 1104, 1113, 1114, 1140, 1186, 1204, 1251, 1279, 1289, 1293, 1297, 1306, 1311, 1315, 1316, 1318, 1322, 1331, 1368, 1384, 1391, 1399], "start_bi": [243, 354, 888, 966], "startbi": [243, 354, 888, 966], "starts_a": 1391, "starts_with": [58, 278, 354, 358, 407, 410, 426, 601, 693, 698, 826, 924, 966, 972, 1038, 1289, 1389], "starts_with_expr": 413, "starts_with_lit": 413, "startup": [311, 354], "stat": [543, 686, 847, 1168, 1278, 1368], "state": [4, 5, 113, 781, 859, 1396], "statement": [635, 837, 847, 1382, 1397], "static": [94, 949], "statist": [47, 51, 150, 151, 162, 168, 170, 221, 354, 502, 503, 543, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 686, 847, 874, 966, 1063, 1126, 1127, 1168, 1252, 1259, 1278, 1368], "std": [221, 354, 669, 670, 847, 874, 966, 1063, 1260, 1368], "std_dev": [41, 354], "stddev": 1389, "stddev_samp": 1385, "stdev": [41, 354, 1385], "stdev_samp": 1385, "stdout": [205, 241, 354, 610], "step": [322, 354, 514, 767, 801, 802, 847, 862], "steve": [270, 354, 904, 966], "still": [152, 153], "stock": [354, 357], "stop": [145, 148, 150, 151, 156, 158, 160, 162, 165, 168, 169, 170, 659, 661, 663, 665, 667, 670, 672, 674, 847, 862, 1070, 1073, 1078, 1079, 1086, 1088, 1090, 1094, 1100, 1104], "storag": [38, 40, 43, 47, 48, 49, 50, 51, 150, 154, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 195, 354, 966], "storage_loc": [196, 199, 200], "storage_opt": [38, 40, 43, 47, 48, 49, 50, 51, 150, 154, 156, 158, 160, 162, 165, 166, 167, 168, 169, 170, 195, 354, 966], "store": [40, 167, 231, 255, 288, 354, 427, 653, 847, 1039, 1130, 1250, 1368], "store_id": [635, 847], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 72, 75, 76, 99, 130, 131, 132, 133, 134, 135, 137, 138, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 181, 184, 185, 186, 190, 191, 193, 194, 195, 196, 197, 199, 200, 205, 211, 213, 214, 218, 221, 222, 223, 224, 225, 226, 227, 229, 230, 234, 235, 236, 238, 239, 241, 242, 243, 245, 247, 248, 250, 252, 253, 255, 257, 258, 259, 261, 263, 264, 266, 268, 269, 270, 271, 274, 276, 278, 280, 282, 283, 284, 285, 286, 287, 288, 290, 294, 295, 299, 300, 301, 302, 303, 305, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 363, 364, 365, 386, 391, 403, 407, 408, 409, 410, 413, 414, 419, 422, 424, 426, 427, 430, 438, 444, 446, 448, 456, 474, 478, 479, 481, 484, 492, 501, 504, 510, 512, 516, 517, 520, 528, 531, 552, 562, 563, 564, 579, 583, 585, 594, 605, 607, 608, 609, 610, 612, 619, 620, 621, 622, 623, 624, 625, 626, 632, 635, 639, 642, 648, 649, 650, 652, 654, 655, 659, 661, 663, 665, 667, 670, 672, 674, 681, 688, 689, 741, 742, 743, 744, 753, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 775, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 843, 847, 854, 864, 866, 869, 870, 872, 874, 875, 876, 877, 878, 880, 881, 884, 887, 888, 890, 892, 893, 894, 899, 903, 904, 907, 908, 911, 912, 913, 914, 918, 919, 921, 922, 923, 924, 928, 929, 930, 931, 932, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 966, 971, 972, 978, 1003, 1015, 1021, 1037, 1038, 1039, 1043, 1062, 1063, 1073, 1095, 1099, 1100, 1102, 1105, 1113, 1125, 1133, 1136, 1177, 1189, 1210, 1226, 1227, 1228, 1239, 1244, 1246, 1247, 1268, 1332, 1334, 1335, 1343, 1344, 1345, 1346, 1357, 1368, 1374, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1388, 1391, 1392, 1396, 1397, 1399], "str_date": 1391, "str_timestamp": 1391, "str_valu": [52, 143], "strategi": [38, 48, 57, 65, 150, 170, 178, 179, 180, 181, 182, 183, 185, 233, 243, 257, 258, 273, 323, 324, 354, 406, 439, 442, 509, 515, 585, 594, 847, 860, 883, 888, 892, 893, 910, 932, 966, 1018, 1133, 1138, 1210, 1368], "stream": [10, 15, 43, 44, 48, 49, 50, 51, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 242, 257, 319, 354, 593, 847, 869, 880, 887, 892, 898, 903, 908, 921, 923, 929, 966], "streamabl": [898, 903, 931, 966], "streaming_t": 202, "strftime": [101, 484, 1105, 1389, 1391], "strict": [133, 134, 137, 146, 214, 223, 283, 354, 408, 425, 484, 693, 696, 705, 730, 732, 733, 735, 737, 847, 866, 876, 912, 966, 972, 1020, 1037, 1105, 1122, 1284, 1287, 1296, 1321, 1323, 1324, 1326, 1328, 1368], "strictli": [38, 48, 56, 98, 258, 354, 893, 966], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 48, 56, 69, 72, 75, 88, 95, 97, 98, 99, 101, 107, 125, 134, 138, 146, 150, 151, 152, 153, 165, 174, 175, 176, 177, 178, 185, 189, 213, 214, 217, 222, 227, 229, 236, 238, 241, 242, 243, 258, 263, 276, 278, 286, 289, 291, 292, 293, 294, 300, 310, 311, 317, 318, 322, 324, 328, 329, 333, 354, 363, 386, 391, 410, 424, 426, 428, 429, 430, 433, 446, 474, 479, 481, 484, 492, 501, 504, 512, 516, 531, 564, 608, 610, 635, 639, 649, 650, 655, 659, 661, 663, 665, 667, 670, 672, 674, 689, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 745, 753, 761, 763, 765, 770, 773, 774, 775, 776, 784, 786, 787, 789, 790, 796, 811, 813, 816, 825, 829, 831, 834, 835, 837, 843, 847, 859, 864, 866, 871, 875, 879, 880, 887, 888, 893, 899, 914, 915, 916, 917, 918, 923, 928, 935, 936, 942, 966, 971, 972, 1003, 1020, 1021, 1022, 1036, 1038, 1040, 1041, 1042, 1043, 1095, 1100, 1102, 1105, 1113, 1125, 1153, 1189, 1246, 1247, 1283, 1284, 1285, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1334, 1345, 1346, 1353, 1368, 1377, 1378, 1386, 1389, 1392, 1395, 1399], "string_to_arrai": 1389, "stringcach": [97, 98, 257, 354, 859, 1040, 1044], "stringio": [159, 160, 516, 847], "strings_hex": 697, "strip": [29, 725, 726, 727, 728, 729, 1316, 1317, 1318, 1391], "strip_chars_end": [727, 729], "strip_chars_start": [726, 728], "strip_prefix": [727, 729], "strip_suffix": [726, 728], "strongli": [41, 187, 262, 287, 340, 354, 594, 847, 1218, 1368], "strpo": 1389, "strptime": [286, 354, 478, 655, 847, 914, 966, 1099, 1389], "struct": [8, 55, 76, 126, 138, 141, 263, 274, 292, 315, 320, 328, 354, 403, 444, 525, 585, 593, 594, 620, 622, 624, 642, 653, 654, 703, 709, 722, 723, 751, 758, 781, 782, 784, 808, 837, 847, 899, 916, 930, 935, 949, 966, 1015, 1062, 1210, 1218, 1239, 1250, 1294, 1300, 1313, 1314, 1348, 1350, 1368], "struct_col": [741, 743, 744], "struct_seri": 949, "structarrai": [229, 354, 1123, 1368], "structfieldnotfounderror": 743, "structur": [41, 43, 44, 49, 107, 110, 124, 146, 211, 231, 277, 289, 306, 312, 354, 639, 847, 907, 966, 1130, 1342, 1368, 1396], "student": [278, 354], "style": [7, 21, 41, 52, 152, 278, 354], "sub": [340, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 400, 401, 405, 564, 571, 847, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1017, 1189, 1196], "subarrai": [382, 383, 994, 995], "subclass": [1, 354], "subexpress": [63, 869, 880, 908, 921, 966], "subinterv": 1385, "subject": [47, 167, 278, 354], "sublist": [390, 550, 551, 553, 555, 559, 560, 561, 562, 563, 564, 565, 574, 579, 583, 585, 1002, 1158, 1175, 1176, 1178, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1199, 1204, 1208, 1210, 1368], "subplan": [63, 130, 869, 880, 908, 921, 966], "subscript": 862, "subsequ": [41, 162, 170, 281, 313, 354, 585, 826, 837, 880, 966, 1349, 1368, 1383], "subset": [225, 226, 274, 319, 354, 877, 878, 929, 966], "substr": [407, 410, 413, 426, 430, 693, 698, 705, 716, 717, 720, 721, 722, 723, 724, 972, 1019, 1022, 1025, 1038, 1043, 1284, 1289, 1296, 1307, 1308, 1311, 1312, 1313, 1314, 1315, 1389], "subtl": [41, 354], "subtli": [514, 847], "subtract": [543, 746, 847, 1168, 1368], "succe": [150, 151, 165], "success": [695, 702, 1286, 1293], "successfulli": [52, 53, 54, 869, 880, 908, 921, 966], "suffer": 54, "suffix": [257, 258, 259, 292, 328, 333, 354, 365, 410, 424, 426, 538, 539, 540, 541, 599, 619, 621, 624, 625, 626, 652, 675, 698, 726, 729, 753, 847, 892, 893, 894, 916, 935, 937, 942, 966, 972, 1022, 1038, 1289, 1320], "suffix_field": [620, 622], "sugar": [323, 354, 649, 650, 718, 762, 764, 766, 778, 780, 783, 793, 798, 799, 800, 810, 812, 814, 815, 817, 819, 820, 825, 828, 830, 832, 836, 838, 847, 932, 966, 1246, 1247, 1281, 1309, 1368], "suggest": [354, 357, 1368, 1373], "suitabl": [57, 65, 152, 179, 262, 354, 594, 678, 847, 1218, 1267, 1368], "sum": [41, 96, 147, 229, 236, 242, 243, 253, 278, 286, 304, 333, 354, 441, 442, 446, 497, 510, 585, 594, 605, 607, 608, 609, 610, 611, 649, 650, 655, 671, 672, 760, 762, 774, 781, 783, 784, 795, 809, 821, 831, 847, 869, 870, 875, 880, 887, 888, 906, 908, 910, 914, 918, 921, 942, 966, 972, 1059, 1060, 1119, 1123, 1261, 1368, 1377, 1384, 1386, 1389, 1396], "sum_": [686, 847, 1278, 1368], "sum_a": [286, 354, 655, 847, 914, 966], "sum_horizont": [57, 354, 830], "summari": [221, 354, 874, 966, 1063, 1368, 1384], "summer": [716, 717], "sun": [354, 357, 730, 1321], "sundai": [243, 354, 451, 463, 481, 484, 494, 772, 888, 966, 1068, 1080, 1102, 1105, 1115], "sunni": [716, 717, 1307, 1308], "supercast": [236, 354], "supertyp": [65, 147, 233, 312, 316, 354, 369, 775, 847, 883, 966, 1368], "suppli": [39, 41, 131, 133, 134, 135, 137, 152, 159, 160, 169, 234, 282, 287, 311, 354, 510, 639, 847, 884, 911, 966, 1346, 1368], "support": [1, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 63, 64, 65, 131, 132, 133, 134, 135, 136, 137, 138, 152, 153, 154, 155, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 178, 182, 185, 195, 205, 211, 255, 256, 257, 258, 288, 289, 299, 300, 308, 313, 316, 354, 484, 501, 579, 635, 649, 650, 687, 689, 694, 704, 706, 707, 716, 717, 718, 720, 731, 843, 847, 853, 862, 869, 870, 880, 892, 893, 908, 921, 922, 923, 966, 972, 1105, 1125, 1204, 1246, 1247, 1279, 1285, 1295, 1297, 1298, 1307, 1308, 1309, 1311, 1322, 1349, 1351, 1368, 1372, 1386, 1391, 1392, 1394, 1395, 1396], "supportsinterchang": 132, "suppos": [210, 278, 354, 594, 847, 1218, 1368], "sure": [65, 131, 132, 136, 147, 150, 151, 154, 156, 158, 162, 166, 281, 354, 847], "surreal_query_to_fram": 152, "surrealdb": 152, "surrealql": 152, "suscept": 966, "swap": [837, 912, 966], "swim": 776, "switch": [63, 64, 452, 869, 870, 880, 908, 921, 966, 1069], "sy": 205, "sydnei": 788, "symbol": [37, 38, 48, 354, 847, 966], "symmetr": [576, 972, 1201], "symmetri": [872, 879, 915, 934, 966], "sync": [48, 49, 50, 51, 966], "sync_on_clos": [48, 49, 50, 51, 966], "synchron": [152, 960], "synconclosemethod": [48, 49, 50, 51, 966], "syntact": [323, 354, 649, 650, 718, 762, 764, 766, 778, 780, 783, 793, 798, 799, 800, 810, 812, 814, 815, 817, 819, 820, 825, 828, 830, 832, 836, 838, 847, 932, 966, 1246, 1247, 1281, 1309, 1368], "syntax": [41, 121, 211, 234, 262, 274, 282, 354, 609, 693, 701, 702, 705, 716, 717, 801, 802, 843, 862, 884, 911, 921, 966, 1284, 1292, 1293, 1296, 1307, 1308, 1368, 1392, 1394], "system": [37, 150, 151, 354, 456, 869, 880, 908, 921, 966, 1073], "t": [37, 38, 40, 48, 65, 96, 145, 149, 150, 155, 161, 165, 243, 258, 262, 277, 319, 322, 354, 443, 452, 460, 478, 484, 497, 500, 502, 503, 557, 594, 635, 639, 701, 705, 716, 717, 727, 730, 733, 738, 837, 847, 888, 893, 907, 929, 966, 972, 1061, 1099, 1105, 1119, 1124, 1126, 1127, 1182, 1218, 1292, 1296, 1307, 1308, 1317, 1318, 1321, 1324, 1329, 1368, 1380, 1381, 1391], "t_": [320, 354, 501, 847, 930, 966, 1125, 1368], "t_0": [286, 354, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 847, 914, 966, 1125, 1368], "t_1": [286, 354, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 847, 914, 966, 1125, 1368], "t_a": [320, 354, 930, 966], "t_b": [320, 354, 930, 966], "t_c": [320, 354, 930, 966], "t_d": [320, 354, 930, 966], "t_i": [501, 847, 1125, 1368], "t_id": [259, 354, 894, 966], "t_n": [286, 354, 655, 659, 661, 663, 665, 667, 670, 672, 674, 847, 914, 966], "t_struct": [320, 354, 930, 966], "tab_spann": [354, 358], "tab_stub": [354, 358], "tab_styl": [354, 358], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 131, 138, 146, 154, 155, 161, 166, 167, 191, 194, 195, 197, 200, 201, 257, 259, 278, 301, 306, 313, 322, 323, 354, 358, 826, 859, 892, 894, 924, 932, 966, 1378, 1379, 1380, 1381, 1383, 1384, 1395, 1396], "table_id": 200, "table_nam": [39, 41, 155, 191, 195, 301, 354, 924, 966], "table_path": [40, 154, 166, 167, 354], "table_styl": [41, 354], "table_typ": 200, "tableinfo": [191, 194, 203], "tablemerg": [40, 354], "tablenotfounderror": [40, 354], "tables_scale_100": [140, 151], "tabletyp": [200, 203], "tail": [241, 245, 354, 369, 686, 847, 966, 1147, 1278, 1368], "take": [41, 96, 146, 155, 161, 181, 182, 205, 236, 237, 243, 267, 270, 277, 278, 283, 354, 379, 451, 463, 474, 510, 517, 518, 560, 561, 593, 620, 622, 624, 689, 770, 772, 792, 794, 803, 847, 886, 888, 904, 910, 912, 966, 991, 1068, 1080, 1095, 1139, 1140, 1185, 1186, 1359, 1368, 1386], "taken": [579, 720, 1204, 1311], "talkin": [738, 1329], "tan": [847, 1368, 1389], "tand": 1389, "tangent": [375, 376, 749, 750, 847, 987, 988, 1340, 1341, 1368, 1393], "tanh": [278, 354, 847, 1368], "target": [1, 39, 40, 41, 42, 62, 155, 263, 316, 354, 701, 716, 717, 730, 732, 733, 837, 899, 966, 972, 1292, 1307, 1308, 1321, 1323, 1324, 1391], "target_alia": [40, 354], "target_t": [39, 354], "task": [64, 870, 966], "tau": [500, 501, 847, 1124, 1125, 1368], "tb": [174, 176, 229, 354, 412, 1123, 1368], "tbl": [96, 138, 140, 151, 1398], "tbl0": 1383, "tbl1": [1381, 1383], "tbl2": [1381, 1383], "tbl3": 1381, "tbl4": 1381, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 205], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 221, 354, 874, 966], "tbl_width_char": 791, "td": 484, "td1": 972, "td2": 972, "td3": 972, "tdf": [277, 354], "technic": 843, "tell": [694, 718, 1285, 1309], "tempor": [101, 214, 243, 255, 286, 288, 289, 308, 354, 433, 484, 531, 655, 659, 661, 663, 665, 667, 670, 672, 674, 805, 847, 859, 866, 888, 914, 966, 972, 1050, 1105, 1153, 1368, 1389, 1395], "temporalliter": [433, 805, 806, 847, 1050, 1084, 1085, 1368], "temporari": [39, 354], "temporarili": [187, 205, 243, 286, 354, 655, 847, 888, 914, 966], "tenant": 34, "tenant_id": 34, "tend": [174, 176], "tensor": [316, 354, 1351, 1368], "tensordataset": [316, 354], "term": [500, 502, 503, 707, 720, 731, 847, 1124, 1126, 1127, 1298, 1311, 1322, 1368], "termin": [38, 48, 354, 966], "terminologi": 199, "test": [0, 39, 152, 153, 155, 161, 167, 228, 278, 354, 859, 1122, 1368, 1391], "test1": 1383, "test2": 1383, "test3": 1383, "test_1": [278, 354], "test_1_math": [278, 354], "test_1_phys": [278, 354], "test_2": [278, 354], "test_2_math": [278, 354], "test_2_phys": [278, 354], "test_data": 152, "test_df_height": 181, "test_func": 808, "test_lf": [937, 966], "test_miscellan": 1399, "test_numer": 1399, "test_price_calcul": 1399, "test_series_len": 185, "test_tabl": 153, "test_unique_xyz": 179, "testdb": 153, "testing1234": 1383, "text": [149, 152, 198, 428, 429, 699, 707, 711, 712, 713, 716, 717, 719, 720, 731, 827, 910, 966, 1041, 1042, 1298, 1302, 1303, 1310, 1311, 1322, 1383, 1399], "text1": 717, "text2": 717, "textclaus": 152, "texttt": [686, 847, 1278, 1368], "th": [237, 354, 518, 561, 574, 686, 707, 731, 847, 886, 966, 1140, 1186, 1199, 1278, 1298, 1322, 1368, 1391], "than": [41, 48, 49, 50, 51, 54, 104, 127, 135, 137, 150, 151, 152, 155, 161, 165, 171, 215, 242, 255, 257, 258, 262, 276, 287, 288, 290, 322, 340, 354, 428, 514, 516, 519, 521, 531, 545, 573, 592, 593, 594, 610, 642, 654, 677, 686, 707, 711, 714, 715, 723, 731, 740, 777, 809, 837, 847, 887, 892, 893, 949, 966, 1041, 1153, 1198, 1218, 1239, 1251, 1265, 1278, 1298, 1302, 1305, 1306, 1314, 1322, 1331, 1348, 1368, 1399], "the_aws_access_key_id": [40, 154, 166, 167, 354], "the_aws_region": [40, 354], "the_aws_secret_access_kei": [40, 154, 166, 167, 354], "thei": [38, 41, 48, 56, 64, 65, 97, 98, 134, 147, 165, 205, 258, 260, 289, 354, 635, 678, 718, 726, 727, 847, 869, 880, 893, 908, 921, 966, 970, 972, 1267, 1309, 1368], "them": [64, 131, 133, 134, 135, 137, 152, 153, 155, 159, 160, 161, 162, 165, 168, 169, 170, 205, 230, 231, 243, 258, 270, 278, 286, 316, 324, 354, 391, 501, 531, 564, 627, 628, 635, 655, 775, 786, 787, 789, 790, 834, 835, 847, 870, 881, 888, 893, 904, 914, 966, 972, 1003, 1125, 1130, 1189, 1227, 1228, 1368, 1386, 1396], "then1": 837, "then2": 837, "therebi": [165, 168, 169], "therefor": [54, 150, 156, 160, 162, 229, 354, 594, 847, 1123, 1368], "theta": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63, 64, 65, 71, 72, 73, 74, 79, 89, 96, 98, 105, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 201, 205, 207, 209, 210, 212, 213, 216, 217, 219, 221, 222, 225, 226, 229, 231, 235, 236, 241, 242, 243, 244, 248, 250, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 266, 268, 269, 270, 271, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 299, 301, 302, 303, 306, 308, 311, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 335, 340, 353, 354, 357, 358, 366, 369, 370, 379, 391, 397, 398, 399, 404, 406, 423, 424, 427, 433, 443, 444, 446, 451, 452, 453, 463, 465, 471, 472, 474, 478, 481, 484, 495, 499, 506, 515, 516, 523, 525, 528, 529, 531, 535, 557, 558, 564, 573, 574, 575, 576, 577, 578, 580, 585, 586, 590, 591, 593, 594, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 612, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 635, 642, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 679, 680, 681, 682, 687, 688, 689, 692, 694, 701, 704, 706, 708, 709, 713, 714, 715, 718, 725, 726, 727, 728, 729, 734, 738, 740, 742, 745, 752, 753, 755, 756, 757, 758, 762, 766, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 794, 795, 797, 799, 800, 803, 804, 805, 806, 809, 812, 814, 817, 819, 825, 828, 832, 836, 837, 838, 843, 847, 859, 863, 864, 865, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 884, 887, 888, 890, 892, 893, 894, 896, 898, 899, 903, 904, 908, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 928, 929, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 944, 949, 963, 964, 965, 966, 970, 971, 972, 974, 981, 982, 991, 1003, 1009, 1010, 1011, 1016, 1018, 1035, 1036, 1039, 1044, 1045, 1050, 1051, 1061, 1062, 1068, 1069, 1070, 1072, 1080, 1082, 1092, 1093, 1095, 1099, 1102, 1105, 1116, 1118, 1121, 1123, 1129, 1130, 1138, 1140, 1142, 1146, 1148, 1158, 1167, 1182, 1183, 1189, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1211, 1216, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1230, 1233, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1279, 1280, 1282, 1283, 1285, 1292, 1295, 1297, 1299, 1300, 1304, 1305, 1306, 1309, 1316, 1317, 1318, 1325, 1329, 1331, 1332, 1334, 1337, 1338, 1342, 1344, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1356, 1357, 1358, 1368, 1373, 1377, 1378, 1379, 1383, 1391, 1394, 1395, 1396, 1397, 1399], "thing": [165, 172], "think": [471, 472, 1092, 1093], "third": [593, 847], "thoma": [270, 354, 904, 966], "those": [5, 31, 41, 150, 155, 234, 282, 289, 313, 323, 354, 514, 645, 701, 809, 847, 862, 911, 932, 966, 972, 1241, 1292, 1349, 1368], "though": [39, 152, 243, 354, 843, 888, 966], "thought": 837, "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 48, 64, 140, 150, 151, 153, 187, 188, 300, 354, 557, 594, 689, 770, 847, 870, 923, 966, 1011, 1182, 1205, 1280, 1368], "thread_loc": [594, 847], "thread_pool_s": 188, "three": [41, 210, 286, 315, 354, 444, 642, 655, 678, 707, 716, 731, 847, 914, 966, 1015, 1062, 1210, 1239, 1298, 1308, 1322, 1368], "threshold": [292, 354, 916, 966], "through": [152, 263, 354, 843, 899, 966, 972, 1368, 1383], "throughout": 205, "throw": [40, 133, 134, 137, 223, 283, 354, 709, 710, 866, 876, 912, 966, 1300, 1301, 1368], "thu": [41, 231, 354, 357, 777, 970, 1130, 1368], "thursdai": [243, 354, 451, 463, 772, 888, 966, 1068, 1080], "ti": [645, 847, 1241, 1368], "time": [13, 38, 40, 43, 47, 48, 49, 50, 51, 54, 62, 63, 64, 72, 74, 114, 154, 160, 162, 165, 166, 168, 169, 170, 181, 182, 185, 195, 221, 231, 243, 258, 259, 286, 324, 354, 423, 424, 452, 453, 455, 456, 457, 460, 461, 471, 472, 474, 477, 478, 479, 481, 483, 484, 492, 495, 501, 552, 585, 654, 655, 659, 661, 663, 665, 667, 670, 672, 674, 682, 730, 733, 737, 751, 752, 753, 775, 776, 786, 787, 788, 789, 790, 791, 797, 805, 834, 835, 847, 869, 870, 874, 888, 893, 894, 908, 914, 966, 972, 1035, 1036, 1069, 1070, 1072, 1073, 1077, 1078, 1095, 1098, 1099, 1100, 1102, 1104, 1105, 1113, 1116, 1125, 1130, 1177, 1251, 1274, 1321, 1324, 1328, 1350, 1352, 1353, 1368, 1377, 1383, 1392, 1399], "time_column": [324, 354], "time_format": [38, 48, 354, 966], "time_unit": [72, 74, 453, 455, 461, 483, 495, 733, 788, 789, 790, 791, 797, 971, 972, 1070, 1072, 1078, 1104, 1116, 1324], "time_unit_m": [453, 1070], "time_unit_n": [453, 1070], "time_unit_u": 495, "time_zon": [72, 456, 458, 478, 733, 788, 789, 790, 971, 972, 1069, 1073, 1077, 1099, 1324], "timedelta": [243, 258, 286, 324, 354, 474, 479, 484, 492, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 786, 787, 789, 790, 834, 835, 847, 888, 893, 914, 966, 971, 972, 1083, 1089, 1095, 1100, 1113, 1125, 1227, 1228, 1282, 1358, 1368], "timeout": [64, 870, 966], "timestamp": [138, 154, 166, 243, 354, 478, 479, 492, 797, 888, 966, 1099, 1100, 1113, 1389], "timestamp_m": 483, "timestamp_n": 1104, "timestamp_u": [483, 1104], "timestep": 797, "timeunit": [38, 48, 72, 74, 354, 453, 455, 483, 495, 733, 788, 789, 790, 791, 966, 972, 1070, 1072, 1104, 1116, 1324], "timezon": [55, 72, 154, 166, 458, 972, 1392], "tip": [594, 847], "titl": [41, 354, 357, 1368, 1373, 1377], "titlecas": [738, 1329], "tm": [455, 484, 972, 1392], "to_arrow": [256, 354, 1348, 1368, 1396], "to_batch": [256, 354], "to_dict": [214, 289, 354, 866, 966, 972], "to_dummi": [311, 316, 354, 1368], "to_fram": [427, 461, 479, 483, 492, 730, 971, 1062, 1239, 1266, 1268, 1313, 1314, 1321, 1368, 1373], "to_init_repr": [138, 354, 1368], "to_jax": [316, 354, 1368], "to_list": [138, 286, 354, 1284, 1296, 1368], "to_lowercas": 626, "to_numpi": [311, 316, 354, 593, 847, 1368], "to_panda": [354, 1368], "to_phys": [847, 1044, 1368], "to_python": 971, "to_seri": [58, 238, 354, 730, 771, 822, 1321, 1391], "to_sql": [39, 354], "to_str": [481, 1102], "to_struct": [354, 702], "to_torch": [311, 354, 1368], "to_uppercas": [365, 625, 703, 847], "togeth": 1391, "token": [38, 43, 47, 48, 49, 50, 51, 160, 162, 165, 167, 168, 169, 170, 190, 195, 354, 966], "tokyo": [138, 972], "tokyo_tz": 972, "toler": [174, 175, 176, 177, 258, 354, 893, 966], "tone": [41, 354], "tonight": [694, 718, 1285, 1309], "too": [15, 278, 354, 411, 635, 847, 966, 1023], "tooltip": [354, 357, 1368, 1373], "toomanyrowsreturnederror": [287, 354], "top": [41, 301, 317, 354, 357, 753, 847, 924, 928, 966, 1368, 1373, 1396], "top_col": [41, 354], "top_k": [213, 354, 423, 424, 753, 847, 864, 966, 1035, 1036, 1353, 1368], "top_k_bi": [423, 424, 752, 847, 1035, 1036, 1352, 1368], "top_row": [41, 354], "tor_id": 138, "torch": [173, 316, 354, 1351, 1368], "torchexporttyp": [316, 354], "total": [41, 229, 335, 354, 485, 486, 487, 488, 489, 490, 491, 546, 566, 847, 944, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1123, 1171, 1191, 1368], "total_gross": 1377, "toward": [335, 546, 566, 847, 944, 1171, 1191, 1368], "tp": [1, 60], "tpu": [311, 354, 1346, 1368], "tr15": [713, 1304], "trace": 75, "traceback": [174, 175, 176, 177, 312, 354, 650, 847, 1247, 1348, 1368], "tracebacktyp": 1396, "track": [154, 166, 167, 262, 354, 585, 1396], "trail": [29, 241, 354, 725, 726, 1316, 1317], "train": [316, 354], "train_lf": [937, 966], "transfer": 153, "transferencod": [408, 409, 696, 697, 1020, 1021, 1287, 1288], "transform": [262, 301, 354, 593, 738, 826, 847, 924, 966, 1329], "transform_dens": [1368, 1373], "transit": [234, 282, 354, 884, 911, 966], "translat": 152, "transpar": [869, 880, 908, 921, 966], "transpos": [278, 354], "travel": [154, 166], "travers": [658, 660, 662, 664, 666, 669, 671, 673, 847, 1254, 1255, 1257, 1260, 1261, 1262, 1368], "treat": [150, 151, 165, 207, 386, 501, 535, 553, 693, 695, 705, 716, 717, 837, 847, 974, 998, 1125, 1158, 1178, 1284, 1286, 1296, 1307, 1308, 1368], "tree": [610, 880, 966], "tree_format": [880, 966], "trend": [41, 354], "tri": [262, 354], "triangl": [340, 949], "trigger": [40, 147, 260, 313, 354, 847, 1349, 1368], "trigonometri": [1389, 1395], "trim": [138, 1391], "trim_decimal_zero": 29, "trip": 152, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 54, 63, 64, 65, 96, 131, 132, 133, 134, 136, 137, 138, 140, 141, 146, 147, 150, 151, 152, 154, 155, 156, 158, 161, 162, 165, 166, 168, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 190, 205, 209, 214, 215, 216, 221, 223, 228, 233, 234, 236, 238, 240, 241, 242, 243, 250, 251, 252, 255, 257, 258, 259, 260, 266, 267, 273, 274, 276, 278, 279, 282, 283, 287, 288, 289, 290, 292, 300, 301, 304, 307, 309, 311, 312, 313, 316, 318, 319, 320, 322, 323, 324, 328, 334, 336, 338, 341, 342, 343, 344, 345, 346, 347, 354, 357, 364, 365, 366, 367, 368, 369, 380, 382, 383, 386, 390, 391, 399, 403, 407, 408, 410, 413, 414, 419, 422, 424, 425, 426, 430, 438, 439, 440, 441, 442, 444, 451, 453, 456, 459, 461, 463, 464, 471, 472, 474, 475, 478, 479, 480, 483, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 499, 500, 502, 503, 510, 517, 519, 520, 521, 522, 525, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 553, 560, 562, 564, 580, 585, 592, 593, 594, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 629, 630, 632, 634, 637, 638, 642, 647, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 681, 682, 686, 688, 689, 692, 693, 694, 695, 696, 698, 704, 705, 706, 708, 709, 710, 716, 717, 721, 722, 724, 730, 732, 733, 735, 737, 741, 743, 744, 753, 755, 758, 761, 762, 763, 764, 765, 767, 770, 771, 772, 773, 777, 779, 786, 789, 795, 801, 805, 806, 813, 819, 822, 825, 826, 829, 831, 834, 837, 838, 847, 866, 867, 868, 869, 870, 874, 876, 880, 883, 884, 887, 888, 892, 893, 894, 896, 898, 903, 908, 911, 912, 916, 921, 923, 924, 929, 930, 931, 932, 935, 941, 943, 945, 947, 950, 951, 952, 953, 954, 955, 956, 965, 966, 971, 972, 979, 980, 992, 994, 995, 998, 1002, 1003, 1011, 1019, 1020, 1022, 1025, 1037, 1038, 1040, 1043, 1045, 1048, 1049, 1062, 1068, 1069, 1070, 1073, 1076, 1077, 1078, 1079, 1080, 1081, 1085, 1086, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1119, 1121, 1122, 1124, 1126, 1127, 1134, 1144, 1148, 1150, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1173, 1174, 1178, 1185, 1187, 1189, 1205, 1218, 1224, 1230, 1232, 1235, 1236, 1239, 1242, 1243, 1252, 1259, 1278, 1280, 1283, 1284, 1285, 1286, 1287, 1289, 1295, 1296, 1297, 1299, 1300, 1301, 1307, 1308, 1312, 1313, 1315, 1321, 1323, 1324, 1326, 1328, 1343, 1348, 1349, 1357, 1359, 1368, 1373, 1377, 1378, 1380, 1382, 1386, 1388, 1391, 1396, 1399], "truediv": [514, 847], "truncat": [21, 138, 150, 151, 165, 241, 243, 255, 288, 289, 308, 354, 888, 908, 966, 1395], "truncate_nod": [908, 966], "truncate_ragged_lin": [150, 151, 165], "truncate_str": 492, "truncate_td": 492, "trust": [446, 847, 875, 966], "try": [38, 43, 47, 48, 49, 50, 51, 63, 124, 150, 151, 156, 160, 162, 165, 168, 169, 170, 195, 354, 837, 869, 880, 908, 921, 966], "try_cast": 1389, "try_parse_d": [140, 150, 151, 165], "try_parse_hive_d": [162, 168, 170], "ts_local": [478, 1099], "tseri": [471, 472, 1092, 1093], "tstamp": 972, "tstamp_tokyo": 972, "tstamp_utc": 972, "tue": [354, 357], "tuesdai": [243, 354, 888, 966], "tupl": [41, 66, 153, 155, 161, 210, 211, 255, 262, 276, 287, 288, 289, 296, 316, 332, 354, 609, 651, 847, 908, 921, 966, 971, 972, 1248, 1270, 1368], "turn": [8, 63, 150, 151, 165, 257, 258, 354, 869, 880, 892, 893, 898, 908, 966], "twice": [41, 354], "two": [41, 56, 97, 98, 133, 135, 137, 153, 210, 234, 236, 258, 259, 269, 270, 282, 288, 315, 321, 334, 340, 354, 358, 364, 448, 455, 514, 517, 520, 585, 642, 688, 768, 769, 775, 777, 779, 786, 789, 823, 824, 826, 847, 884, 893, 894, 903, 904, 911, 931, 943, 949, 966, 972, 1015, 1065, 1072, 1210, 1239, 1368, 1383, 1384, 1385, 1388, 1397], "two_a": 1396, "tworld": [727, 1316, 1318], "txt": [1, 13, 165, 693, 705, 1296, 1391], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 55, 58, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 131, 133, 134, 135, 136, 137, 139, 150, 151, 152, 154, 155, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 207, 210, 211, 217, 227, 230, 236, 241, 243, 244, 256, 257, 262, 286, 291, 294, 306, 311, 312, 315, 316, 319, 331, 354, 366, 368, 371, 372, 373, 374, 375, 376, 379, 384, 385, 386, 388, 391, 402, 403, 407, 408, 409, 410, 411, 412, 413, 425, 427, 428, 429, 433, 434, 435, 436, 437, 444, 445, 451, 452, 454, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 504, 506, 517, 520, 523, 531, 532, 533, 534, 535, 536, 537, 546, 550, 551, 553, 558, 564, 566, 584, 585, 593, 594, 608, 642, 644, 648, 649, 650, 651, 653, 654, 655, 659, 661, 663, 665, 667, 670, 672, 674, 683, 684, 685, 692, 695, 696, 697, 700, 701, 702, 703, 706, 707, 708, 710, 711, 712, 720, 721, 722, 723, 730, 731, 735, 749, 750, 751, 758, 767, 775, 778, 785, 786, 787, 788, 789, 790, 791, 793, 801, 802, 804, 805, 806, 807, 808, 809, 819, 822, 833, 834, 835, 838, 843, 847, 859, 860, 869, 879, 880, 881, 888, 892, 908, 914, 915, 921, 929, 939, 966, 971, 974, 979, 980, 992, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1014, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1037, 1039, 1041, 1042, 1050, 1062, 1063, 1068, 1069, 1071, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1122, 1125, 1129, 1146, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1173, 1174, 1175, 1176, 1178, 1183, 1189, 1191, 1209, 1210, 1232, 1239, 1245, 1246, 1247, 1248, 1250, 1251, 1273, 1275, 1283, 1284, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1297, 1298, 1299, 1301, 1302, 1303, 1311, 1312, 1313, 1314, 1321, 1322, 1326, 1347, 1348, 1350, 1359, 1368, 1377, 1384, 1389, 1391, 1395, 1396], "type_coercion": [63, 869, 880, 908, 921, 966], "type_json": 197, "type_nam": 197, "type_text": 197, "typeerror": [40, 211, 354], "typenam": [41, 354], "typic": [134, 152, 170, 262, 354, 460, 683, 847, 972, 1077, 1218, 1275, 1368], "tz": [733, 1324], "tzinfo": [72, 154, 166, 972], "u": [41, 72, 74, 170, 183, 258, 354, 453, 455, 461, 483, 495, 730, 733, 763, 765, 788, 789, 790, 791, 797, 893, 966, 971, 972, 1070, 1072, 1078, 1104, 1116, 1321, 1324, 1381, 1392], "u1": [312, 354], "u16": [165, 1394, 1399], "u32": [13, 152, 212, 214, 220, 275, 330, 331, 335, 339, 345, 347, 354, 364, 370, 377, 378, 379, 380, 381, 384, 385, 387, 396, 412, 428, 429, 437, 438, 525, 527, 546, 550, 551, 554, 566, 571, 617, 633, 645, 653, 654, 659, 661, 663, 665, 667, 670, 672, 674, 678, 695, 705, 706, 711, 712, 713, 751, 756, 758, 762, 766, 770, 771, 778, 780, 801, 804, 817, 847, 863, 866, 873, 906, 938, 939, 944, 948, 954, 956, 966, 972, 991, 992, 993, 996, 997, 999, 1008, 1037, 1041, 1042, 1044, 1056, 1148, 1175, 1176, 1179, 1191, 1196, 1241, 1250, 1251, 1267, 1286, 1296, 1297, 1302, 1303, 1350, 1355, 1357, 1368, 1377, 1385, 1386, 1387, 1391, 1396], "u64": [244, 331, 354, 523, 647, 847, 908, 939, 966, 972, 1146, 1243, 1368], "u8": [214, 309, 310, 322, 354, 650, 761, 847, 866, 966, 972, 1247, 1343, 1368, 1399], "udf": [187, 262, 277, 340, 354, 446, 594, 639, 809, 847, 875, 907, 949, 966, 1218, 1368], "ufunc": 104, "uid": 152, "uint": 1399, "uint16": [165, 441, 442, 747, 847, 972, 1059, 1060, 1338, 1348, 1351, 1368], "uint2": 1394, "uint32": [139, 173, 214, 229, 286, 331, 354, 379, 384, 385, 412, 428, 429, 437, 501, 517, 520, 546, 550, 551, 566, 648, 653, 654, 655, 659, 661, 663, 665, 667, 670, 672, 674, 695, 706, 711, 712, 751, 778, 801, 804, 847, 866, 914, 939, 966, 972, 992, 996, 997, 1024, 1037, 1041, 1042, 1123, 1125, 1175, 1176, 1191, 1245, 1250, 1251, 1286, 1297, 1302, 1303, 1350, 1351, 1368], "uint4": 1396, "uint64": [139, 244, 286, 331, 354, 384, 385, 501, 523, 550, 551, 647, 655, 659, 661, 663, 665, 667, 670, 672, 674, 847, 914, 939, 966, 972, 996, 997, 1125, 1146, 1175, 1176, 1243, 1351, 1368], "uint8": [152, 214, 310, 311, 312, 322, 354, 441, 442, 650, 747, 761, 847, 866, 966, 971, 972, 1059, 1060, 1247, 1338, 1351, 1368, 1399], "uint8_pair": 1399, "uit": [720, 1311], "uk": [702, 1293], "unabl": [106, 155], "unalias": 600, "unari": [631, 847], "unbias": [502, 503, 847, 1126, 1127, 1368], "unchang": [229, 354, 649, 751, 847, 898, 949, 966, 1123, 1246, 1350, 1368], "uncompress": [36, 43, 44, 47, 49, 51, 156, 168, 354, 966], "undefin": [754, 847], "under": [38, 43, 47, 48, 49, 50, 51, 56, 58, 59, 60, 61, 97, 98, 160, 162, 165, 168, 169, 170, 193, 194, 195, 278, 301, 354, 839, 840, 842, 843, 848, 849, 852, 854, 855, 856, 924, 966, 1360, 1362, 1364, 1369, 1374, 1375, 1376], "underestim": [229, 354, 1123, 1368], "underli": [1, 56, 71, 72, 74, 89, 98, 103, 113, 131, 133, 134, 135, 137, 152, 153, 155, 159, 160, 161, 162, 169, 178, 181, 185, 230, 231, 255, 256, 288, 306, 312, 354, 408, 453, 454, 455, 459, 462, 464, 465, 466, 467, 468, 469, 470, 473, 475, 476, 478, 480, 484, 493, 494, 495, 496, 647, 675, 693, 696, 705, 847, 881, 966, 972, 1020, 1044, 1070, 1071, 1072, 1076, 1079, 1081, 1082, 1086, 1087, 1088, 1090, 1091, 1094, 1096, 1097, 1099, 1101, 1105, 1114, 1115, 1116, 1117, 1130, 1243, 1263, 1273, 1284, 1287, 1296, 1342, 1348, 1368, 1396], "understood": 809, "undo": [611, 618, 619, 621, 623, 625, 626], "unexpect": [113, 122, 152, 234, 282, 354, 593, 594, 847, 884, 911, 966, 1218, 1368], "unhelpfulli": [174, 176], "unicod": [21, 429, 707, 712, 713, 720, 731, 972, 1042, 1298, 1303, 1304, 1311, 1322, 1391], "unicodeform": [713, 1304], "unifi": [41, 311, 316, 354, 972], "uniform": [41, 354, 525, 642, 847, 1148, 1239, 1368], "unimod": [686, 847, 1278, 1368], "union": [63, 65, 577, 869, 880, 908, 921, 966, 972, 1202, 1395, 1396], "uniqu": [47, 51, 57, 75, 147, 155, 178, 179, 180, 183, 185, 212, 252, 257, 274, 278, 289, 345, 354, 370, 381, 396, 444, 542, 571, 617, 642, 730, 732, 733, 737, 756, 758, 766, 817, 847, 863, 892, 954, 966, 982, 993, 1008, 1062, 1166, 1196, 1225, 1239, 1321, 1323, 1324, 1328, 1355, 1357, 1368, 1384, 1386], "unique_column_valu": [278, 354], "unique_count": [847, 1368], "uniquekeepstrategi": [319, 354, 929, 966], "unit": [41, 72, 74, 147, 174, 175, 176, 177, 181, 185, 229, 354, 412, 453, 455, 461, 477, 483, 495, 501, 507, 591, 606, 730, 733, 757, 774, 788, 789, 790, 791, 797, 847, 908, 966, 972, 1024, 1070, 1072, 1078, 1098, 1104, 1116, 1123, 1125, 1131, 1216, 1321, 1324, 1356, 1368, 1399], "uniti": [190, 191, 193, 194, 195, 203, 859], "unity_catalog": 198, "univers": [207, 974], "unix": [71, 72, 461, 492, 797, 1078, 1113], "unknown": [585, 701, 807, 1292], "unless": [41, 57, 133, 257, 311, 316, 354, 725, 726, 822, 892, 966, 1316, 1391], "unlik": [146, 243, 323, 354, 862, 888, 932, 966], "unnam": [703, 1294], "unnest": [146, 354, 444, 642, 653, 702, 703, 722, 723, 743, 745, 758, 837, 847, 966, 1015, 1062, 1210, 1239, 1250, 1313, 1314, 1368, 1389, 1395], "unpivot": [269, 354, 903, 966], "unregist": [1379, 1380, 1381, 1396, 1398], "unsaf": [147, 847], "unset": [39, 162, 168, 180, 339, 354, 416, 417, 418, 420, 421, 478, 585, 847, 948, 1028, 1029, 1030, 1032, 1033, 1099, 1368, 1377], "unsign": [90, 91, 92, 93, 647, 847, 972, 1243, 1368], "unsigned_integ": 972, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 73, 79, 128, 130, 141, 142, 143, 144, 145, 146, 152, 154, 160, 162, 165, 166, 167, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 263, 301, 311, 316, 323, 354, 357, 358, 443, 444, 451, 463, 525, 594, 642, 656, 657, 659, 661, 663, 665, 667, 668, 670, 672, 674, 772, 774, 847, 869, 870, 880, 899, 908, 921, 924, 932, 940, 966, 1045, 1061, 1062, 1068, 1080, 1148, 1239, 1252, 1253, 1256, 1258, 1259, 1346, 1351, 1368, 1373], "unstack": 354, "unstackdirect": [322, 354], "unsuit": 129, "unsupport": [40, 211, 354, 862], "until": [48, 49, 50, 51, 96, 97, 243, 260, 354, 714, 715, 740, 888, 966, 1305, 1306, 1331], "up": [11, 41, 88, 153, 255, 258, 278, 288, 289, 295, 308, 354, 432, 433, 594, 707, 716, 717, 731, 847, 892, 893, 898, 919, 966, 972, 1047, 1298, 1307, 1308, 1322, 1368], "upcast": [55, 263, 354, 369, 847, 899, 966], "upcast_integer_typ": [1, 60], "updat": [40, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 205, 221, 354, 874, 966], "updated_at": [196, 199, 200], "updated_bi": [196, 199, 200], "upgrad": 109, "upheld": [898, 966], "upon": 151, "upper": [150, 151, 152, 229, 243, 354, 433, 525, 531, 585, 620, 757, 767, 786, 787, 789, 790, 805, 806, 834, 835, 847, 888, 966, 1050, 1123, 1148, 1153, 1216, 1356, 1368, 1386, 1389], "upper_bound": [243, 354, 433, 531, 585, 847, 888, 966, 1050, 1153, 1216, 1368], "uppercas": [626, 739, 1330, 1391], "upsampl": [243, 354, 888, 966], "urandom": [412, 1024], "uri": [39, 40, 152, 153, 154, 166, 167, 354], "url": [152, 153, 162, 168, 170, 190, 701, 703, 1292, 1294], "urllib": 153, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 63, 64, 65, 66, 72, 88, 97, 98, 101, 105, 128, 132, 134, 135, 137, 139, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 190, 211, 212, 213, 214, 217, 221, 223, 225, 226, 232, 233, 234, 236, 242, 243, 250, 252, 254, 255, 256, 258, 262, 269, 273, 274, 276, 277, 278, 282, 286, 287, 288, 289, 290, 292, 293, 295, 300, 301, 302, 306, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 328, 329, 330, 331, 333, 340, 354, 357, 364, 366, 368, 370, 379, 380, 403, 408, 409, 411, 424, 426, 428, 429, 430, 433, 443, 446, 449, 450, 458, 477, 478, 479, 481, 484, 492, 495, 497, 500, 501, 502, 503, 504, 508, 509, 510, 514, 529, 530, 531, 543, 557, 573, 581, 585, 587, 593, 594, 597, 618, 621, 623, 625, 626, 635, 642, 645, 647, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 677, 679, 681, 682, 686, 688, 689, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 704, 705, 706, 709, 710, 711, 712, 713, 716, 717, 718, 720, 722, 724, 726, 727, 728, 729, 730, 732, 733, 737, 740, 741, 745, 753, 759, 760, 762, 763, 764, 765, 766, 769, 770, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 795, 797, 801, 802, 804, 805, 807, 809, 810, 811, 813, 815, 816, 819, 822, 823, 824, 825, 826, 828, 829, 830, 831, 834, 835, 836, 837, 838, 843, 846, 847, 858, 859, 862, 863, 864, 865, 866, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 887, 888, 893, 896, 903, 908, 911, 914, 915, 916, 917, 919, 921, 923, 924, 925, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 949, 966, 970, 971, 972, 979, 980, 982, 1011, 1015, 1020, 1021, 1023, 1036, 1041, 1042, 1045, 1061, 1063, 1066, 1067, 1075, 1084, 1085, 1098, 1099, 1100, 1102, 1105, 1113, 1116, 1119, 1124, 1125, 1126, 1127, 1132, 1133, 1139, 1145, 1152, 1153, 1168, 1182, 1198, 1205, 1210, 1218, 1239, 1241, 1243, 1246, 1248, 1250, 1251, 1252, 1253, 1265, 1266, 1268, 1269, 1272, 1278, 1280, 1282, 1283, 1284, 1285, 1287, 1288, 1291, 1292, 1293, 1295, 1296, 1297, 1302, 1303, 1304, 1307, 1308, 1309, 1311, 1313, 1321, 1323, 1324, 1328, 1331, 1342, 1343, 1345, 1348, 1349, 1353, 1358, 1368, 1377, 1378, 1379, 1380, 1381, 1383, 1384, 1391, 1392, 1396, 1398, 1399], "usag": [181, 185, 298, 354, 837, 972, 1273, 1368], "usd": [241, 354, 1399], "use_abs_path": 147, "use_pyarrow": [47, 51, 150, 154, 156, 158, 162, 166, 312, 354, 966, 1348, 1368], "use_pyarrow_extension_arrai": [313, 354, 1349, 1368], "use_pyarrow_write_to_dataset": [47, 354], "use_statist": [162, 170], "user": [39, 145, 147, 152, 153, 207, 262, 277, 340, 354, 593, 594, 639, 679, 795, 809, 847, 907, 949, 966, 970, 974, 1218, 1269, 1368], "user_conn": 152, "usernam": [150, 153, 156, 158], "userwarn": 1, "usr": 152, "usual": [105, 153, 205, 316, 354, 452, 1069], "utc": [154, 166, 452, 456, 458, 460, 478, 730, 733, 971, 972, 1069, 1073, 1077, 1099, 1321, 1324], "utc_tz": 972, "utf": [38, 48, 87, 354, 966], "utf8": [21, 150, 151, 165, 707, 720, 731, 1298, 1311, 1322], "utf8_borders_onli": 21, "utf8_ful": [21, 57, 138], "utf8_full_condens": [7, 21, 138], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [316, 354, 797, 966], "uvloop": 152, "uvw": [702, 1293], "v": [8, 9, 10, 47, 229, 354, 678, 763, 765, 847, 1267, 1368, 1380, 1381], "v1": 33, "v2": [8, 10, 156, 168], "val": [41, 285, 354, 594, 639, 751, 837, 847, 913, 966], "valid": [38, 41, 48, 72, 96, 145, 150, 152, 156, 158, 162, 165, 185, 205, 223, 229, 257, 258, 283, 354, 443, 693, 695, 701, 702, 703, 705, 710, 716, 717, 837, 847, 876, 892, 893, 912, 941, 966, 972, 1061, 1123, 1284, 1286, 1292, 1293, 1294, 1296, 1301, 1307, 1308, 1368, 1377, 1378], "validate_output_schema": [898, 966], "validate_schema": [96, 145], "vals_phys": [751, 847], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 48, 51, 52, 54, 56, 57, 65, 66, 69, 75, 76, 84, 85, 94, 98, 107, 133, 134, 136, 137, 143, 150, 151, 152, 153, 162, 165, 168, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 205, 209, 211, 212, 213, 214, 221, 225, 226, 228, 231, 232, 233, 234, 238, 241, 243, 244, 245, 249, 253, 255, 257, 258, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 274, 276, 278, 279, 280, 282, 283, 286, 287, 288, 289, 290, 297, 300, 302, 303, 304, 305, 307, 308, 312, 313, 317, 318, 321, 322, 323, 324, 325, 332, 335, 336, 338, 341, 342, 344, 345, 354, 357, 358, 362, 363, 364, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 413, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 442, 443, 444, 447, 449, 450, 455, 459, 470, 475, 484, 493, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 578, 580, 581, 582, 583, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 602, 613, 614, 615, 616, 617, 627, 628, 629, 630, 633, 635, 636, 639, 640, 642, 643, 645, 648, 649, 650, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 683, 684, 685, 686, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 701, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 731, 740, 742, 746, 747, 749, 750, 752, 753, 754, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 770, 773, 775, 776, 778, 780, 781, 782, 783, 784, 794, 795, 800, 801, 802, 803, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 830, 831, 837, 847, 863, 864, 874, 877, 878, 882, 883, 884, 888, 890, 891, 892, 893, 900, 901, 902, 903, 905, 906, 909, 910, 911, 912, 914, 920, 923, 925, 926, 928, 931, 932, 933, 944, 945, 947, 950, 951, 953, 954, 966, 972, 977, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1036, 1037, 1038, 1041, 1042, 1043, 1047, 1050, 1052, 1053, 1054, 1056, 1061, 1062, 1063, 1064, 1066, 1067, 1072, 1076, 1091, 1096, 1105, 1114, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1130, 1131, 1132, 1133, 1137, 1138, 1139, 1140, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1203, 1205, 1206, 1207, 1208, 1211, 1212, 1218, 1219, 1220, 1222, 1223, 1225, 1227, 1228, 1230, 1231, 1233, 1234, 1238, 1239, 1240, 1241, 1245, 1246, 1247, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1266, 1267, 1268, 1271, 1275, 1276, 1277, 1278, 1280, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1322, 1331, 1334, 1338, 1339, 1340, 1341, 1348, 1349, 1350, 1353, 1355, 1357, 1359, 1368, 1377, 1382, 1384, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1394, 1396, 1398, 1399], "value1": [689, 847], "value2": [689, 847], "value_a": 1396, "value_b": 1396, "value_count": [756, 847, 1368], "value_cum_sum": [442, 847], "value_cum_sum_all_fil": [442, 847], "value_nam": [269, 321, 354, 903, 931, 966], "value_var": [269, 321, 354, 903, 931, 966], "valueerror": [10, 16, 21, 211], "valueexcept": 807, "var": [41, 186, 354, 673, 674, 847, 966, 1368, 1385], "var_samp": 1385, "vari": [155, 161, 211, 452, 1069, 1399], "variabl": [31, 38, 43, 47, 48, 49, 50, 51, 63, 64, 84, 160, 162, 165, 168, 169, 170, 184, 187, 195, 269, 309, 321, 354, 869, 870, 880, 903, 908, 921, 931, 966, 1343, 1368, 1378, 1380, 1396], "variable_nam": [269, 321, 354, 903, 931, 966], "variad": 152, "varianc": [325, 354, 503, 543, 673, 674, 759, 836, 847, 933, 966, 1127, 1168, 1262, 1358, 1368, 1389], "variou": [152, 210, 217, 354, 847, 871, 966, 971, 972, 1368], "vector": [658, 660, 662, 664, 666, 669, 671, 673, 847, 1254, 1255, 1257, 1260, 1261, 1262, 1368], "vector_index_format": 198, "vectoris": [471, 472, 1092, 1093], "vein": 205, "verbos": [30, 174, 176, 205, 702, 1293], "veri": [152, 255, 318, 354, 594, 847, 949, 1390], "verifi": [258, 354, 893, 966], "versicolor": [354, 357], "version": [39, 40, 43, 44, 54, 62, 63, 66, 132, 138, 150, 151, 154, 155, 156, 158, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 188, 195, 209, 212, 213, 222, 243, 244, 257, 269, 278, 286, 294, 301, 306, 311, 312, 316, 317, 324, 330, 335, 354, 357, 424, 443, 446, 451, 458, 471, 472, 484, 495, 500, 502, 503, 516, 523, 601, 602, 608, 612, 649, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 692, 700, 734, 745, 753, 760, 769, 772, 777, 821, 823, 824, 826, 847, 863, 864, 869, 875, 880, 888, 892, 903, 908, 910, 914, 918, 921, 924, 928, 937, 938, 944, 966, 972, 1061, 1068, 1075, 1084, 1085, 1092, 1093, 1105, 1116, 1122, 1124, 1126, 1127, 1145, 1146, 1246, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1283, 1291, 1325, 1342, 1346, 1348, 1351, 1368, 1373, 1396], "versu": [221, 354, 874, 966], "vertic": [65, 231, 322, 326, 354, 692, 708, 1283, 1299], "vertical_relax": 65, "via": [31, 150, 151, 152, 156, 160, 162, 165, 168, 169, 170, 208, 210, 222, 255, 288, 354, 446, 594, 703, 847, 875, 910, 966, 975, 1294], "view": [202, 594, 847], "virtual": 147, "visibl": [18, 229, 354, 1123, 1368], "visit": [443, 847, 1061, 1368], "visual": [250, 252, 354, 609, 921, 966], "volk": 146, "vote": [701, 703, 1292, 1294], "vowel": [716, 717, 1307, 1308], "vstack": [65, 231, 354], "w": [41, 152, 243, 289, 354, 695, 699, 701, 703, 763, 765, 888, 966, 972, 1286, 1290, 1292, 1294, 1317, 1380, 1381, 1384], "w_i": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "wa": [39, 43, 44, 62, 105, 138, 150, 151, 155, 156, 158, 162, 165, 168, 169, 170, 174, 175, 176, 177, 213, 222, 243, 257, 278, 286, 306, 311, 312, 317, 324, 354, 357, 424, 443, 446, 500, 502, 503, 650, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 718, 753, 791, 823, 824, 847, 864, 875, 888, 892, 914, 928, 966, 972, 1061, 1122, 1124, 1126, 1127, 1247, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1309, 1342, 1348, 1368, 1373, 1391, 1396], "wai": [97, 98, 131, 133, 134, 135, 137, 159, 160, 169, 242, 256, 277, 300, 333, 354, 479, 639, 678, 689, 701, 778, 837, 843, 847, 872, 879, 887, 907, 915, 923, 934, 942, 949, 966, 970, 1100, 1267, 1292, 1368], "wait": [48, 49, 50, 51, 966], "walk": 776, "want": [64, 134, 136, 150, 155, 156, 160, 162, 165, 205, 231, 262, 274, 286, 301, 354, 428, 451, 463, 510, 593, 594, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 682, 694, 711, 716, 717, 718, 772, 781, 786, 789, 795, 819, 822, 838, 847, 870, 924, 941, 966, 972, 1041, 1068, 1080, 1130, 1218, 1285, 1302, 1307, 1308, 1309, 1368, 1383], "warehous": 153, "warn": [100, 101, 104, 105, 108, 115, 117, 118, 128, 167, 635, 805, 806, 847, 1368], "watermark": [47, 354], "wb": [41, 354], "we": [47, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 210, 221, 222, 243, 258, 278, 286, 324, 354, 357, 446, 474, 479, 492, 525, 557, 585, 593, 594, 655, 659, 661, 663, 665, 667, 670, 672, 674, 703, 716, 717, 735, 785, 786, 787, 788, 789, 790, 807, 834, 835, 837, 847, 874, 875, 884, 888, 893, 898, 911, 914, 966, 1095, 1100, 1113, 1148, 1182, 1218, 1294, 1308, 1326, 1368, 1373, 1380], "weather": [716, 717, 1307, 1308], "wed": [354, 357], "wednesdai": [243, 354, 481, 484, 888, 966, 1102, 1105], "week": [243, 258, 286, 324, 354, 451, 463, 474, 479, 492, 494, 501, 655, 659, 661, 663, 665, 667, 670, 672, 674, 772, 786, 787, 789, 790, 791, 834, 835, 847, 888, 893, 914, 966, 972, 1068, 1080, 1095, 1100, 1113, 1115, 1125, 1368, 1392], "week_mask": [451, 463, 772, 1068, 1080], "weekdai": [459, 475], "weekend": [451, 463, 772, 1068, 1080], "weekli": [243, 354, 492, 888, 966, 1113], "weghorst": [703, 1294], "weight": [146, 500, 501, 502, 503, 657, 658, 660, 662, 664, 666, 669, 671, 673, 686, 847, 1124, 1125, 1126, 1127, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1278, 1368], "wei\u00df": 1391, "well": [41, 150, 151, 152, 165, 354, 531, 826, 847, 1153, 1368, 1396], "were": [205, 649, 650, 843, 847, 1246, 1247, 1368], "west": [75, 259, 354, 894, 966], "what": [52, 210, 263, 274, 354, 451, 593, 694, 718, 847, 899, 966, 1068, 1285, 1309], "whatev": 205, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 72, 88, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 146, 150, 151, 152, 153, 155, 156, 158, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 181, 185, 205, 213, 221, 227, 229, 231, 233, 234, 236, 243, 257, 259, 262, 270, 277, 283, 287, 289, 292, 293, 297, 300, 306, 309, 311, 312, 316, 317, 319, 323, 329, 354, 398, 411, 428, 429, 433, 451, 463, 500, 502, 503, 509, 578, 585, 606, 639, 649, 650, 680, 688, 689, 694, 700, 704, 706, 707, 711, 712, 718, 720, 725, 726, 727, 730, 731, 770, 772, 781, 795, 805, 847, 864, 874, 883, 888, 892, 894, 898, 904, 912, 916, 917, 920, 923, 928, 929, 932, 936, 963, 966, 1010, 1023, 1041, 1042, 1050, 1063, 1068, 1080, 1123, 1124, 1126, 1127, 1130, 1133, 1158, 1203, 1246, 1247, 1266, 1268, 1271, 1285, 1291, 1295, 1297, 1298, 1302, 1303, 1309, 1311, 1316, 1317, 1318, 1321, 1322, 1342, 1343, 1348, 1368, 1383, 1396], "when1": 837, "when2": 837, "when_matched_update_al": [40, 354], "when_not_matched_insert_al": [40, 354], "where": [41, 54, 57, 105, 152, 153, 155, 211, 225, 226, 231, 234, 243, 255, 259, 269, 278, 282, 288, 301, 302, 311, 316, 321, 323, 325, 354, 380, 484, 494, 497, 499, 501, 510, 581, 587, 593, 630, 648, 678, 686, 689, 691, 718, 738, 759, 771, 777, 779, 823, 824, 826, 828, 836, 837, 847, 877, 878, 884, 888, 894, 903, 911, 924, 925, 931, 932, 933, 966, 992, 1105, 1115, 1119, 1121, 1125, 1130, 1134, 1230, 1245, 1267, 1278, 1282, 1309, 1329, 1358, 1359, 1368, 1377, 1385, 1395, 1396, 1398], "wherea": [150, 165, 286, 354, 426, 430, 479, 492, 627, 628, 655, 847, 914, 966, 1100, 1113, 1227, 1228, 1368], "wherev": [41, 262, 340, 354, 594, 847, 1218, 1368], "whether": [38, 48, 52, 54, 96, 135, 137, 145, 146, 155, 161, 162, 168, 170, 185, 189, 228, 254, 258, 295, 300, 354, 366, 368, 382, 383, 463, 464, 480, 522, 548, 549, 635, 678, 679, 689, 704, 706, 770, 795, 847, 893, 898, 910, 919, 923, 966, 972, 979, 980, 994, 995, 1040, 1045, 1080, 1081, 1101, 1122, 1144, 1145, 1173, 1174, 1267, 1295, 1297, 1368, 1380, 1396], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 65, 134, 136, 150, 151, 152, 153, 154, 155, 160, 161, 162, 165, 166, 167, 168, 169, 170, 181, 184, 186, 205, 213, 214, 221, 222, 225, 226, 229, 231, 242, 243, 248, 257, 258, 278, 286, 294, 311, 312, 317, 319, 323, 324, 354, 366, 403, 411, 446, 451, 463, 474, 479, 481, 492, 501, 507, 531, 533, 536, 538, 539, 540, 541, 585, 593, 594, 606, 608, 655, 659, 661, 663, 665, 667, 670, 672, 674, 717, 735, 772, 786, 787, 789, 790, 791, 805, 806, 834, 835, 837, 847, 864, 866, 869, 872, 874, 875, 877, 879, 880, 888, 892, 893, 908, 910, 914, 918, 921, 928, 929, 932, 934, 966, 972, 1015, 1023, 1068, 1080, 1095, 1100, 1102, 1113, 1123, 1125, 1130, 1131, 1153, 1156, 1159, 1161, 1162, 1163, 1164, 1210, 1268, 1326, 1346, 1348, 1368, 1378, 1384, 1396, 1399], "while": [40, 64, 151, 154, 155, 166, 170, 181, 185, 195, 205, 255, 269, 318, 321, 323, 354, 429, 649, 712, 847, 870, 903, 931, 932, 966, 1042, 1246, 1303, 1368], "white": [41, 354], "whitespac": [138, 725, 726, 727, 1316, 1317, 1318, 1391], "whole": [593, 688, 689, 701, 847, 949, 966, 1292], "whose": [57, 99, 258, 278, 354, 504, 793, 847, 893, 966, 972], "why": [869, 880, 908, 921, 966], "wide": [152, 241, 269, 278, 321, 322, 354, 903, 931, 966], "wider": 55, "width": [27, 41, 66, 150, 151, 165, 354, 357, 584, 774, 966, 1209, 1368, 1373], "wiki": 21, "wikipedia": 21, "wildcard": [147, 504, 741, 781, 782, 795, 821, 843, 847], "win_loss": [41, 354], "window": [150, 151, 165, 243, 286, 354, 443, 500, 502, 503, 594, 635, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 775, 823, 824, 847, 888, 914, 966, 1061, 1124, 1126, 1127, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1368], "window_s": [656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 823, 824, 847, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1368], "windowmappingstrategi": [635, 847], "winter": [704, 706, 716, 717, 1295, 1297], "wise": [41, 57, 152, 236, 354, 371, 372, 373, 374, 375, 376, 434, 435, 436, 505, 589, 683, 684, 685, 749, 750, 795, 821, 847, 983, 984, 985, 986, 987, 988, 1052, 1053, 1054, 1128, 1214, 1215, 1275, 1276, 1277, 1340, 1341, 1368], "wish": [213, 317, 354, 423, 424, 752, 753, 847, 864, 928, 966, 1035, 1036, 1352, 1353, 1368], "with_column": [1, 13, 60, 63, 145, 211, 243, 277, 286, 316, 322, 329, 354, 363, 365, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 396, 397, 398, 399, 403, 408, 409, 411, 412, 425, 426, 428, 429, 430, 433, 438, 439, 440, 441, 442, 444, 447, 451, 452, 454, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 493, 494, 496, 498, 499, 501, 508, 509, 514, 519, 521, 523, 529, 530, 531, 534, 535, 537, 538, 539, 540, 541, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 592, 593, 594, 614, 616, 618, 619, 621, 623, 625, 626, 629, 630, 631, 635, 636, 639, 640, 642, 645, 649, 650, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 680, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 734, 735, 736, 738, 739, 740, 742, 745, 746, 751, 754, 761, 763, 765, 768, 772, 773, 774, 775, 776, 781, 782, 784, 785, 787, 788, 792, 802, 805, 806, 808, 811, 813, 816, 827, 831, 833, 835, 837, 843, 847, 869, 880, 888, 890, 907, 908, 914, 921, 936, 966, 972, 1062, 1099, 1239, 1297, 1368, 1396], "with_column_nam": 165, "with_columns_seq": [354, 966], "with_context": 966, "with_field": [594, 847], "with_replac": [290, 354, 573, 677, 847, 1198, 1265, 1368], "with_row_count": [354, 966], "with_row_index": [1, 286, 330, 354, 659, 661, 663, 665, 667, 670, 672, 674, 847, 938, 966, 1266, 1368, 1373], "within": [47, 52, 53, 54, 66, 76, 84, 174, 175, 176, 177, 196, 197, 199, 211, 242, 243, 244, 258, 286, 324, 354, 523, 645, 689, 847, 888, 893, 914, 966, 1146, 1368, 1396], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 73, 79, 105, 108, 130, 138, 141, 142, 143, 144, 145, 146, 154, 157, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 178, 179, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 201, 257, 259, 263, 301, 311, 312, 316, 322, 323, 354, 357, 358, 443, 444, 451, 463, 525, 594, 642, 656, 657, 659, 661, 663, 665, 667, 668, 670, 672, 674, 694, 704, 706, 718, 772, 774, 778, 805, 806, 825, 847, 869, 870, 880, 892, 894, 899, 908, 924, 932, 940, 966, 970, 1040, 1045, 1061, 1062, 1068, 1080, 1148, 1239, 1252, 1253, 1256, 1258, 1259, 1285, 1295, 1297, 1309, 1346, 1348, 1351, 1368, 1373, 1398], "without_fil": [154, 166, 167], "wod": [727, 1318], "womp": [320, 354, 930, 966], "word": [153, 716, 717, 726, 727, 738, 1329, 1391], "work": [41, 73, 79, 150, 151, 156, 160, 162, 171, 293, 329, 354, 366, 368, 404, 428, 429, 432, 433, 504, 513, 557, 586, 593, 594, 618, 619, 621, 623, 625, 626, 635, 707, 711, 712, 720, 731, 755, 805, 847, 910, 917, 936, 966, 970, 972, 979, 980, 1016, 1041, 1042, 1047, 1050, 1137, 1182, 1211, 1298, 1302, 1303, 1311, 1322, 1354, 1368], "workaround": 354, "workbook": [41, 155, 161, 354], "workday_raas_format": 198, "worker": [910, 966], "working_with_conditional_format": [41, 354], "working_with_sparklin": [41, 354], "worksheet": [41, 155, 161, 354], "workspac": 190, "workspace_url": 190, "world": [1, 21, 694, 718, 725, 726, 727, 972, 1189, 1285, 1309, 1316, 1317, 1318, 1379, 1382, 1391], "wors": [923, 966], "worth": [557, 1182], "worthwhil": [174, 176], "would": [104, 150, 151, 165, 210, 312, 316, 354, 357, 379, 390, 451, 463, 562, 593, 594, 605, 635, 645, 770, 772, 847, 991, 1002, 1068, 1080, 1187, 1241, 1348, 1368, 1373, 1394], "wrap": [86, 138, 425, 531, 593, 847, 1037, 1368], "wrap_numer": [425, 847, 1037, 1368], "wrapper": [64, 870, 966], "writabl": [36, 38, 43, 44, 45, 46, 47, 294, 312, 354, 1348, 1368], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 141, 149, 151, 156, 205, 217, 354, 433, 609, 612, 847, 896, 921, 966, 972, 1050, 1368], "write_avro": 354, "write_clipboard": [149, 354], "write_csv": [37, 151, 165, 354], "write_databas": 354, "write_delta": 354, "write_excel": 354, "write_iceberg": 354, "write_ipc": [156, 354], "write_ipc_stream": 354, "write_json": 354, "write_markdown_frame_to_stdout": 205, "write_ndjson": [45, 354], "write_parquet": 354, "write_t": [47, 354], "write_to_dataset": [47, 354], "writeabl": [312, 354, 1348, 1368], "writer": [40, 354], "writer_properti": [40, 354], "writerproperti": [40, 354], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 294, 354, 608, 918, 966], "ww": [1391, 1398], "www": [713, 743, 1304], "x": [28, 57, 65, 88, 107, 132, 138, 141, 150, 151, 153, 155, 161, 165, 178, 179, 181, 209, 229, 247, 250, 252, 257, 278, 288, 289, 318, 321, 322, 354, 357, 363, 365, 367, 386, 391, 412, 438, 445, 498, 499, 514, 519, 521, 523, 545, 552, 564, 590, 592, 593, 594, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 634, 640, 648, 649, 650, 654, 683, 686, 722, 745, 746, 751, 754, 761, 763, 765, 768, 769, 775, 779, 781, 782, 784, 795, 807, 808, 811, 813, 816, 821, 826, 831, 837, 847, 892, 898, 922, 924, 931, 966, 971, 972, 1003, 1044, 1056, 1133, 1152, 1218, 1246, 1247, 1275, 1278, 1313, 1346, 1350, 1351, 1368, 1373, 1380, 1381, 1384, 1390, 1391, 1396, 1398], "x00": [407, 408, 409, 410, 411, 413, 696, 1019, 1020, 1021, 1022, 1023, 1025, 1287], "x01": [411, 1023], "x05": [411, 1023], "x07": 412, "x1": 412, "x10": [411, 1023], "x80": 412, "x83": 412, "x88": 412, "x8e": 412, "x99": 412, "x_": [501, 847, 1125, 1368], "x_0": [322, 354, 500, 501, 502, 503, 847, 1124, 1125, 1126, 1127, 1368], "x_1": [322, 354, 501, 847, 1125, 1368], "x_2": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "x_i": [501, 847, 1125, 1368], "x_invers": [640, 847], "x_pow_8": 1390, "x_round": 1390, "x_round_1": 1390, "x_squar": [640, 847], "x_t": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "x_uniqu": [617, 847], "x_y": [391, 564], "xb": 412, "xb9neq": 412, "xbd": 412, "xc14": 412, "xd3": 412, "xdist": 1399, "xee": 412, "xf4v": 412, "xf9": 412, "xfb": 412, "xff": [407, 408, 409, 410, 413, 696, 1019, 1020, 1021, 1022, 1025, 1287], "xi": [702, 1293], "xl": 155, "xlog2": [616, 640, 847], "xlsb": 155, "xlsx": [41, 155, 354], "xlsx2csv": [155, 173], "xlsx2csv_option": 155, "xlsxwriter": [41, 173, 354], "xor": [422, 847, 1034, 1368, 1387], "xor_xi": [761, 847], "xx": [11, 58, 60, 185, 221, 248, 301, 354, 874, 966, 972, 1384, 1391, 1398], "xxx": [225, 354, 743, 877, 966], "xy": [58, 60], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 363, 695, 702, 847, 1286, 1293, 1344, 1368, 1391], "y": [28, 57, 65, 88, 107, 132, 138, 141, 178, 179, 181, 209, 229, 250, 252, 257, 278, 288, 289, 318, 321, 322, 354, 357, 363, 365, 367, 386, 391, 412, 481, 484, 498, 499, 519, 521, 545, 552, 564, 592, 594, 617, 619, 621, 623, 625, 626, 629, 630, 634, 648, 649, 650, 654, 730, 732, 733, 745, 754, 761, 763, 765, 768, 769, 779, 784, 791, 807, 811, 813, 816, 826, 831, 847, 892, 922, 924, 931, 966, 971, 972, 1003, 1044, 1102, 1105, 1246, 1247, 1321, 1323, 1324, 1368, 1373, 1384, 1391, 1392, 1398], "y_": [500, 501, 502, 503, 847, 1124, 1125, 1126, 1127, 1368], "y_0": [322, 354, 500, 501, 502, 503, 847, 1124, 1125, 1126, 1127, 1368], "y_1": [322, 354], "y_i": [501, 847, 1125, 1368], "y_mul": 745, "y_t": [500, 502, 503, 847, 1124, 1126, 1127, 1368], "y_uniqu": [617, 847], "ya": [720, 1311], "ya29": 167, "ye": [141, 837], "year": [52, 54, 243, 258, 286, 301, 324, 354, 451, 463, 464, 465, 474, 475, 477, 479, 492, 493, 655, 659, 661, 663, 665, 667, 670, 672, 674, 772, 785, 786, 787, 788, 789, 790, 834, 835, 847, 888, 893, 914, 966, 972, 1068, 1080, 1081, 1082, 1095, 1096, 1098, 1100, 1113, 1114, 1392], "yellow": [354, 358, 407, 408, 409, 410, 413], "yield": [135, 137, 150, 151, 152, 165, 229, 231, 254, 318, 354, 514, 593, 635, 847, 966, 1123, 1130, 1368], "you": [1, 11, 15, 41, 47, 51, 57, 64, 65, 131, 133, 134, 135, 136, 137, 147, 150, 151, 152, 153, 155, 156, 159, 160, 162, 165, 169, 171, 205, 213, 231, 234, 243, 254, 255, 258, 262, 274, 278, 282, 286, 287, 288, 289, 301, 308, 311, 317, 318, 319, 321, 340, 354, 357, 423, 424, 428, 451, 463, 471, 472, 474, 478, 481, 484, 504, 510, 531, 557, 585, 593, 594, 609, 635, 640, 647, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 682, 694, 711, 716, 717, 718, 738, 741, 752, 753, 772, 781, 786, 789, 791, 795, 805, 809, 819, 822, 826, 838, 847, 864, 870, 884, 888, 893, 910, 911, 914, 921, 924, 928, 929, 931, 941, 949, 966, 970, 972, 1035, 1036, 1041, 1068, 1080, 1092, 1093, 1099, 1102, 1105, 1130, 1153, 1182, 1218, 1237, 1243, 1285, 1302, 1307, 1308, 1309, 1329, 1346, 1352, 1353, 1368, 1373, 1378, 1383, 1399], "your": [39, 41, 56, 57, 98, 145, 150, 151, 152, 153, 155, 171, 205, 255, 257, 262, 288, 289, 292, 308, 328, 333, 340, 354, 357, 456, 501, 516, 594, 703, 730, 732, 733, 740, 809, 847, 892, 898, 916, 935, 942, 949, 966, 970, 1073, 1125, 1218, 1294, 1321, 1323, 1324, 1331, 1368, 1373, 1399], "yy": [11, 58, 60, 185, 221, 248, 301, 354, 874, 966, 972, 1384, 1391, 1398], "yyi": [225, 354, 743, 877, 966], "yyyi": [41, 354], "yz": [58, 60], "z": [41, 65, 88, 138, 179, 229, 250, 252, 257, 288, 289, 318, 321, 322, 354, 363, 365, 367, 523, 552, 594, 619, 621, 623, 625, 626, 634, 648, 649, 650, 694, 702, 704, 706, 718, 730, 733, 763, 765, 784, 811, 813, 816, 822, 826, 831, 847, 892, 922, 924, 931, 966, 971, 972, 1133, 1246, 1247, 1285, 1293, 1295, 1297, 1309, 1321, 1324, 1368, 1380, 1384, 1396, 1398], "z_0": [322, 354], "z_1": [322, 354], "zap": 972, "zero": [29, 41, 131, 132, 148, 150, 151, 156, 158, 162, 180, 183, 209, 233, 243, 255, 287, 301, 306, 312, 313, 354, 509, 585, 590, 675, 678, 686, 740, 754, 847, 867, 883, 888, 966, 1049, 1133, 1210, 1278, 1331, 1342, 1348, 1349, 1368, 1390, 1396], "zero_copy_onli": [1348, 1368], "zfill": [715, 761, 847, 1306], "zip": 1399, "zip_with": [236, 354, 1368], "zone": [72, 181, 182, 185, 452, 456, 478, 501, 733, 788, 789, 790, 847, 972, 1069, 1073, 1099, 1125, 1324, 1368], "zoneinfo": [72, 972], "zoom": [41, 354], "zstd": [40, 43, 44, 47, 49, 51, 354, 966], "zz": [185, 221, 248, 301, 354, 874, 966, 1384, 1391, 1398], "zzz": 743, "\u03bc": [138, 214, 243, 255, 286, 288, 289, 308, 324, 354, 452, 453, 455, 456, 457, 458, 460, 462, 466, 468, 469, 471, 472, 473, 474, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 655, 659, 661, 663, 665, 667, 670, 672, 674, 730, 733, 788, 789, 790, 791, 797, 847, 866, 888, 914, 966, 972, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1085, 1086, 1090, 1092, 1093, 1094, 1095, 1099, 1100, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1321, 1324, 1391], "\u0441\u0438\u043d\u0438\u0439": 1391, "\u0967\u096f\u096f\u096f": 972, "\u0968\u0966\u096d\u096d": 972, "\u4eac\u90fd": 972, "\u5927\u962a": 972, "\u6771\u4eac": [428, 429, 711, 712, 972, 1041, 1042, 1302, 1303], "\u90fd\u5e02": 972, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [713, 1304], "\uff54\uff45\uff53\uff54": 1391, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1391, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1391, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1391, "\ud835\udf0b": 1390}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.ScanCastOptions", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.parquet.ParquetFieldOverwrites", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_metadata", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.__setitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.match_to_schema", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.__getitem__", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.match_to_schema", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.QueryOptFlags", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.bottom_k_by", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.repeat_by", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.top_k_by", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1384, 1397], "IF": 1388, "__array__": [207, 974], "__arrow_c_stream__": [208, 975], "__dataframe__": 209, "__getitem__": [210, 862, 976], "__iter__": 332, "__setitem__": 211, "ab": [362, 977, 1390], "aco": 1393, "acosd": 1393, "add": 363, "add_business_dai": [451, 1068], "agg": [333, 942], "agg_group": 364, "aggreg": [206, 361, 861, 973, 1385], "alia": [365, 978], "alias": [1385, 1390, 1391], "align_fram": 57, "all": [334, 366, 382, 548, 762, 943, 979, 994, 1173, 1397], "all_horizont": 763, "and_": 367, "ani": [368, 383, 549, 764, 980, 995, 1174], "any_horizont": 765, "api": [1, 58, 59, 60, 61, 859, 1396], "append": [369, 981], "approx_n_uniqu": [212, 370, 766, 863, 982], "arang": 767, "arcco": [371, 983], "arccosh": [372, 984], "arcsin": [373, 985], "arcsinh": [374, 986], "arctan": [375, 987], "arctan2": 768, "arctan2d": 769, "arctanh": [376, 988], "arg_max": [377, 384, 550, 989, 996, 1175], "arg_min": [378, 385, 551, 990, 997, 1176], "arg_sort": [379, 991], "arg_sort_bi": 770, "arg_tru": [380, 992], "arg_uniqu": [381, 993], "arg_wher": 771, "arr": [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "arrai": [66, 839, 1360, 1386], "array_agg": 1386, "array_contain": 1386, "array_get": 1386, "array_length": 1386, "array_low": 1386, "array_mean": 1386, "array_revers": 1386, "array_sum": 1386, "array_to_str": 1386, "array_uniqu": 1386, "array_upp": 1386, "asin": 1393, "asind": 1393, "assert": 1399, "assert_frame_equ": 174, "assert_frame_not_equ": 175, "assert_series_equ": 176, "assert_series_not_equ": 177, "atan": 1393, "atan2": 1393, "atan2d": 1393, "atand": 1393, "attribut": [349, 961, 1361], "avail": 1, "avg": 1385, "avro": 860, "backward_fil": [406, 1018], "base_utc_offset": [452, 1069], "basepartitioncontext": 142, "batched_read": 140, "batchedcsvread": 140, "bin": [407, 408, 409, 410, 411, 412, 413, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "binari": [67, 840, 853, 1362], "bit_and": 1387, "bit_count": 1387, "bit_length": 1391, "bit_or": 1387, "bit_xor": 1387, "bitwis": 1387, "bitwise_and": [414, 1026], "bitwise_count_on": [415, 1027], "bitwise_count_zero": [416, 1028], "bitwise_leading_on": [417, 1029], "bitwise_leading_zero": [418, 1030], "bitwise_or": [419, 1031], "bitwise_trailing_on": [420, 1032], "bitwise_trailing_zero": [421, 1033], "bitwise_xor": [422, 1034], "boolean": [68, 841, 1363], "bottom_k": [213, 423, 864, 1035], "bottom_k_bi": [424, 1036], "build_info": 62, "business_day_count": 772, "cach": 865, "cancel": 958, "cast": [214, 425, 860, 866, 1037, 1394], "cast_time_unit": [453, 1070], "cat": [426, 427, 428, 429, 430, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "catalog": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "cataloginfo": 196, "categor": 69, "categori": [842, 1364], "categoricalremappingwarn": 100, "cbrt": [431, 1046, 1390], "ceil": [432, 1047, 1390], "centuri": [454, 1071], "chronoformatwarn": 101, "chunk_length": 1048, "claus": 1384, "clear": [215, 867, 1049], "clip": [433, 1050], "clipboard": 860, "clone": [216, 868, 1051], "cloud": 860, "co": [434, 1052, 1393], "coalesc": [773, 1388], "col": 843, "collect": 869, "collect_al": 63, "collect_all_async": 64, "collect_async": 870, "collect_schema": [217, 871], "column": [178, 179, 218, 844, 872], "columninfo": 197, "columnnotfounderror": 102, "combin": [455, 1072], "comparison": [853, 1372], "comput": [350, 845, 1365], "computeerror": 103, "concat": [65, 552, 692, 1177, 1283, 1391], "concat_arr": 774, "concat_list": 775, "concat_str": 776, "concat_w": 1391, "condit": 1388, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 205], "conjunct": 853, "contain": [386, 407, 553, 693, 998, 1019, 1178, 1284], "contains_ani": [694, 1285], "context": 205, "convers": 858, "convert_time_zon": [456, 1073], "corr": [219, 777, 1385], "cosd": 1393, "cosh": [435, 1053], "cot": [436, 1054, 1393], "cotd": 1393, "count": [220, 335, 437, 778, 873, 944, 1055, 1385], "count_match": [387, 554, 695, 999, 1179, 1286], "cov": 779, "creat": 1398, "create_list_strategi": 180, "credenti": 860, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [140, 860], "cum_count": [438, 780, 1056], "cum_fold": 781, "cum_max": [439, 1057], "cum_min": [440, 1058], "cum_prod": [441, 1059], "cum_reduc": 782, "cum_sum": [442, 783, 1060], "cum_sum_horizont": 784, "cumulative_ev": [443, 1061], "customufuncwarn": 104, "cut": [444, 1062], "dai": [459, 1076], "data": 359, "databas": 860, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 181, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354], "dataorientationwarn": 105, "dataset": 860, "datasourceformat": 198, "datatyp": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 359], "date": [71, 457, 785, 1074, 1391], "date_part": 1392, "date_rang": [786, 787], "datetim": [72, 458, 788, 1075], "datetime_rang": [789, 790], "decim": 73, "decod": [408, 696, 1020, 1287], "decor": 205, "defer": 96, "degre": [445, 1393], "delet": 1398, "delta": 860, "describ": [221, 874, 1063], "descript": [351, 962, 1366], "deseri": [222, 446, 875], "diff": [447, 555, 1064, 1180], "disable_string_cach": 97, "distinct": 1384, "div": 1390, "document": 1396, "dot": [448, 1065], "drop": [223, 876, 1398], "drop_in_plac": 224, "drop_nan": [225, 449, 877, 1066], "drop_nul": [226, 450, 556, 878, 1067, 1181], "dst_offset": [460, 1077], "dt": [451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117], "dtype": [182, 227, 879, 1118], "duplicateerror": 106, "durat": [74, 791], "element": 792, "enable_string_cach": 98, "encod": [409, 697, 1021, 1288], "ends_with": [410, 426, 698, 1022, 1038, 1289, 1391], "engine_config": 941, "entropi": [497, 1119], "enum": 75, "epoch": [461, 1078], "eq": [498, 598, 1120], "eq_miss": [499, 1121], "equal": [228, 1122], "error": 360, "escape_regex": [99, 699, 1290], "estimated_s": [229, 1123], "eval": [557, 1182], "ewm_mean": [500, 1124], "ewm_mean_bi": [501, 1125], "ewm_std": [502, 1126], "ewm_var": [503, 1127], "exampl": [1, 972, 1399], "excel": 860, "except": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 360, 1397], "exclud": [504, 793], "execut": 1377, "execute_glob": 1378, "exp": [505, 1128, 1390], "explain": [880, 1398], "explain_al": 130, "explod": [230, 388, 506, 558, 700, 881, 1000, 1129, 1183, 1291], "export": [352, 1367], "expr": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761], "express": [847, 970, 1396], "extend": [1, 231, 1130], "extend_const": [507, 1131], "extract": [701, 1292, 1392], "extract_al": [702, 1293], "extract_group": [703, 1294], "extract_mani": [704, 1295], "feather": 860, "fetch": 959, "fetch_block": 960, "field": [76, 741, 1332, 1333], "fill_nan": [232, 508, 882, 1132], "fill_nul": [233, 509, 883, 1133], "filter": [234, 510, 884, 1134], "find": [705, 1296], "find_mani": [706, 1297], "first": [336, 389, 511, 559, 794, 885, 945, 1001, 1135, 1184, 1385], "flag": [235, 1136], "flatten": 512, "float32": 77, "float64": 78, "floor": [513, 1137, 1390], "floordiv": 514, "fold": [236, 795], "format": 796, "forward_fil": [515, 1138], "frame": 1396, "from": 1384, "from_arrow": 131, "from_datafram": 132, "from_dict": [133, 134], "from_epoch": 797, "from_json": 516, "from_numpi": 135, "from_panda": 136, "from_record": 137, "from_repr": 138, "function": [1, 846, 858, 972, 1389], "gather": [517, 560, 1139, 1185], "gather_everi": [237, 518, 561, 886, 1140, 1186], "ge": [519, 1141], "get": [390, 520, 562, 1002, 1187], "get_categori": [427, 1039], "get_chunk": 1142, "get_column": [238, 240], "get_column_index": 239, "get_index_typ": 139, "get_polars_schema": 201, "get_table_info": 191, "glimps": 241, "global": 1396, "gpuengin": [941, 963], "greatest": 1388, "group": [798, 1384], "group_bi": [242, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 887, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957], "group_by_dynam": [243, 888], "groupbi": [332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 964], "gt": [521, 1143], "has_multiple_output": 599, "has_nul": [522, 1144], "has_valid": 1145, "hash": [523, 1146], "hash_row": 244, "have": 1384, "head": [245, 337, 524, 563, 707, 799, 889, 946, 1147, 1188, 1298], "height": 246, "helper": 1399, "hist": [525, 1148], "hour": [462, 1079], "hstack": 247, "iceberg": 860, "ifnul": 1388, "implod": [526, 800, 1149], "import": 972, "in_process": [958, 959, 960], "index": 0, "index_of": [527, 1150], "initcap": 1391, "inprocessqueri": [958, 959, 960, 965], "input": 860, "insert_column": 248, "inspect": [528, 890], "instanc": 205, "int128": 79, "int16": 80, "int32": 81, "int64": 82, "int8": 83, "int_rang": [801, 802], "interfac": 1395, "interpol": [249, 529, 891, 1151], "interpolate_bi": [530, 1152], "intersect": 1397, "introduct": 1396, "invalidoperationerror": 107, "io": [140, 141, 142, 143, 144, 145, 970], "ipc": 860, "is_between": [531, 1153], "is_business_dai": [463, 1080], "is_column": 600, "is_column_select": 601, "is_dupl": [250, 532, 1154], "is_empti": [251, 1155], "is_finit": [533, 1156], "is_first_distinct": [534, 1157], "is_in": [535, 1158], "is_infinit": [536, 1159], "is_last_distinct": [537, 1160], "is_leap_year": [464, 1081], "is_liter": 602, "is_loc": 1040, "is_nan": [538, 1161], "is_not_nan": [539, 1162], "is_not_nul": [540, 1163], "is_nul": [541, 1164], "is_regex_project": 603, "is_sort": 1165, "is_uniqu": [252, 542, 1166], "iso_year": [465, 1082], "item": [253, 1167], "iter_column": 254, "iter_row": 255, "iter_slic": 256, "join": [257, 391, 564, 708, 892, 1003, 1189, 1299, 1384], "join_asof": [258, 893], "join_wher": [259, 894], "json": 860, "json_decod": [709, 1300], "json_encod": [742, 1334], "json_norm": 146, "json_path_match": [710, 1301], "keep": 618, "keyedpartit": 143, "keyedpartitioncontext": 144, "kurtosi": [543, 1168], "lake": 860, "last": [338, 392, 544, 565, 803, 895, 947, 1004, 1169, 1190, 1385], "lazi": [260, 896], "lazyfram": [48, 49, 50, 51, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 966], "lazygroupbi": [942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957], "le": [545, 1170], "least": 1388, "left": 1391, "len": [339, 546, 566, 804, 948, 1171, 1191], "len_byt": [428, 711, 1041, 1302], "len_char": [429, 712, 1042, 1303], "length": 1391, "limit": [261, 547, 897, 1172, 1384], "linear_spac": [805, 806], "list": [84, 183, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 848, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1369], "list_catalog": 192, "list_namespac": 193, "list_tabl": 194, "lit": 807, "ln": 1390, "load": [2, 205], "load_from_fil": 3, "load_profil": 184, "log": [588, 1213, 1390], "log10": [589, 1214, 1390], "log1p": [590, 1215, 1390], "log2": 1390, "lower": 1391, "lower_bound": [591, 1216], "lt": [592, 1217], "ltrim": 1391, "manag": 205, "manipul": [356, 851, 968, 1371], "map": 619, "map_batch": [593, 808, 898], "map_el": [594, 1218], "map_field": 620, "map_group": [340, 809, 949], "map_row": 262, "mapwithoutreturndtypewarn": 108, "match_to_schema": [263, 899], "math": 1390, "max": [264, 341, 393, 567, 595, 810, 900, 950, 1005, 1083, 1192, 1219, 1385], "max_horizont": [265, 811], "mean": [266, 342, 568, 596, 812, 901, 951, 1084, 1193, 1220], "mean_horizont": [267, 813], "median": [268, 343, 394, 569, 597, 814, 902, 952, 1006, 1085, 1194, 1221, 1385], "melt": [269, 903], "merge_sort": [270, 904], "meta": [598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 849], "metadata": 969, "method": 1396, "microsecond": [466, 1086], "millennium": [467, 1087], "millisecond": [468, 1088], "min": [271, 344, 395, 570, 613, 815, 905, 953, 1007, 1089, 1195, 1222, 1385], "min_horizont": [272, 816], "minut": [469, 1090], "miscellan": [355, 850, 858, 967, 1370], "mod": [614, 1390], "mode": [615, 1223], "moduleupgraderequirederror": 109, "month": [470, 1091], "month_end": [471, 1092], "month_start": [472, 1093], "mul": 616, "multipl": [205, 858], "n_chunk": [273, 1224], "n_uniqu": [274, 345, 396, 571, 617, 817, 954, 1008, 1196, 1225], "name": [618, 619, 620, 621, 622, 623, 624, 625, 626, 844, 852, 1226, 1397], "namespaceinfo": 199, "nan_max": [627, 1227], "nan_min": [628, 1228], "nanosecond": [473, 1094], "ne": [604, 629, 1229], "ne_miss": [630, 1230], "neg": 631, "nest": 359, "new": 1, "new_from_index": 1231, "next_batch": 140, "nodataerror": 110, "normal": [713, 1304, 1391], "norowsreturnederror": 111, "not_": [632, 1232], "nth": 818, "null": 85, "null_count": [275, 633, 906, 1233], "nullif": 1388, "numer": [359, 853, 1372], "object": 86, "octet_length": 1391, "od": 860, "offset": 1384, "offset_bi": [474, 1095], "ones": 819, "oper": [853, 972, 1372, 1397, 1398], "option": [205, 860], "or_": 634, "order": 1384, "ordinal_dai": [475, 1096], "other": 359, "outofboundserror": 112, "output": 860, "output_nam": 605, "over": 635, "pad_end": [714, 1305], "pad_start": [715, 1306], "panic": 360, "panicexcept": 113, "parametercollisionerror": 114, "parametr": [178, 179, 180, 181, 182, 183, 184, 185, 186, 1399], "parquet": [141, 860], "parquetfieldoverwrit": 141, "partit": [142, 143, 144, 860], "partition_bi": 276, "partitionbykei": 52, "partitionmaxs": 53, "partitionpart": 54, "pct_chang": [636, 1234], "peak_max": [637, 1235], "peak_min": [638, 1236], "performancewarn": 115, "pi": 1390, "pipe": [277, 639, 907], "pivot": 278, "plot": [357, 1373], "plugin": [145, 147, 970], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 843, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1399], "polarserror": 116, "polarsinefficientmapwarn": 117, "polarswarn": 118, "pop": 606, "pow": [640, 1237, 1390], "prefix": 621, "prefix_field": 622, "product": [279, 641, 1238], "profil": [908, 1399], "provid": 1, "pyarrow": 860, "python": [859, 1396], "qcut": [642, 1239], "quantil": [280, 346, 643, 820, 909, 955, 1240], "quantile_cont": 1385, "quantile_disc": 1385, "quarter": [476, 1097], "queri": [858, 1396], "queryoptflag": 940, "radian": [644, 1393], "random": 858, "rank": [645, 1241], "read_avro": 148, "read_clipboard": 149, "read_csv": 150, "read_csv_batch": 151, "read_databas": 152, "read_database_uri": 153, "read_delta": 154, "read_excel": 155, "read_ipc": 156, "read_ipc_schema": 157, "read_ipc_stream": 158, "read_json": 159, "read_ndjson": 160, "read_od": 161, "read_parquet": 162, "read_parquet_metadata": 163, "read_parquet_schema": 164, "rechunk": [281, 646, 1242], "reduc": 821, "refer": 859, "regexp_lik": 1391, "regist": 1379, "register_dataframe_namespac": 58, "register_expr_namespac": 59, "register_glob": 1380, "register_io_sourc": 145, "register_lazyframe_namespac": 60, "register_mani": 1381, "register_plugin_funct": 147, "register_series_namespac": 61, "registr": 1, "reinterpret": [411, 647, 1023, 1243], "remot": 910, "remov": [282, 911], "renam": [283, 912, 1244], "rename_field": [743, 1335], "repeat": 822, "repeat_bi": [648, 1245], "replac": [477, 649, 716, 1098, 1246, 1307, 1391], "replace_al": [717, 1308], "replace_column": 284, "replace_mani": [718, 1309], "replace_strict": [650, 1247], "replace_time_zon": [478, 1099], "reshap": [651, 1248], "restore_default": 4, "revers": [285, 397, 572, 652, 719, 913, 1009, 1197, 1249, 1310, 1391], "right": 1391, "rle": [653, 1250], "rle_id": [654, 1251], "roll": [286, 655, 914], "rolling_corr": 823, "rolling_cov": 824, "rolling_kurtosi": [656, 1252], "rolling_map": [657, 1253], "rolling_max": [658, 1254], "rolling_max_bi": 659, "rolling_mean": [660, 1255], "rolling_mean_bi": 661, "rolling_median": [662, 1256], "rolling_median_bi": 663, "rolling_min": [664, 1257], "rolling_min_bi": 665, "rolling_quantil": [666, 1258], "rolling_quantile_bi": 667, "rolling_skew": [668, 1259], "rolling_std": [669, 1260], "rolling_std_bi": 670, "rolling_sum": [671, 1261], "rolling_sum_bi": 672, "rolling_var": [673, 1262], "rolling_var_bi": 674, "root_nam": 607, "round": [479, 675, 1100, 1263, 1390], "round_sig_fig": [676, 1264], "row": [287, 288], "rows_by_kei": 289, "rowserror": 119, "rtrim": 1391, "sampl": [290, 573, 677, 1198, 1265], "save": [5, 205], "save_to_fil": 6, "scan": 860, "scan_csv": 165, "scan_delta": 166, "scan_iceberg": 167, "scan_ipc": 168, "scan_ndjson": 169, "scan_parquet": 170, "scan_pyarrow_dataset": 171, "scan_tabl": 195, "scancastopt": 55, "scatter": 1266, "schema": [291, 915, 971, 1336], "schemaerror": 122, "schemafieldnotfounderror": 123, "search_sort": [678, 1267], "second": [480, 1101], "select": [292, 356, 825, 851, 916, 968, 1371, 1384], "select_seq": [293, 917], "selector": 972, "seri": [185, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1368], "serial": [294, 355, 608, 918, 967], "set": [972, 1268, 1397], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [574, 1199], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [575, 1200], "set_profil": 186, "set_random_se": 172, "set_sort": [295, 679, 919, 1269], "set_streaming_chunk_s": 15, "set_symmetric_differ": [576, 1201], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [577, 1202], "set_verbos": 30, "shape": [296, 1270], "shapeerror": 124, "shift": [297, 398, 578, 680, 920, 1010, 1203, 1271], "show": 1398, "show_graph": [609, 921], "show_vers": 173, "shrink_dtyp": [681, 1272], "shrink_to_fit": [298, 1273], "shuffl": [682, 1274], "sign": [683, 1275, 1390], "sin": [684, 1276, 1393], "sind": 1393, "sinh": [685, 1277], "sink_csv": 48, "sink_ipc": 49, "sink_ndjson": 50, "sink_parquet": 51, "size": [412, 1024], "skew": [686, 1278], "slice": [299, 579, 687, 720, 922, 1204, 1279, 1311], "sort": [300, 399, 580, 688, 923, 1011, 1205, 1280], "sort_bi": 689, "split": [721, 1312], "split_exact": [722, 1313], "split_part": 1391, "splitn": [723, 1314], "sql": [301, 826, 924, 1384, 1389, 1395, 1396], "sql_expr": 827, "sqlcontext": [1377, 1378, 1379, 1380, 1381, 1382, 1383, 1396], "sqlinterfaceerror": 120, "sqlsyntaxerror": 121, "sqrt": [690, 1281, 1390], "starts_with": [413, 430, 724, 1025, 1043, 1315, 1391], "state": [31, 205], "std": [302, 400, 581, 691, 828, 925, 1012, 1206, 1282], "stddev": 1385, "str": [692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331], "strategi": 1399, "strftime": [481, 1102, 1392], "string": [87, 359, 854, 1374, 1391], "string_to_arrai": 1391, "stringcach": [56, 858], "stringcachemismatcherror": 125, "strip_char": [725, 1316], "strip_chars_end": [726, 1317], "strip_chars_start": [727, 1318], "strip_prefix": [728, 1319], "strip_suffix": [729, 1320], "strpo": 1391, "strptime": [730, 1321, 1391], "struct": [88, 741, 742, 743, 744, 745, 829, 855, 1332, 1333, 1334, 1335, 1336, 1337, 1375], "structfieldnotfounderror": 126, "style": 358, "sub": 746, "substr": 1391, "suffix": 623, "suffix_field": 624, "sum": [303, 347, 401, 582, 747, 830, 926, 956, 1013, 1207, 1338, 1385], "sum_horizont": [304, 831], "tabl": [1382, 1398], "tableinfo": [200, 201], "tabletyp": 202, "tail": [305, 348, 583, 731, 748, 832, 927, 957, 1208, 1322, 1339], "tan": [749, 1340, 1393], "tand": 1393, "tanh": [750, 1341], "tempor": [359, 856, 1376, 1392], "test": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 1399], "thread_pool_s": 187, "threadpool_s": 188, "time": [89, 482, 833, 1103], "time_rang": [834, 835], "timestamp": [483, 1104, 1391], "to_arrai": [584, 1209], "to_arrow": [306, 1342], "to_dat": [732, 1323], "to_datetim": [733, 1324], "to_decim": [734, 1325], "to_dict": [307, 308], "to_dummi": [309, 1343], "to_fram": 1344, "to_init_repr": [310, 1345], "to_integ": [735, 1326], "to_jax": [311, 1346], "to_list": [402, 1014, 1347], "to_loc": 1044, "to_lowercas": [625, 736, 1327], "to_numpi": [312, 1348], "to_panda": [313, 1349], "to_phys": [751, 1350], "to_seri": 314, "to_str": [484, 1105], "to_struct": [315, 403, 585, 1015, 1210], "to_tim": [737, 1328], "to_titlecas": [738, 1329], "to_torch": [316, 1351], "to_uppercas": [626, 739, 1330], "toomanyrowsreturnederror": 127, "top_k": [317, 752, 928, 1352], "top_k_bi": [753, 1353], "total_dai": [485, 1106], "total_hour": [486, 1107], "total_microsecond": [487, 1108], "total_millisecond": [488, 1109], "total_minut": [489, 1110], "total_nanosecond": [490, 1111], "total_second": [491, 1112], "transpos": 318, "tree_format": 610, "trigonometri": 1393, "truediv": 754, "truncat": [492, 1113, 1398], "try_cast": 1394, "type": [359, 1394], "uint16": 90, "uint32": 91, "uint64": 92, "uint8": 93, "undo_alias": 611, "union": 1397, "uniqu": [319, 404, 586, 755, 929, 1016, 1211, 1354], "unique_count": [756, 1355], "uniti": [196, 197, 198, 199, 200, 201, 202, 204], "unknown": 94, "unnest": [320, 744, 930, 1337, 1386, 1398], "unpivot": [321, 931], "unregist": 1383, "unstablewarn": 128, "unstack": 322, "unsuitablesqlerror": 129, "updat": [323, 932], "upper": 1391, "upper_bound": [757, 1356], "upsampl": 324, "us": 205, "uses_lexical_ord": 1045, "using_string_cach": 189, "utf8": 95, "value_count": [758, 1357], "var": [325, 405, 587, 759, 836, 933, 1017, 1212, 1358], "varianc": 1385, "vstack": 326, "warn": 360, "week": [493, 1114], "weekdai": [494, 1115], "when": 837, "where": [760, 1384], "width": [327, 934], "window": 857, "with_column": [328, 935], "with_columns_seq": [329, 936], "with_context": 937, "with_field": 745, "with_row_count": [330, 938], "with_row_index": [331, 939], "with_time_unit": [495, 1116], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 612], "write_ndjson": 46, "write_parquet": 47, "xor": 761, "year": [496, 1117], "zero": 838, "zfill": [740, 1331], "zip_with": 1359}})